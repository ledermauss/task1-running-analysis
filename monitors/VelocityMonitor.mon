//*****************************************************************************
// Title:         VelocityMonitor
// Description:   VelocityMonitor description
// Dependencies:  None
// Author:        istmapara
//
//*****************************************************************************
package com.softwareag.saep;
using com.apama.aggregates.mean;
using com.apama.correlator.timeformat.TimeFormat;
using com.apama.aggregates.min;

monitor VelocityMonitor {

	action onload() {
		PlayerVelocity playerV;
		on all PlayerVelocity() : playerV {
			log playerV.toString() at INFO;
		}	
//		float avg;
//		//frequenz: 50 Hz (wird getrigerred jede 20 milisekunden.
//		// Ich will das überprüfen durch  TimeFormat.getMicroTime, geht nicht
//		on all wait(0.02) {
//			from v in all PlayerVelocity(playerId = 0)
//			  within 0.02
//			  select mean(v.velocity.toFloat()) : avg {
//				//log "Current time:" + TimeFormat.getMicroTime() + "Avg for player 0" + " : " + avg.toString() at INFO;
//				log "Current time:" + currentTime.toString() + "Avg for player 0" + " : " + avg.toString() at INFO;
//
//			}
//			from v in all PlayerVelocity(playerId = 5)
//			  within 0.02
//			  select mean(v.velocity.toFloat()) : avg {
//				log "Current time:" + currentTime.toString() + " Avg for player 5" + " : " + avg.toString() at INFO;
//			}
//		}
	
		RunningStatistics runningS;
		on all RunningStatistics() : runningS {
			log runningS.toString() at INFO;
			
		}
	}
}	