VERS 00000001 4
HEAD 00001205 <?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="/resources/transform.xslt"?><header><componentName>correlator</componentName><version>9.10.0.0.275046</version><build>rel/9.10.0.x@275046</build><buildPlatform>amd64-win</buildPlatform><platform>Windows 7 (Service Pack 1)</platform><cputype>GenuineIntel family 6 model 12 stepping 3 Intel(R) Core(TM) i7-4790S CPU @ 3.20GHz</cputype><cpus>8</cpus><javaEnabled>true</javaEnabled><replayLogMode>inputLog</replayLogMode><args><arg>C:\SoftwareAG\Apama\bin\correlator.exe</arg><arg>--port</arg><arg>15903</arg><arg>--loglevel</arg><arg>INFO</arg><arg>--name</arg><arg>Apama Designer Correlator for task1(task1:defaultCorrelator)</arg><arg>-j</arg><arg>--inputLog</arg><arg>logs/defaultCorrelator_${START_TIME}_${ID}.input.log</arg></args><environment><variable>ALLUSERSPROFILE=C:\ProgramData</variable><variable>APAMA_HOME=C:\SoftwareAG\Apama</variable><variable>APAMA_WORK=C:\Users\Public\SoftwareAG\ApamaWork_9.10</variable><variable>APPDATA=C:\Users\istmapara\AppData\Roaming</variable><variable>COMMONPROGRAMFILES=C:\Program Files\Common Files</variable><variable>COMMONPROGRAMFILES(X86)=C:\Program Files (x86)\Common Files</variable><variable>COMMONPROGRAMW6432=C:\Program Files\Common Files</variable><variable>COMPUTERNAME=WIDB-2014-6</variable><variable>COMSPEC=C:\Windows\system32\cmd.exe</variable><variable>FP_NO_HOST_CHECK=NO</variable><variable>HDGUARD=C:\Program Files (x86)\RDT Global\HDGUARD\</variable><variable>HOMEDRIVE=Z:</variable><variable>HOMEPATH=\</variable><variable>HOMESHARE=\\userv-fs\istmapara</variable><variable>LOCALAPPDATA=C:\Users\istmapara\AppData\Local</variable><variable>LOGONSERVER=\\SAMBABDC</variable><variable>NUMBER_OF_PROCESSORS=8</variable><variable>OS=Windows_NT</variable><variable>PATH=C:\SoftwareAG\Apama\..\jvm\jvm\jre\bin\server;C:\SoftwareAG\Apama\..\jvm\jvm\jre\bin;C:\SoftwareAG\Apama\..\jvm\jvm\jre\bin\server;C:\SoftwareAG\Apama\..\jvm\jvm\jre\bin;C:\Users\Public\SoftwareAG\ApamaWork_9.10\lib;C:\SoftwareAG\Apama\bin;C:\oraclexe\app\oracle\product\11.2.0\server\bin;C:\ProgramData\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\VSShell\Common7\IDE\;C:\Program Files (x86)\Microsoft SQL Server\100\DTS\Binn\;C:\Program Files\Java\jdk1.6.0_21\bin;C:\Program Files\Git\cmd;C:\Program Files\TortoiseGit\bin</variable><variable>PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC</variable><variable>PENTAHO_JAVA_HOME=C:\PENTAHO\jdk1.6.0_21</variable><variable>PROCESSOR_ARCHITECTURE=AMD64</variable><variable>PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 60 Stepping 3, GenuineIntel</variable><variable>PROCESSOR_LEVEL=6</variable><variable>PROCESSOR_REVISION=3c03</variable><variable>PROGRAMDATA=C:\ProgramData</variable><variable>PROGRAMFILES=C:\Program Files</variable><variable>PROGRAMFILES(X86)=C:\Program Files (x86)</variable><variable>PROGRAMW6432=C:\Program Files</variable><variable>PROMPT=$P$G</variable><variable>PSMODULEPATH=C:\Windows\system32\WindowsPowerShell\v1.0\Modules\</variable><variable>PUBLIC=C:\Users\Public</variable><variable>SESSIONNAME=Console</variable><variable>SYSTEMDRIVE=C:</variable><variable>SYSTEMROOT=C:\Windows</variable><variable>TEMP=C:\Users\ISTMAP~2\AppData\Local\Temp</variable><variable>TMP=C:\Users\ISTMAP~2\AppData\Local\Temp</variable><variable>USERDOMAIN=FBI-USERV</variable><variable>USERNAME=istmapara</variable><variable>USERPROFILE=C:\Users\istmapara</variable><variable>VBOX_MSI_INSTALL_PATH=C:\Program Files\Oracle\VirtualBox\</variable><variable>VS120COMNTOOLS=C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\Tools\</variable><variable>WINDIR=C:\Windows</variable><variable>WINDOWS_TRACING_FLAGS=3</variable><variable>WINDOWS_TRACING_LOGFILE=C:\BVTBin\Tests\installpackage\csilogfile.log</variable></environment><version>9.10.0.0.275046</version></header>
RAND 0000000a 2471252013
TIME 00000010 1484234969.278,1
CONN 0000003e 10612171611911497990:10613948555848853766 from 127.0.0.1:63395
TIME 0000000e 1484234969.6,1
MONF 0000022b /*
	$Copyright(c) 2011 Progress Software Corporation (PSC). All rights reserved.$ 
	$Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$ 
	Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG 
*/

package com.apama.correlator;

/** For internal use only. 

@private*/
event ManagementAck {
	string response;
	integer uid;
}
 0000002f C:\SoftwareAG\Apama\monitors\ManagementImpl.mon
MONF 0000456e /*
	$Copyright(c) 2011-2013 Progress Software Corporation (PSC). All rights reserved.$ 
	$Copyright (c) 2013-2016 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$ 
	Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG 
	
	Requires ManagementImpl.mon
*/

package com.apama.correlator;

/**
 * EPL representation of the correlator status.
 */
event EngineStatus {
	/** 
	* @private
	*
	* Identifer prepended to user status keys to differentiate from standard keys.
	*/
	constant string userPrefix := "user-";

	/** @private*/
	dictionary<string,string> values;

	/**
	 * Get the time in ms that the Engine has been running for.
	 *
	 * @return The uptime of the Engine.
	 */
	action getUptime() returns integer {
		return values["uptime"].toInteger();
	}

	/**
	 * Get the number of contexts active in the Engine.
	 *
	 * @return The number of contexts active.
	 */
	action getNumContexts() returns integer {
		return values["numContexts"].toInteger();
	}

	/**
	 * Get the number of monitors defined in the Engine.
	 *
	 * @return The number of monitors defined.
	 */
	action getNumMonitors() returns integer {
		return values["numMonitors"].toInteger();
	}
	
	/**
	 * Get the number of monitor processes or active
	 * sub-monitors. If a monitor spawns it creates a new
	 * process.
	 *
	 * @return The number of monitor processes.
	 */
	action getNumProcesses() returns integer {
		return values["numProcesses"].toInteger();
	}
	
	/**
	 * Get the number of Java (JMon) Applications defined in the Engine.
	 *
	 * @return The number of Java Applications.
	 */
	action getNumJavaApplications() returns integer {
		return values["numJavaApplications"].toInteger();
	}
	
	/**
	 * Get the number of active listeners.
	 *
	 * @return The number of active listeners.
	 */
	action getNumListeners() returns integer {
		return values["numListeners"].toInteger();
	}
	
	/**
	 * Get the number of event types defined.
	 *
	 * @return The number of event types.
	 */
	action getNumEventTypes() returns integer {
		return values["numEventTypes"].toInteger();
	}
	
	/**
	 * Get the total number of events waiting on the route queues (value of
	 * 'rq' in the correlator status line).
	 *
	 * @return The number of waiting events.
	 */
	action getNumQueuedFastTrack() returns integer {
		return values["numQueuedFastTrack"].toInteger();
	}
	
	/**
	 * Get the total number of events waiting on the input queues (value of
	 * 'iq' in the correlator status line).
	 *
	 * @return The number of waiting events.
	 */
	action getNumQueuedInput() returns integer {
		return values["numQueuedInput"].toInteger();
	}
	
	/**
	 * Get the number of events received since the Engine started.
	 *
	 * @return The number of events received.
	 */
	action getNumReceived() returns integer {
		return values["numReceived"].toInteger();
	}
	
	/**
	 * Get the number of events received on the internal input
	 * queue since the Engine started.
	 *
	 * @return The number of events received.
	 */
	action getNumFastTracked() returns integer {
		return values["numFastTracked"].toInteger();
	}
	
	/**
	 * Get the number of event consumers connected to the
	 * engine.
	 *
	 * @return The number of event consumers.
	 */
	action getNumConsumers() returns integer {
		return values["numConsumers"].toInteger();
	}
	
	/**
	 * Get the number of events waiting on the output queue.
	 *
	 * @return The number of events waiting.
	 */
	action getNumOutEventsQueued() returns integer {
		return values["numOutEventsQueued"].toInteger();
	}

	/**
	 * Gets the number of output events which have been
	 * put onto the output queue. This corresponds to the
	 * number of MonitorScript emit commands executed.
	 *
	 * @return The number of events emitted.
	 */
	action getNumOutEventsCreated() returns integer {
		return values["numEmits"].toInteger();
	}
	
	/**
	 * This is the number of output events sent out by the
	 * correlator process. This differs from getNumOutEventsCreated
	 * since events can be of interest to a varying number of
	 * consumers, and can be dropped by the output queue.
	 *
	 * @return The number of events sent.
	 */
	action getNumOutEventsSent() returns integer {
		return values["numOutEventsSent"].toInteger();
	}
	
	/**
	 * Get the queue size of the most backed up context.
	 *
	 * @return The number of events queued.
	 */
	action getMostBackedUpQueueSize() returns integer {
		return values["mostBackedUpICQueueSize"].toInteger();
	}
	
	/**
	 * Get the number of active sub-listeners.
	 *
	 * @return The number of sub-listeners.
	 */
	action getNumSubListeners() returns integer {
		return values["numSubListeners"].toInteger();
	}
	
	/**
	 * Get the number of events taken off the input queue and processed 
	 * since the Engine started.
	 *
	 * @return The number of events processed.
	 */
	action getNumProcessed() returns integer {
		return values["numProcessed"].toInteger();
	}

	/**
	 * Get the name of the most backed up context.
	 *
	 * @return Name of the slowest context.
	 */
	action getMostBackedUpInput() returns string {
		return values["mostBackedUpInputContext"];
	}

	/**
	 * Get the name of the slowest receiver.
	 *
	 * @return The slowest receiver.
	 */
	action getSlowestReceiver() returns string {
		return values["slowestReceiver"];
	}

	/**
	 * Get the queue size of the slowest receiver.
	 *
	 * @return The queue size of the slowest receiver.
	 */
	action getSlowestReceiverQueueSize() returns integer {
		return values["slowestReceiverQueueSize"].toInteger();
	}

	/** @private */
	action prep(string input) returns string {
		return userPrefix + input;
	}

	/**
	 * Get a user-set status value of type float OR the alternative value specified if the key does not exist.
	 *
	 * @param key The name of the value to get.
	 * @param alt The alternative value to return if the key does not exist.
	 * @return The user status of type float or the alternate value if the key does not exist.
	 */
	action getUserFloatOr(string key, float alt) returns float {
		key := prep(key);
		if(values.hasKey(key)) then {
			return float.parse(values[key]);
		} else {
			return alt;
		}
	}

	/**
	 * Get a user-set status value of type integer OR the alternative value specified if the key does not exist.
	 *
	 * @param key The name of the value to get.
	 * @param alt The alternative value to return if the key does not exist.
	 * @return The user status of type integer or the alternate value if the key does not exist.
	 */
	action getUserIntegerOr(string key, integer alt) returns integer {
		key := prep(key);
		if(values.hasKey(key)) then {
			return integer.parse(values[key]);
		} else {
			return alt;
		}
	}

	/**
	 * Get a user-set status value of type boolean OR the alternative value specified if the key does not exist.
	 *
	 * @param key The name of the value to get.
	 * @param alt The alternative value to return if the key does not exist.
	 * @return The user status of type boolean or the alternate value if the key does not exist.
	 */
	action getUserBooleanOr(string key, boolean alt) returns boolean {
		key := prep(key);
		if(values.hasKey(key)) then {
			return boolean.parse(values[key]);
		} else {
			return alt;
		}
	}

	/**
	 * Get a user-set status value of type string OR the alternative value specified if the key does not exist.
	 *
	 * @param key The name of the value to get.
	 * @param alt The alternative value to return if the key does not exist.
	 * @return The user status of type string or the alternate value if the key does not exist.
	 */
	action getUserStringOr(string key, string alt) returns string {
		key := prep(key);
		if(values.hasKey(key)) then {
			return values[key];
		} else {
			return alt;
		}
	}

	/**
	 * Get a user-set status value of type float.
	 *
	 * @param key The name of the value to get.
	 * @return The user status of type float.
	 */
	action getUserFloat(string key) returns float {
		return float.parse(values[prep(key)]);
	}

	/**
	 * Get a user-set status value of type integer.
	 *
	 * @param key The name of the value to get.
	 * @return The user status of type integer.
	 */
	action getUserInteger(string key) returns integer {
		return integer.parse(values[prep(key)]);
	}

	/**
	 * Get a user-set status value of type boolean.
	 *
	 * @param key The name of the value to get.
	 * @return The user status of type boolean.
	 */
	action getUserBoolean(string key) returns boolean {
		return boolean.parse(values[prep(key)]);
	}

	/**
	 * Get a user-set status value of type string.
	 *
	 * @param key The name of the value to get.
	 * @return The user status of type string.
	 */
	action getUserString(string key) returns string {
		return values[prep(key)];
	}

	/** Get the full correlator status value dictionary .
	 *
	 * @return The full correlator status value dictionary.
	 */
	action getValues() returns dictionary<string,string> {
		return values;
	}
}


/**
 * EPL interface to the persistence functionality of the correlator.
 */
event Persistence {
	/**
	 * Asynchronously request a Correlator state persistence operation.
	 *
	 * At some point after this action is called, the correlator will commit its persistent state to storage. Once the commit has completed
	 * successfully, the provided callback will be invoked.
	 */
	action persist(action<> callback) {
		integer uid := integer.getUnique();
		management.asyncRequestSeq("doPersistNow", new sequence<string>, uid);
		on ManagementAck(uid = uid) {
			callback();
		}
	}

	/** @private*/
	import "ManagementPlugin" as management;
}

/**
 * EPL interface to the generic component management functionality of the correlator.
 */
event Component {

	/**
	 * Argument for attach/detachAsEventConsumer - use legacy mode.
	 * In this mode, all events are delivered in serial to the receiver on the default channel.
	 */
	constant integer CONNECT_LEGACY := 0;
	/**
	 * Argument for attach/detachAsEventConsumer - use parallel mode.
	 * In this mode, all events are delivered in parallel per channel.
	 */
	constant integer CONNECT_PARALLEL := 1;

	/** @private*/
	import "ManagementPlugin" as management;
	/**
	 * Get the hostname of the server the correlator is running on.
 	 */
	action getHostname() returns string {
		return management.getHostname();
	}
	/**
	 * Get the component name of the correlator.
	 */
	action getComponentName() returns string {
		return management.getComponentName();
	}
	/**
	 * Get the port the correlator is running on.  This is the
	 * main port number; extra ports specified via the config file
	 * are not accessible.
	 */
	action getComponentPort() returns integer {
		return management.getComponentPort();
	}
	/** 
	 * Get the correlator's logical ID.  This is a unique ID assigned to every correlator process at startup.
	 */
	action getComponentLogicalId() returns string {
		return management.getComponentLogicalId();
	}
	/** 
	 * Get the correlator's physical ID.  This is a unique ID generated for a component.
	 */
	action getComponentPhysicalId() returns string {
		return management.getComponentPhysicalId();
	}
	/**
	 * Get the number of CPUs the correlator has available to it.
	 */
	action getNumberCPUs() returns integer {
		return management.getNumberCPUs();
	}
	/**
	 * Get whether or not correlator is running with external clocking on.
	 */
	action isExternallyClocked() returns boolean {
		return management.isExternallyClocked();
	}

	/** Get the current license mode of the correlator - either "nolicensefile" or "licensefilesupplied". */
	action getLicenseMode() returns string {
		return management.getLicenseMode();
	}

	/**
	* Get the correlator status, internal values and user added stats.
	*
	* @return EngineStatus a representation of all status values 
	* including user added values.
	*/
	action getStatus() returns EngineStatus {
		string statusString := management.getStatus();
		return EngineStatus(dictionary<string,string>.parse(statusString));
	}

	/**
	* Set a specific value on a user added status, If the status
	* doesn't already exist this will add it.
	*
	* Note the value must be in string format.
	*
	* @param name The name of the user status to add.
	* @param value The value associated with the user Status value.
	*/
	action setUserStatus(string name, string value) {
		management.setUserStatus(name, value);
	}

	/**
	* Delete a specific user added status.
	*
	* @param name The name of the user status value to delete.
	*/
	action deleteUserStatus(string name) {
		management.deleteUserStatus(name);
	}

	/** @private*/
	action _escapeChannel(string c) returns string {
		if c.find(" ")=-1 and c.find("\n")=-1 and c.find("\\")=-1 then {
			return c;
		}
		return c.replaceAll("\\", "\\\\").replaceAll(" ", "\\x20").replaceAll("\n","\\n");
	}


	/**
	 * Connect to another Apama component to receive events on the specified channels.
	 * connectMode should be one of CONNECT_LEGACY or CONNECT_PARALLEL.
	 */
	action attachAsEventConsumerTo(string host, integer port, sequence<string> channels, boolean disconnectSlow, integer connectMode) {
		string channel;
		string parallel:="";
		if connectMode = CONNECT_PARALLEL then {
			parallel := "parallel ";
		}
		string disconnectSlowStr := "";
		if disconnectSlow then {
			disconnectSlowStr := "disconnectSlow ";
		}
		for channel in channels {
			management.asyncRequestSeq("addReceiveConnection",
			                           [host + " "+disconnectSlowStr + parallel + port.toString() + " " + _escapeChannel(channel)], -1);
		}
	}
	/**
	 * Disconnect from another Apama component to receive events on the specified channels.
	 * connectMode should be one of CONNECT_LEGACY or CONNECT_PARALLEL.
	 */
	action detachAsEventConsumerFrom(string host, integer port, sequence<string> channels, integer connectMode) {
		string channel;
		string parallel:="";
		if connectMode = CONNECT_PARALLEL then {
			parallel := "parallel ";
		}
		for channel in channels {
			management.asyncRequestSeq("removeReceiveConnection", 
			                           [host + " "+ parallel + port.toString() + " " + _escapeChannel(channel)], -1);
		}
	}
}

/**
 * EPL interface to correlator logging functionality. All methods on this interface are identical to the equivalent engine_management
 * requests, which are described in more detail in the user documentation.
 */
event Logging {
	/** @private*/
	import "ManagementPlugin" as management;

	/**
	 * Schedule simultaneous rotation of all correlator logs, including application logs and the input log. The rotation will happen shortly
	 * after this call.
	 */
	action rotateLogs() {
		management.asyncRequestSeq("rotateLogs", new sequence<string>, -1);
	}

	/** Change the file that the correlator logs to. */
	action setLogFile(string filename) {
		string ignore := management.syncRequestSeq("setLogFile", [filename]);
	}

	/** Set the destination of EPL log messages from the given package. A blank package is the root package. */
	action setApplicationLogFile(string pkg, string filename) {
		if(pkg = "") then {
			string ignore := management.syncRequestSeq("setApplicationLogFile", [filename]);
		} else {
			string ignore := management.syncRequestSeq("setApplicationLogFile", [filename, pkg]);
		}
	}

	/** Set the log level threshold of EPL log messages from the given package. A blank package is the root package. */
	action setApplicationLogLevel(string pkg, string level) {
		if(pkg = "") then {
			string ignore := management.syncRequestSeq("setApplicationLogLevel", [level]);
		} else {
			string ignore := management.syncRequestSeq("setApplicationLogLevel", [level, pkg]);
		}
	}

	/** Return the destination file for EPL log messages from the given package. A blank package is the root package. */
	action getApplicationLogFile(string pkg) returns string {
		if(pkg = "") then {
			return management.syncRequestSeq("getApplicationLogFile", new sequence<string>);
		} else {
			return management.syncRequestSeq("getApplicationLogFile", [pkg]);
		}
	}

	/** Return the log level threshold of EPL log messages from the given package. A blank package is the root package. */
	action getApplicationLogLevel(string pkg) returns string {
		if(pkg = "") then {
			return management.syncRequestSeq("getApplicationLogLevel", new sequence<string>);
		} else {
			return management.syncRequestSeq("getApplicationLogLevel", [pkg]);
		}
	}

	/** Reset logging for the given package to the default. A blank package is the root package. */
	action unsetApplicationLogFile(string pkg) {
		if(pkg = "") then {
			string ignore := management.syncRequestSeq("unsetApplicationLogFile", new sequence<string>);
		} else {
			string ignore := management.syncRequestSeq("unsetApplicationLogFile", [pkg]);
		}
	}

	/** Remove the log level from the given package, returning it to default. A blank package is the root package. */
	action unsetApplicationLogLevel(string pkg) {
		if(pkg = "") then {
			string ignore := management.syncRequestSeq("unsetApplicationLogLevel", new sequence<string>);
		} else {
			string ignore := management.syncRequestSeq("unsetApplicationLogLevel", [pkg]);
		}
	}
}
 0000002b C:\SoftwareAG\Apama\monitors\Management.mon
MONF 00000528 //*****************************************************************************
// Title:       ScenarioDeleterSupport
// Description: Provides event definitions for deleting Scenario instances. 
//
// Revision:    $Id: ScenarioDeleterSupport.mon 249541 2015-03-09 11:42:24Z bsp $
//
// $Copyright(c) 2004-2005, 2008-2009 Progress Software Corporation (PSC). All rights reserved.$
// $Copyright (c) 2013-2014 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
//
//*****************************************************************************

package com.apama.scenarios;

event DeleteAllScenarios {
	constant string CHANNEL := "ScenarioDeleter";
}

event DeleteScenariosByUser {
	string owner;
}

monitor ScenarioDeleterSupport {
	
	action onload() {
		
		DeleteAllScenarios deleteAll;
		on all DeleteAllScenarios():deleteAll {
			send deleteAll to DeleteAllScenarios.CHANNEL;
		}
		
		DeleteScenariosByUser deleteByUser;
		on all DeleteScenariosByUser():deleteByUser {
			send deleteByUser to DeleteAllScenarios.CHANNEL;
		}
	}
	
} 00000048 C:\SoftwareAG\Apama\monitors\scenario_support\ScenarioDeleterSupport.mon
MONF 0000476f /*
 * $Copyright (c) 2015 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$ 
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG 
 *
 * Event definitions for providing a set of functions to assist with date and time formatting.
 * 
 */

package com.apama.correlator.timeformat;

/** 
 * An event providing a time-parser object that you can then use 
 * to make multiple calls using its <tt>parseTime()</tt> function, specifying
 * the date/time string to be parsed. 
 * 
 * Reusing a <tt>CompiledPattern</tt> object is significantly more efficient than 
 * providing the same time pattern (<tt>format</tt>) in multiple calls to parse 
 * functions defined on the <tt>TimeFormat</tt> event object.
 */
event CompiledPattern {
	/** @private*/ import "TimeFormatPlugin" as __plugin;
	/** @private*/ wildcard chunk __c;
	
	/**
	 * Parses the <tt>timeDate</tt> string according to the format provided
	 * by this time/date parser event object returning the result 
	 * as a <tt>float</tt> of seconds since the epoch, or <tt>NaN</tt> 
	 * if it cannot parse the specified string. 
	 *
	 * For more information about the return value, see the description of 
	 * "Time Format plug-in parse functions" in "Developing Apama Applications."
	 *
	 * @param timeDate String that represents a time and/or a date.
	 * @returns The resulting value of seconds since the epoch.
	 */
	action parseTime(string timeDate) returns float 
	{
		return __plugin.parseTimeFromPattern(__c, timeDate);
	}	
}

/** 
 * An event object providing a set of functions to assist with date and 
 * time formatting.
 */
event TimeFormat
{
	// Public
	
	/** 
	 * Converts the <tt>time</tt> parameter to the local time and returns 
	 * that time in the format specified.
	 *
	 * @param time Float that indicates the time you want to format. 
	 * This value is the number of seconds since the epoch in UTC.
	 * This is the same format used by the <tt>currentTime</tt> variable. 
	 * For information about the <tt>currentTime</tt> variable, see
	 * "Getting the current time" in "Developing Apama Applications".
	 * @param format String that specifies the format that you want 
	 * the returned time to have. For details about what you can specify 
	 * for the <tt>format</tt> string, see "Format specification for the TimeFormat 
	 * functions" in the documentation for "Developing Apama Applications".
	 * @returns A string representing the local time in the specified
	 * format.
	 */
	action format(float time, string format) returns string 
	{
		return __plugin.format(time, format);
	}
	
	/** 
	 * Converts the <tt>time</tt> parameter to the local time and returns 
	 * that time in the format specified. 
	 *
	 * The <tt>formatUTC()</tt> function always returns UTC (GMT no matter 
	 * what the local time is).
	 *
	 * @param time Float that indicates the time you want to format. 
	 * This value is the number of seconds since the epoch in UTC.
	 * This is the same format used by the <tt>currentTime</tt> variable. 
	 * For information about the <tt>currentTime</tt> variable, see
	 * "Getting the current time" in "Developing Apama Applications".
	 * @param format String that specifies the format that you want 
	 * the returned time to have. For details about what you can specify 
	 * for the <tt>format</tt> string, see "Format specification for the TimeFormat 
	 * functions" in the documentation for "Developing Apama Applications".
	 * @returns A string representing the local time in the specified
	 * format.
	 */
	action formatUTC(float time, string format) returns string 
	{
		return __plugin.formatUTC(time, format);
	}
	
	/** 
	 * Converts the <tt>time</tt> parameter, which is UTC, to the time in the time
	 * zone you specify and returns that time in the format you specify.
	 *
	 * @param time Float that indicates the time you want to format. 
	 * This value is the number of seconds since the epoch in UTC.
	 * This is the same format used by the <tt>currentTime</tt> variable. 
	 * For information about the <tt>currentTime</tt> variable, see
	 * "Getting the current time" in "Developing Apama Applications".
	 * @param format String that specifies the format that you want 
	 * the returned time to have. For details about what you can specify 
	 * for the <tt>format</tt> string, see "Format specification for the TimeFormat 
	 * functions" in the documentation for "Developing Apama Applications".
	 * @param tzName String that specifies the name of a time zone.
	 * @returns A string representing the local time in the specified
	 * format.
	 */
	action formatWithTimeZone(float time, string format, string tzName) returns string 
	{
		return __plugin.formatWithTimeZone(time, format, tzName);
	}

	/**
	 * Returns the local time as a float of seconds since the epoch (UTC).
	 * 
	 * This value has the same format as the <tt>currentTime</tt> variable. However, 
	 * the <tt>getTime()</tt> function returns the actual local time whereas the <tt>currentTime</tt> 
	 * variable contains the time that the event being processed was received by the 
	 * correlator. The time returned by the <tt>getTime()</tt> function is accurate to the
	 * millisecond except on Windows. On Windows, it returns a time that is accurate to 
	 * within 10 or 16 milliseconds depending on the machine configuration and Windows 
	 * version it is running on. 
	 * 
	 * <i>The Windows and UNIX versions of the Time Format plug-in are not guaranteed to return 
	 * the same time all the time. This is because the underlying system libraries that the plug-in 
	 * relies on have different interpretations of what constitutes local time in certain country 
	 * locales, in particular during summer time. This discrepancy is caused by the fact that at the 
	 * epoch, January 1st 1970, Great Britain was temporarily one hour ahead of UTC. Some UNIX system 
	 * libraries, like those on Solaris, account for this, others, like that on Windows, do not.</i>
	 *
	 * @returns The local time as a float of seconds since the epoch (UTC).
	 */
	action getSystemTime() returns float 
	{
		return __plugin.getTime();	
	}
		
	/**
	 * Parses the value contained by the <tt>timeDate</tt> parameter
	 * according to the format you specify in the <tt>format</tt> parameter, 
	 * interpreting it as a date and time in the local timezone. 
	 *
	 * The function returns the resulting value as a <tt>float</tt> of 
	 * seconds since the epoch, or <tt>NaN</tt> if it cannot parse the 
	 * specified string.
	 *
	 * e.g. <tt>float secsSinceEpoc := timeMgr.parseTime("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56");</tt>
	 *
	 * @param format String that specifies the format of the value in the 
	 * <tt>timeDate</tt> parameter. For details about what you can specify here, 
	 * see "Format specification for the Time Format plug-in functions"
	 * in "Developing Apama Applications."
	 * @param timeDate String that contains the time you want to parse.
	 * @returns The resulting value of seconds since the epoch.
	 */
	action parseTime(string format, string timeDate) returns float 
	{
		return __plugin.parseTime(format, timeDate);
	}
	
	/**
	 * Parses the value contained by the <tt>timeDate</tt> parameter
	 * according to the format you specify in the <tt>format</tt> parameter, 
	 * interpreting the <tt>timeDate</tt> as a UTC date and time. 
	 * 
	 * The returned value is a <tt>float</tt> of seconds since the epoch, or 
	 * <tt>NaN</tt> if it cannot parse the specified string.
	 *
	 * e.g. <tt>float secsSinceEpoc := timeMgr.parseTimeUTC("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56");</tt>
	 *
	 * @param format String that specifies the format of the value in the 
	 * <tt>timeDate</tt> parameter. For details about what you can specify here, 
	 * see "Format specification for the Time Format plug-in functions"
	 * in "Developing Apama Applications."
	 * @param timeDate String that contains the time you want to parse.
	 * @returns The resulting value of seconds since the epoch.
	 */	
	action parseTimeUTC(string format, string timeDate) returns float 
	{
		return __plugin.parseTimeUTC(format, timeDate);
	}	
	
	/**
	 * Parses the value contained by the <tt>timeDate</tt> parameter
	 * according to the format you specify in the <tt>format</tt> parameter, 
	 * interpreting it as a date and time in the named timezone specified
	 * by the <tt>tzName</tt> parameter. 
	 *
	 * The function returns the resulting value as a <tt>float</tt> of seconds 
	 * since the epoch, or <tt>NaN</tt> if it cannot parse the specified string.
	 *
	 * e.g. <tt>float secsSinceEpoc := timeMgr.parseTimeWithTimeZone("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56", "Europe/London");</tt>
	 *
	 * @param format String that specifies the format of the value in the 
	 * <tt>timeDate</tt> parameter. For details about what you can specify here, 
	 * see "Format specification for the Time Format plug-in functions"
	 * in "Developing Apama Applications."
	 * @param timeDate String that contains the time you want to parse.
	 * @param tzName String that specifies the name of a time zone.
	 * @returns The resulting value of seconds since the epoch.
	 */
	action parseTimeWithTimeZone(string format, string timeDate, string tzName) returns float 
	{
		return __plugin.parseTimeWithTimeZone(format, timeDate, tzName);
	}	
	
	/**
	 * Returns a <tt>CompiledPattern</tt> object that can generate the time as a <tt>float</tt> 
	 * value that corresponds to the local date/time string to be parsed. 
	 *
	 * You can use the <tt>CompiledPattern</tt> object to make multiple calls using its <tt>parseTime()</tt> 
	 * function, specifying the date/time string to be parsed. Reusing a <tt>CompiledPattern</tt> object is 
	 * significantly more efficient than providing the same time pattern (<tt>format</tt>) in multiple calls to 
	 * the parse functions defined on the <tt>TimeFormat</tt> event object.
	 * 
	 * Example:
	 *
	 * The following example shows how you can use the <tt>CompiledPattern</tt> object 
	 * returned by the <tt>compilePattern()</tt> function to make multiple calls using its 
	 * <tt>parseTime()</tt> function:
	 *
	 * <tt>TimeFormat timeFormat := new TimeFormat;</tt><br />
	 * <tt>CompiledPattern timePattern := timeFormat.compilePattern(pattern);</tt><br />
	 * <tt>t1:=timePattern.parseTime(time1);</tt><br />
	 * <tt>t2:=timePattern.parseTime(time2);</tt><br />
	 * <tt>t3:=timePattern.parseTime(time3);</tt>
	 *
	 * When you call the <tt>compilePattern()</tt> function and then the <tt>CompiledPattern</tt> object's
	 * <tt>parseTime()</tt> function, the result is the same as calling one of the parse functions defined on the 
	 * <tt>TimeFormat</tt> object itself. The advantage of calling the <tt>compilePattern()</tt> function
	 * and then the <tt>CompiledPattern</tt> object's <tt>parseTime()</tt> function is that it is faster. 
	 * For example:
	 * 
	 * <tt>timeFormat.parse("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56")</tt>
	 *
	 * If you use this pattern many times, it is faster to call <tt>compilePattern()</tt>, as follows:
	 *
	 * <tt>CompiledPattern timePattern := timeFormat.compilePattern("yyyy.MM.dd G 'at' HH:mm:ss");</tt><br />
	 * <tt>timePattern.parseTime(c,"1996.07.10 AD at 15:08:56");</tt>
	 *
	 * @param format String that specifies a set of instructions for parsing a time/date 
	 * object.
	 * @returns A CompiledPattern object that can generate the time as a <tt>float</tt> value
   * that corresponds to the local date/time string to be parsed.
	 */
	action compilePattern(string format) returns CompiledPattern {
		return CompiledPattern(__plugin.compilePattern(format));
	}
	
	/**
	 * Returns a <tt>CompiledPattern</tt> object that can generate the time as a <tt>float</tt> 
	 * value that corresponds to the UTC date/time string to be parsed. 
	 *
	 * You can use the <tt>CompiledPattern</tt> object to make multiple calls using its <tt>parseTime()</tt> 
	 * function, specifying the date/time string to be parsed. Reusing a <tt>CompiledPattern</tt> object is 
	 * significantly more efficient than providing the same time pattern (<tt>format</tt>) in multiple calls to 
	 * the parse functions defined on the <tt>TimeFormat</tt> event object.
	 * 
	 * Example:
	 *
	 * The following example shows how you can use the <tt>CompiledPattern</tt> object  
	 * returned by the <tt>compilePatternUTC()</tt> function to make multiple calls using its 
	 * <tt>parseTime()</tt> function:
	 *
	 * <tt>TimeFormat timeFormat := new TimeFormat;</tt><br />
	 * <tt>CompiledPattern timePattern := timeFormat.compilePatternUTC(pattern);</tt><br />
	 * <tt>t1:=timePattern.parseTime(time1);</tt><br />
	 * <tt>t2:=timePattern.parseTime(time2);</tt><br />
	 * <tt>t3:=timePattern.parseTime(time3);</tt>
	 *
	 * When you call the <tt>compilePatternUTC()</tt> function and then the <tt>CompiledPattern</tt> object's
	 * <tt>parseTime()</tt> function, the result is the same as calling one of the parse functions defined on the 
	 * <tt>TimeFormat</tt> object itself. The advantage of calling the <tt>compilePatternUTC()</tt> function
	 * and then the <tt>CompiledPattern</tt> object's <tt>parseTime()</tt> function is that it is faster. 
	 * For example:
	 * 
	 * <tt>timeFormat.parse("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56")</tt>
	 *
	 * If you use this pattern many times, it is faster to call <tt>compilePatternUTC()</tt>, as follows:
	 *
	 * <tt>CompiledPattern timePattern := timeFormat.compilePatternUTC("yyyy.MM.dd G 'at' HH:mm:ss");</tt><br />
	 * <tt>timePattern.parseTime(c,"1996.07.10 AD at 15:08:56");</tt>
	 *
	 * @param format String that specifies a set of instructions for parsing a time/date 
	 * object.
	 * @returns A CompiledPattern object that can generate the time as a <tt>float</tt> value
   * that corresponds to the UTC date/time string to be parsed.
	 */
	action compilePatternUTC(string format) returns CompiledPattern
	{
		return CompiledPattern(__plugin.compilePatternUTC(format));
	}
	 
	/**
	 * Returns a <tt>CompiledPattern</tt> object that can generate the time as a <tt>float</tt> 
	 * value that corresponds to the date/time string to be parsed, in the specified timezone. 
	 *
	 * You can then use the <tt>CompiledPattern</tt> object to make multiple calls using its <tt>parseTime()</tt> 
	 * function, specifying the date/time string to be parsed. Reusing a <tt>CompiledPattern</tt> object is 
	 * significantly more efficient than providing the same time pattern (<tt>format</tt>) in multiple calls to 
	 * the parse functions defined on the <tt>TimeFormat</tt> event object.
	 * 
	 * Example:
	 *
	 * The following example shows how you can use the <tt>CompiledPattern</tt> object 
	 * returned by the <tt>compilePatternWithTimeZone()</tt> function to make multiple calls 
	 * using its <tt>parseTime()</tt> function:
	 *
	 * <tt>TimeFormat timeFormat := new TimeFormat;</tt><br />
	 * <tt>CompiledPattern timePattern := timeFormat.compilePatternWithTimeZone(pattern, tzone);</tt><br />
	 * <tt>t1:=timePattern.parseTime(time1);</tt><br />
	 * <tt>t2:=timePattern.parseTime(time2);</tt><br />
	 * <tt>t3:=timePattern.parseTime(time3);</tt>
	 *
	 * When you call the <tt>compilePatternWithTimeZone()</tt> function and then the <tt>CompiledPattern</tt> object's 
	 * <tt>parseTime()</tt> function, the result is the same as calling one of the parse functions defined on the 
	 * <tt>TimeFormat</tt> object itself. The advantage of calling the <tt>compilePatternWithTimeZone()</tt> function
	 * and then the <tt>CompiledPattern</tt> object's <tt>parseTime()</tt> function is that it is faster. 
	 * For example:
	 * 
	 * <tt>timeFormat.parse("yyyy.MM.dd G 'at' HH:mm:ss", "1996.07.10 AD at 15:08:56")</tt>
	 *
	 * If you use this pattern many times, it is faster to call <tt>compilePatternWithTimeZone()</tt>, as follows:
	 *
	 * <tt>CompiledPattern timePattern := timeFormat.compilePatternWithTimeZone("yyyy.MM.dd G 'at' HH:mm:ss", "Europe/London");</tt><br />
	 * <tt>timePattern.parseTime(c,"1996.07.10 AD at 15:08:56");</tt>
	 *
	 * @param format String that specifies a set of instructions for parsing a time/date 
	 * object.
	 * @param name String that specifies the name of a time zone.
	 * @returns A CompiledPattern object that can generate the time as a <tt>float</tt> value
   * that corresponds to the date/time string to be parsed, in the specified timezone.
	 */
	action compilePatternWithTimeZone(string format, string name) returns CompiledPattern
	{
		return CompiledPattern(__plugin.compilePatternWithTimeZone(format, name));
	}
	
	/**
	 * Returns a floating point (<tt>float</tt>) timestamp that represents the 
	 * number of seconds since an unspecified epoch (a zero point).
	 *
	 * The timestamp is accurate to one microsecond or better. The return value has no 
	 * necessary relationship to wall time or correlator time and should be used only 
	 * to compare similar timestamps. 
	 *
	 * Because the epoch is unspecified, you should use these timestamps in calculations 
	 * only with other timestamps generated by the <tt>getMicroTime()</tt> function or 
	 * with equivalent high-resolution timestamps generated by an Apama adapter.
	 * 
	 * For example, you might want to use high-resolution timestamps for calculating 
	 * event processing latency in an Apama application. You can compare the timestamps 
	 * across processes on the same machine. The timestamps are not comparable between 
	 * different machines.
	 * 
	 * @returns A floating point (<tt>float</tt>) timestamp that represents the 
	 * number of seconds since an unspecified epoch (a zero point). 
	 */
	action getMicroTime() returns float 
	{
		return __plugin.getMicroTime();
	}
	
	// Private
	
	/** @private*/ import "TimeFormatPlugin" as __plugin;
} 00000031 C:\SoftwareAG\Apama\monitors\TimeFormatEvents.mon
MONF 0000a34a //
// MemoryStore.mon
//
// Provide shared and (optionally) persistent storage to MonitorScripts
//
// $Copyright(c) 2009,2012-2013 Progress Software Corporation (PSC). All rights reserved.\$
// $Copyright (c) 2013-2015 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.\$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG

package com.apama.memorystore;

/** Sent to the application when an asynchronous activity has finished. 
*/
event Finished {
	/** A unique identifier for the operation that has completed, 
		which will have been returned by the action that initiated the 
		operation. */
	integer id;
	/** True if the operation succeeded. */
	boolean success;
	/** An optional status or error message providing more detail 
		about why the operation succeeded or failed. */
	string status;
}

/** Represents the schema for a table in the store, specifying the field 
	names, types, and other behavioural information about the table. 

	The fields and types sequences must be the same length as one another, 
	specifying the names of fields and their corresponding types.
	
	Never construct a Schema using a "Schema(...)" expression. 
	Instead, always create a variable initialized to "new Schema", and then set 
	parameters individually with separate statements. This ensures that your 
	code will continue to work without modification if a subsequent version 
	of the MemoryStore adds more parameters to the Schema event.
	
	@see Store#prepare() The schema for a table is specified when it is 
		prepared. 
*/
event Schema {
	/** A sequence specifying the name of each field in this table. 

		For looking up the index of a specific field name (e.g. while 
		processing RowChanged events), use Table.getFieldIndex() which is 
		more efficient than using indexOf() on the fields sequence.
		
		@see Table#getFieldIndex() for efficiently obtaining the index of 
		a field.
	**/
	wildcard sequence<string> fields;
	
	/** A sequence specifying the type of each field in this table. 
	
		Permitted types are currently: 'integer', 'boolean', 'float' and 
		'string'. 
		
		This sequence must have the same length as the fields sequence. 
	*/
	wildcard sequence<string> types;
	
	/** When this field is true, the MemoryStore makes the rows in the 
		in-memory table associated with this schema available to the 
		scenario service, so they can be used by external clients and 
		dashboards. 
		
		That is, the MemoryStore creates DataViews that contain the state of 
		this table that has been committed (but not necessarily persisted) to 
		the shared in-memory representation of the table.
		
		Committing changes to the in-memory row in a table that is exposing 
		its in-memory state causes events to be sent to the main context. 
	 */
	boolean exposeMemoryView;
	/** When this field is true, the MemoryStore makes the rows in the 
		on-disk table associated with this schema available to the 
		scenario service, so they can be used by external clients and 
		dashboards.  
		
		That is, the MemoryStore creates DataViews that contain data from this 
		table that has been persisted to disk. 
		
		You cannot expose a persistent view of a table in a 
		correlator-persistent store.
 	*/
	boolean exposePersistentView;
	
	/** Specifies the display name for an in-memory table. */
	string memoryViewDisplayName;
	/** Describes an in-memory table. */
	string memoryViewDescription;
	/** Specifies the display name for an on-disk table. */
	string persistentViewDisplayName;
	/** Describes an on-disk table. */
	string persistentViewDescription;
}

/** Represents an ordered and typed set of named fields in a table, with a 
	key that uniquely identifies the row within the table. 

	A Row is an atomic snapshot of the data in the
	table and once returned, a Row's contents are guaranteed to be consistent 
	and unchanging.

	Any changes the user makes to a Row are local until commit is called.
	
	@see Table A table holds a collection of rows. 
*/
event Row {
	/** @private*/ import "MemoryStorePlugin" as plugin;
	/** @private*/ wildcard chunk c;

	/** Update the local Row event to reflect the current state of the shared
		MemoryStore table, losing any local modifications.
	
		row.update() has a very similar effect to r := t.get(r.getKey()),
		but is more efficient and doesn't require access to the table.
	*/
	action update() {
		plugin.RowChunk_update(c);
	}

	/** Copy the contents of the specified other Row into this one.
	
		The two rows that these Row events represent must have the same schema 
		but they need not be in the same table.

		r1.copy(r2) is a more efficient equivalent to
		r1.setX("a", r2.getX("a")) for every field. 
		
		You cannot copy a row between a correlator-persistent store and an 
		in-memory, on-disk or distributed store.
	*/
	action copy(Row other) {
		plugin.RowChunk_copy(c, other.c);
	}

	/** Mark the row for deletion when the table is committed.
	
		Fields cannot be accessed after this call, until the removal is
		successfully committed (or reverted using update).
	*/
	action remove() {
		plugin.RowChunk_remove(c);
	}
	
	/** Try to commit changes from this Row back to the table, returning false 
		if the Row is not up to date.
	
		If nothing else has modified the row in the table since this
		Row was created, the changes are committed so other users can
		see them and true is returned.
	
		Otherwise, false is returned and the table is left unchanged. 
		Do not repeatedly call tryCommit() without also calling update(), 
		or use the more efficient Row.tryCommitOrUpdate(). 
		
		Note that a MemoryStore commit operation synchronously writes changes 
		made to the local Row instance back to the table which is shared by all 
		monitors inside the Correlator (or the distributed store), but does not 
		cause a persistent write to disk (see Table#persist). 

		@return true if the table was modified; false if an error occurred and 
		the table was not changed. 
		
		@see Row#tryCommitOrUpdate()
	*/
	action tryCommit() returns boolean {
		return plugin.RowChunk_tryCommit(c,currentTime);
	}


	/** Try to commit changes from this Row back to the table, which could 
		result in an exception being thrown if the Row is not up to date.
	
		If nothing else has modified the row in the table since this
		Row was created, the changes are committed so other users can
		see them.
	
		Otherwise, the monitor instance terminates with an error and the table 
		is left unchanged.
		
		If there is any chance that the same row may be written to 
		concurrently - for example by multiple correlator contexts, and/or if 
		using a distributed MemoryStore - use Row.tryCommit() instead of 
		Row.commit() so that it is possible to recover from this situation 
		when it occurs. 

		Note that a MemoryStore commit operation synchronously writes changes 
		made to the local Row instance back to the table which is shared by all 
		monitors inside the Correlator (or the distributed store), but does not 
		cause a persistent write to disk (see Table#persist). 

		@see Row#tryCommit()
		@see Row#tryCommitOrUpdate()
	*/
	action commit() {
		plugin.RowChunk_commit(c,currentTime);
	}

	/** Try to commit, or update if not. 
	
		This is a more efficient equivalent to calling tryCommit then
		calling update if returning false.
	
		Note that a MemoryStore commit operation synchronously writes changes 
		made to the local Row instance back to the table which is shared by all 
		monitors inside the Correlator (or the distributed store), but does not 
		cause a persistent write to disk (see Table#persist). 
		
		@return true if the commit succeeded, false if the commit failed but 
		the row has been updated ready for a retry attempt. 
		
	*/
	action tryCommitOrUpdate() returns boolean {
		return plugin.RowChunk_tryCommitOrUpdate(c,currentTime);
	}

	/** Get the key for this Row. 
	
		It cannot be changed.
	*/
	action getKey() returns string {
		return plugin.RowChunk_getKey(c);
	}

	/** Indicate whether this row was in the table when the Row
		was created or updated. 
		
		It is possible to construct a Row that has no corresponding entry in 
		the table, in which case all fields have default values. 
		
		Calling commit on a Row for which inTable()=false will create the row.
	*/
	action inTable() returns boolean {
		return plugin.RowChunk_inTable(c);
	}

	// Get the value
	//
	// The correct variant must be called for the type of the column
	// in the table.

	/** Get the value of the specified field in this row 
		(must only be used on boolean fields). 
	*/
	action getBoolean(string name) returns boolean {
		return plugin.RowChunk_getBoolean(c,name);
	}

	/** Get the value of the specified field in this row 
		(must only be used on integer fields). 
	*/
	action getInteger(string name) returns integer {
		return plugin.RowChunk_getInteger(c,name);
	}

	/** Get the value of the specified field in this row 
		(must only be used on float fields). 
	*/
	action getFloat(string name) returns float {
		return plugin.RowChunk_getFloat(c,name);
	}

	/** Get the value of the specified field in this row 
		(must only be used on string fields). 
	*/
	action getString(string name) returns string {
		return plugin.RowChunk_getString(c,name);
	}

	// Set the value
	//
	// The correct variant must be called for the type of the column
	// in the table.

	/** Set the value of the specified field in this row 
		(must only be used on boolean fields). 
	*/
	action setBoolean(string name, boolean b) {
		plugin.RowChunk_setBoolean(c,name,b);
	}

	/** Set the value of the specified field in this row 
		(must only be used on integer fields). 
	*/
	action setInteger(string name, integer i) {
		plugin.RowChunk_setInteger(c,name,i);
	}

	/** Set the value of the specified field in this row 
		(must only be used on float fields). 
	*/
	action setFloat(string name, float f) {
		plugin.RowChunk_setFloat(c,name,f);
	}

	/** Set the value of the specified field in this row 
		(must only be used on string fields). 
	*/
	action setString(string name, string s) {
		plugin.RowChunk_setString(c,name,s);
	}

	/** Get the name of the Table that contains this Row. */
	action getTableName() returns string {
		return plugin.RowChunk_getTableName(c);
	}

	/** Get the name of the Store that contains this Row's Table. */
	action getStoreName() returns string {
		return plugin.RowChunk_getStoreName(c);
	}
}


/**
 * Sent to the application on every successful row commit in tables
 * the application has subscribed to.
 *
 * Supported in distributed stores only.
 *
 * Events are sent for every change, whether from the local or a
 * remote node, for tables where the subscribe method has been called.
 *
 * The old and new values are provided as sequences.  Access to previous 
 * and new values are thus available (though note the setting of
 * rowChangedOldValueRequired); for example:
 <pre>
<br/>	integer positionRowId := tbl.getFieldIndex("position");
<br/>	RowChanged rowChanged;
<br/>	on all RowChanged(storeName = STORE, 
<br/>	                  tableName = TABLE):rowChanged {
<br/>		// we handle things simply by treating an update as a remove followed by an insert:
<br/>		if (rowChanged.changeType = RowChanged.REMOVE or
<br/>		    rowChanged.changeType = RowChanged.UPDATE) then {
<br/>			position := position - float.parse(rowChanged.oldFieldValues[positionRowId]);
<br/>		}
<br/>		if rowChanged.changeType = RowChanged.INSERT or
<br/>		   rowChanged.changeType = RowChanged.UPDATE then {
<br/>			position := position + float.parse(rowChanged.newFieldValues[positionRowId]);
<br/>		}
<br/>		log "Position is now "+position.toString();
<br/>	}
 </pre>
 * @see Table#subscribeRowChanged() for subscribing to RowChanged events
 */
event RowChanged {
	/** Value for changeType when a row is added to a table. */
	constant integer INSERT := 1;

	/** Value for changeType when a row is removed from a table. */
	constant integer REMOVE := 2;

	/** Value for changeType when a row is modified in a table. */
	constant integer UPDATE := 3;

	/**
	 * One of INSERT, REMOVE, UPDATE for
	 * rows being added, removed, updated.
	 */
	integer changeType;

	/**
	 * Name of the store that the table is in.
	 */
	string storeName;

	/**
	 * Name of the table that the row is in.
	 */
	string tableName;

	/**
	 * The key value for the changed row.
	 */
	string key;

	/**
	 * Old values of the row, if available.
	 *
 	 * The old values of the row, in toString() format, in the
	 * order defined by the table's Schema.  For UPDATE
	 * changeTypes, this is only populated if the storeFactory
	 * bean property rowChangedOldValueRequired is true (the
	 * default value is provider-specific).
	 *
	 * For INSERT (or UPDATE if rowChangedOldValueRequired is
	 * false), this will be an empty sequence, otherwise it will
	 * have as many entries as there are fields in the schema.
	 *
	 * The field values can be recovered by using the parse method
	 * on the field's type
	 * (e.g. <tt>integer.parse(rc.oldFieldValues[i])</tt>),except
	 * for strings which are inserted without any escaping, so do
	 * not need to be parsed. 
	 *
	 * Use Table.getFieldIndex() to efficiently map a field name
	 * to an index in this sequence (although consider caching the
	 * index in a variable to avoid unnecessary lookups).
	 *
	 * @see Table#getFieldIndex() for mapping from field name to
	 * index.
	 */
	sequence<string> oldFieldValues;

	/**
	 * New values of the row.
	 *
 	 * The new values of the row, in toString() format, in the order defined 
	 * by the table's Schema.
	 *
	 * For REMOVE, this will be an empty sequence, otherwise it 
	 * will have as many entries as there are fields in the schema.
	 *
	 * The field values can be recovered by using the parse method
	 * on the field's type (e.g. <tt>integer.parse(rc.newFieldValues[i])</tt>), 
	 * except for strings which are inserted without any escaping, so do not 
	 * need to be parsed. 
	 *
	 * Use Table.getFieldIndex() to efficiently map a field name to an index 
	 * in this sequence (although consider caching the index in a 
	 * variable to avoid unnecessary lookups).
	 *
	 * @see Table#getFieldIndex() for mapping from field name to index. 
	 */
	sequence<string> newFieldValues;
	
	/** 
	 * Get a display string representing this event's change type. 
	 *
	 * @return "INSERT", "REMOVE" or "UPDATE". 
	 */
	action getChangeTypeString() returns string {
		if changeType = INSERT then {
			return "INSERT";
		} else if changeType = REMOVE then {
			return "REMOVE";
		} else if changeType = UPDATE then {
			return "UPDATE";
		} else {
			return "UNKNOWN:"+changeType.toString();
		}
	}
}

/** Represents an iterator that can be used to step through each 
	Row of a Table in turn, making changes or reading data from the row. 
	
	@see Table#begin() Gets an iterator, beginning from the start of the table.
*/
event Iterator {
	/** @private*/ import "MemoryStorePlugin" as plugin;
	/** @private*/ wildcard chunk c;

	/** Checks whether this Iterator has now reached the end of
		the Table. 
	
		You should check done() is not true before you call other Iterator 
		actions (except for appendKeys() and getKeys()).
	*/
	action done() returns boolean {
		return plugin.IteratorChunk_done(c);
	}

	/** Step this Iterator to the next row in the table.
	
		If there are no more rows the Iterator becomes done. 
		
		To avoid an error that will terminate the monitor instance, always 
		use done() to check that the iterator has not reached the end of the 
		table before calling this action. 		
	*/
	action step() {
		plugin.IteratorChunk_step(c);
	}
	
	/** Get the key for the row this Iterator is pointing at.
	
		To avoid an error that will terminate the monitor instance, always 
		use done() to check that the iterator has not reached the end of the 
		table before calling this action. 
	*/
	action getKey() returns string {
		return plugin.IteratorChunk_getKey(c);
	}

	/** Get the Row this Iterator is pointing at.
	
		It is possible that the row the iterator is pointing at is no longer 
		present. This can happen if another monitor deleted the row or table, 
		or cleared the table while the iterator was pointing at that row.

		If the requested row is no longer there, you receive a Row event that 
		represents a row in which all fields have default values and for which 
		Row.inTable() is false. This is the same result as if you call 
		Table.get() on a key that does not exist yet.
	
		To avoid an error that will terminate the monitor instance, always 
		use done() to check that the iterator has not reached the end of the 
		table before calling this action. 
	*/
	action getRow() returns Row {
		return Row(plugin.IteratorChunk_getRow(c));
	}

	/** Append to the specified sequence, keys for up to n consecutive
		rows of the Table, beginning where this Iterator is pointing.
	
		The iterator will be advanced. If it becomes
		done then fewer than n keys will be appended.
		
		@param seq The sequence which is to be updated with the keys from the 
		following n table rows. 
		@param n The number of keys to get and append to the sequence. 
	*/
	action appendKeys(sequence<string> seq, integer n) {
		integer start := seq.size();
		seq.setSize(start+n);
		seq.setSize(plugin.IteratorChunk_appendKeysImpl(c, seq, start));
	}

	/** Get the keys for up to n consecutive rows of the Table beginning
		where this Iterator is pointing.
	
		The iterator will be advanced. If it becomes
		done, a sequence of fewer than n keys will be returned.

		The first key in the returned sequence is the key of the row that the 
		iterator is pointing at when the action is called. When this action is 
		finished, the iterator is pointing at the row immediately beyond that 
		of the last key that was returned. 
		
		@param n The number of keys to get and append to the sequence. 
	*/
	action getKeys(integer n) returns sequence<string> {
		sequence<string> result := new sequence<string>;
		appendKeys(result, n);
		return result;
	}
}

/** Represents a collection of rows in a store, with a defined schema.
	
	A table consists of a series of rows, each identified by a key and
	containing other values with names and types according to the
	table's Schema.
	
	A table typically resides in memory, you can also store it on 
	disk if you want to, or a table can be stored on a distributed cache.
	
	@see Store#open() Tables exist within a named Store, which is used to 
		create and open tables. 
*/
event Table {
	/** @private*/ import "MemoryStorePlugin" as plugin;
	/** @private*/ wildcard chunk c;


	/** Add the table Row with the specified key.
	
		On distributed stores, for performance reasons this action doesn't
		check if there is a Row already present in the the table with the
		specified key. To check if the Row is present in the store, use the
		Table.get() action.
		
		@param key The name/key uniquely identifying the row. 
		@return An empty Row event.
	*/
	action add(string key) returns Row {
		return Row(plugin.TableChunk_add(c, key));
	}

	/** Get the table Row with the specified key. 
	
		If there is no row with the specified key, this action returns 
		without error, with a Row event that contains default values for the 
		fields in the row. A call to the Row.inTable() action returns false.
		
		@param key The name/key uniquely identifying the row. 
		@return A Row event representing an atomic snapshot of the committed 
			data in the table when the action was called. 		
	*/
	action get(string key) returns Row {
		return Row(plugin.TableChunk_get(c,key));
	}
	
	/** Remove the specified row from the table. 
	
		If the row does not exist, this action does nothing.

		@param key The name/key uniquely identifying the row. 
	*/
	action remove(string key) {
		plugin.TableChunk_remove(c,key);
	}

	/** Change the row with the specified key by applying an action to it.
	
		It is possible for another context to commit changes to this row 
		between the time mutate() obtains a Row event to represent the row and 
		the time mutate() tries to commit the changes that result from 
		executing the specified action. In this situation, the MemoryStore 
		automatically calls the specified action again on the most recently 
		committed row content; therefore mutation actions must be designed to 
		cope with being called repeatedly without causing unwanted side 
		effects.
	
		@param name The name/key uniquely identifying the row. 
		@param a An action that (idempotently) performs the desired change to 
			the row. 
	*/
	action mutate(string key, action<Row> a) {
		Row row := get(key);
		boolean done := false;
		while not done { a(row); done := row.tryCommitOrUpdate(); }
	}

	/** Mutate all rows in the Table by applying the specified action.
	
		This can temporarily consume a lot of memory when called on a 
		relatively large table because the Correlator does no garbage 
		collection until action execution is complete. A few thousand rows are 
		unlikely to present a problem. Beyond that, it depends on how many 
		fields are in each row, how many rows are in the table, and how much 
		RAM is available.

		@param a An action that performs the desired change to 
			each row in the table. 
	*/
	action mutateAll(action<Row> a) {
		Iterator i := begin();
		while not i.done() {
			Row row := i.getRow();
			boolean done := false;
			while row.inTable() and not done {
				a(row); done := row.tryCommitOrUpdate();
			}
			i.step();
		}
	}

	/** Remove all rows from the table. */
	action clear() {
		plugin.TableChunk_clear(c);
	}

	/** Indicate whether or not a row with the specified key is present
		in the table.
	
		t.hasKey("foo") is a more efficient alternative to
		t.get("foo").inTable()
		
		@param key The name/key uniquely identifying the row. 
	*/
	action hasKey(string key) returns boolean {
		return plugin.TableChunk_hasKey(c,key);
	}

	/** Return an iterator to the beginning of the Table.
	*/
	action begin() returns Iterator {
		return Iterator(plugin.TableChunk_begin(c));
	}

	/** Returns a sequence that contains the keys for all the rows in this 
		table. 
		
		The keys are in an arbitrary order.
 	*/
	action getKeys() returns sequence<string> {
		Iterator i := begin();
		sequence<string> result := i.getKeys(plugin.TableChunk_size(c));
		// Clean up any residue if a race means we didn't get everything
		while not i.done() { i.appendKeys(result, 16); }
		return result;
	}

	/** Persist this table's committed changes back to stable storage, asynchronously.
	
		Note that any local changes to a Row that were not committed will not 
		be written to disk (see Row#commit()). 

		Only on-disk persistent stores can be persisted using this action. 
		It is not possible to call this method on Correlator-persistent tables 
		since all changes committed to such tables will be written to disk 
		automatically in the same transaction as changes to the state of 
		persistent EPL monitors. 
		
		@return The unique identifier for this operation, which will be 
			included in the Finished event sent after the operation is 
			complete. 
		@see Finished A Finished event will be sent when this asynchronous 
			operation has completed. 
	*/
	action persist() returns integer {
		return plugin.TableChunk_persist(c,currentTime);
	}

	/** Enqueue an event for each row in the table, taken by parsing the string 
		data in the specified table field/column as an event string.
		
		The field must be of string type, and its value for every row should be 
		an Apama event string, in the same form that you would send to the 
		Correlator (e.g. "mypackage.MyEvent(123, [false,true])")

	
		This action is most likely to be useful when you are migrating from the 
		StateStore Correlator plug-in to the MemoryStore. In the StateStore 
		plug-in, persistent data re-entered the Correlator as sent events.
		
		This is only supported for non-distributed stores.
	
		@param fieldName The name of the table field whose values are event 
			strings that should be sent. 
		@return The unique identifier for this operation, which will be 
			included in the Finished event sent after the column data for 
			the last row has been sent. 
		@see Finished A Finished event will be sent when this asynchronous 
			operation has completed. 
	*/
	action enqueueColumn(string fieldName) returns integer {
		return plugin.TableChunk_enqueueColumn(c, fieldName);
	}

	/** Get the name of this Table. */
	action getTableName() returns string {
		return plugin.TableChunk_getTableName(c);
	}

	/** Get the name of the Store that contains this table. */
	action getStoreName() returns string {
		return plugin.TableChunk_getStoreName(c);
	}

	/**
	 * Subscribe to be notified of all successful commits in
	 * this table.
	 *
 	 * This is only supported for tables in a distributed store, 
	 * and only if the underlying provider supports this feature. 
	 *
	 * The monitor instance will be terminated with an error if this 
	 * action is called on a store that does not support it. 
	 *
	 * It is important to note that (due to the nature of distributed store 
	 * technology) there is no way to atomically subscribe to notifications 
	 * and get an initial snapshot of the table's contents, so 
	 * applications that perform an initial iteration over the table's contents 
	 * to initialize some state before subscribing are at risk of 
	 * double-counting any keys that are mutated after the subscription 
	 * and during the iteration/initialization process. 
	 *
	 * For tables that are relatively small (and fit entirely inside the 
	 * memory of a single Correlator), a common pattern for addressing the need 
	 * for a table snapshot to initialize state before subscribing is to 
	 * maintain a per-key dictionary of last-seen values, updated by both the 
	 * initial iteration and the RowChanged notification events; any RowChanged 
	 * event whose old value does not match the last-seen dictionary must be 
	 * ignored, to avoid double-counting changes. To save memory, entries from 
	 * the last-seen dictionary can be removed after the first RowChanged event 
	 * for that key. 
	 *
	 * @return A unique subscriptionId that can be passed to any instance of 
	 * this Table to unsubscribe.
	 * @see RowChanged The event sent whenever a row is modified.
	 * @see Table#unsubscribe() Unsubscribe using this action. 
	 */
	action subscribeRowChanged() returns integer 
	{
		integer subscriptionId := integer.getUnique(); 
		plugin.TableChunk_subscribeRowChanged(c, subscriptionId);
		return subscriptionId;
	}
	
	/**
	 * Cancel a previous subscription.
	 *
	 * This is only supported for tables in a distributed store.
	 *
	 * If other monitors in this context have also subscribed,
	 * events will still be delivered until they have all unsubscribed.
	 * subscriptionId must be a value returned from a subscribeRowChanged() on 
	 * this table.
	 *
	 * @param subscriptionId Identifier for the subscription to remove, 
	 * returned by subscribeRowChanged().
	 */
	action unsubscribe(integer subscriptionId) 
	{ 
		plugin.TableChunk_unsubscribe(c, subscriptionId);
	}

	/**
	 * Return the index of a field.
	 *
	 * Returns what position in the Schema the specified field
	 * appears at. If a name that is not in Schema fieldName
	 * is passed in, the monitor instance will be terminated with an error.
	 *
	 * Using this action is more efficient that getting the same information 
	 * by using indexOf on the Schema.fields sequence. 
	 *
	 * @param fieldName A field name that exists in this table's Schema. 
	 */
	action getFieldIndex(string fieldName) returns integer 
	{ 
		return plugin.TableChunk_getFieldIndex(c, fieldName);
	}
}

/** Represents a store, which is a container for a uniquely named collection of 
	tables. 
	
	@see Storage Provides actions to prepare and open a Store. 
	@see Table Represents the tables in a Store. 
*/
event Store {
	/** @private*/ import "MemoryStorePlugin" as plugin;
	/** @private*/ wildcard chunk c;
	

	/** Prepare a table so that subsequent open calls for it will succeed.
	
		If the table already exists, the Schema provided to the prepare
		function must completely match the existing schema. If it does 
		not already exist, the Schema will be used to create the table.
	
		The function returns an id; once preparation is complete a
		Finished event with that id will be sent.
		
		This call is idempotent - if the table was already successfully 
		prepared, it will return success immediately.
		
		@param name A unique name that will be used to identify the new table. 
		@param schema The schema identifying the fields of the new table. 
		@return The unique identifier for this operation, which will be 
			included in the Finished event sent after the operation is 
			complete. 
		@see Finished A Finished event will be sent when this asynchronous 
			operation has completed. 
	*/
	action prepare(string name, Schema schema) returns integer {
		return plugin.StoreChunk_prepare3(c, name, schema.fields.toString() + " " + schema.types.toString(), schema.fields, schema.types, schema.exposeMemoryView, schema.exposePersistentView, schema.memoryViewDisplayName, schema.memoryViewDescription, schema.persistentViewDisplayName, schema.persistentViewDescription, currentTime);
	}

	/** Indicate whether or not a Table with the specified name is
		present in the Store.
	
		@param name The unique table name to check for. 
		@return True if it is safe to call open() on the specified table; false 
			if preparation failed or is still in progress. 
	*/
	action hasTable(string name) returns boolean {
		return plugin.StoreChunk_hasTable(c, name);
	}

	/** Open the specified table, once it has been prepared.
	
		It is an error to call this before a prepare call for the table
		has finished without error.
		
		@param name The name of the table to be opened, which must be the same 
			as the name used when the table was first prepared. 
		@see #prepare() This action must not be called until prepare has 
			completed successfully. 
	*/
	action open(string name) returns Table {
		return Table(plugin.StoreChunk_open(c,name));
	}

	/** Persist committed changes back to stable storage, asynchronously.
	
		Only on-disk persistent stores can be persisted using this action. 
		It is not possible to call this method on Correlator-persistent tables 
		since all changes committed to such tables will be 
		written to disk automatically in the same transaction as changes to 
		the state of persistent EPL monitors. 
		
		@return The unique identifier for this operation, which will be 
			included in the Finished event sent after the operation is 
			complete. 
		@see Finished A Finished event will be sent when this asynchronous 
			operation has completed. 
	*/
	action persist() returns integer {
		return plugin.StoreChunk_persist(c,currentTime);
	}

	/** Create a backup of the Store.
	
		The backup is created in the specified file, which is
		overwritten if it already exists.
	
		Only persistent (on-disk) stores can be backed up. 
		
		@return The unique identifier for this operation, which will be 
			included in the Finished event sent after the operation is 
			complete. 
		@see Finished A Finished event will be sent when this asynchronous 
			operation has completed. 
	*/
	action backup(string filename) returns integer {
		return plugin.StoreChunk_backup(c, filename);
	}

	/** Get the name of this Store. */
	action getStoreName() returns string {
		return plugin.StoreChunk_getStoreName(c);
	}
}

/** MemoryStore factory interface for creating Store event objects. 

	There are several different types of Store supported by MemoryStore:
	<ul>
	<li>In-memory only (no persistence)</li>
	<li>Persistent (using a specified database file on disk; 
		committed changes go to disk when the persist() action is called)</li>
	<li>Correlator-persistent (using the Correlator's integrated data store; 
		committed changes go to disk periodically when the Correlator takes a 
		snapshot of persistent monitor state and persists the results). </li>
	<li>Distributed (Using a distributed cache technology to share and access
		data across multiple distributed nodes). </li>
	</ul>
	Correlator-persistent stores are only available if Correlator persistence 
	has been enabled. Non-persistent monitors may use any type of store, but 
	a monitor marked as 'persistent' may ONLY access Correlator-persistent 
	stores.

	To use the MemoryStore, create a monitor field (or variable) to hold the 
	Storage factory event, and use one of the prepare* actions to 
	asynchronously get a Store of the desired type ready for use, and give it 
	a unique name. Once the store has been prepared, use the open(name) action 
	to get a Store event that can be used to interact with the store. 
	
	e.g.<pre>
	<br/>using com.apama.memorystore.Storage; 
	<br/>using com.apama.memorystore.Store; 
	<br/>using com.apama.memorystore.Finished; 
	<br/>
	<br/>monitor Test { 
	<br/>	Storage storage; 
	<br/>	Store store; 
	<br/>
	<br/>	action onload() { 
	<br/>		integer id := storage.prepareOrCreate("storename", "/tmp/example.dat"); 
	<br/>		Finished f; 
	<br/>		on Finished(id=id):f
	<br/>		{
	<br/>			if not f.success then { log "Store creation failed: "+f.status at ERROR; die; } 
	<br/>			store := storage.open("storename");
	<br/>			...
	<br/>		}
	<br/>	} 
	<br/>}
	</pre>

	@see Store The purpose of the Storage event is to prepare and open stores. 
	@see #prepareOrCreate() The most commonly used action for preparing a 
		persistent Store. 
	@see #open() Once a store has been prepared it can be opened. 
*/
event Storage {
	/** @private*/ import "MemoryStorePlugin" as plugin;

	/** Prepare an in-memory read-write Store 
		to be opened and used by the application.
	
		@param name A unique name identifying this Store. 
		@return The unique identifier for this operation, which will be 
			included in the Finished event sent after the operation is 
			complete and it becomes safe to call open() on this store. 
		@see Finished A Finished event will be sent when this asynchronous 
			operation has completed. 
	*/
	action prepareInMemory(string name) returns integer {
		return plugin.prepareInMemory(name);
	}

	/** Prepare a distributed store (e.g. distributed cache) 
		to be opened and used by the application.
	
		@param name A unique name identifying this Store, 
			which also specifies the id of its configuration bean in the XML 
			configuration file. This name should not contain spaces.
		@return The unique identifier for this operation, which will be 
			included in the Finished event sent after the operation is 
			complete and it becomes safe to call open() on this store. 
		@see Finished A Finished event will be sent when this asynchronous 
			operation has completed. 

	*/
	action prepareDistributed(string name) returns integer {
		return plugin.prepareDistributed(name);
	}

	/** Indicates whether configuration for the given distributed
	 	store name exists. 

		Returning false indicates that a prepareDistributed of
		the store name will definitely fail.  True indicates
		it may succeed, but is not a guarantee of success.
		Does not actually connect to the distributed store.

		@return false if prepareDistributed for the given
			store name will definitely fail
	*/
	action hasDistributedStore(string name) returns boolean {
		return plugin.hasDistributedStore(name);
	}


	/** Prepare a Correlator-persistent read-write Store 
		to be opened and used by the application.
		
		All committed changes made to a Correlator-persistent store are 
		persisted to disk automatically whenever the Correlator takes a 
		snapshot of the Correlator persistent application state. 
		Because the Correlator determines when to persist its state, you 
		cannot explicitly request persistence for a Correlator-persistent 
		store or any tables it contains.

		Attempts to create a Correlator-persistent store in a Correlator that 
		does not have persistence enabled will result in an error that will 
		terminate the monitor instance. 
	
		@param name A unique name identifying this Store. 
		@return The unique identifier for this operation, which will be 
			included in the Finished event sent after the operation is 
			complete and it becomes safe to call open() on this store. 
		@see Finished A Finished event will be sent when this asynchronous 
			operation has completed. 
	*/
	action prepareCorrelatorPersistent(string name) returns integer {
		return plugin.prepareCorrelatorPersistent(name);
	}

	/** Prepare a persistent read-write Store associated with an existing 
		database file on disk. 
	
		The specified file must exist and must have been created by the 
		MemoryStore. If the specified file does not exist, or cannot be opened 
		for read-write, the Finished event will indicate failure. 
		
		@param name A unique name identifying this Store. 
		@param filename The path of the database file holding the persistent 
			store. If a relative path is specified, it is relative to the 
			directory that contains the associated Apama Studio project
			(i.e. the Correlator working directory). 
		@return The unique identifier for this operation, which will be 
			included in the Finished event sent after the operation is 
			complete and it becomes safe to call open() on this store. 
		@see Finished A Finished event will be sent when this asynchronous 
			operation has completed. 
	*/			
	action prepare(string name, string filename) returns integer {
		return plugin.prepare(name, filename);
	}

	/** Prepare a persistent read-write Store associated with a 
		database file on disk, which will be created if it does not exist 
		already. 
	
		@param name A unique name identifying this Store. 
		@param filename The path of the database file holding the persistent 
			store. If a relative path is specified, it is relative to the 
			directory that contains the associated Apama Studio project
			(i.e. the Correlator working directory). 
			The parent directory of the specified file must already exist. 
		@return The unique identifier for this operation, which will be 
			included in the Finished event sent after the operation is 
			complete and it becomes safe to call open() on this store. 
		@see Finished A Finished event will be sent when this asynchronous 
			operation has completed. 
	*/			
	action prepareOrCreate(string name, string filename) returns integer {
		return plugin.prepareOrCreate(name, filename);
	}

	/** Prepare a persistent read-only Store associated with an existing 
		database file on disk. 
	
		@param name A unique name identifying this Store. 
		@param filename The path of the database file holding the persistent 
			store. If a relative path is specified, it is relative to the 
			directory that contains the associated Apama Studio project
			(i.e. the Correlator working directory). 
		@return The unique identifier for this operation, which will be 
			included in the Finished event sent after the operation is 
			complete and it becomes safe to call open() on this store. 
		@see Finished A Finished event will be sent when this asynchronous 
			operation has completed. 
	*/			
	action prepareReadOnly(string name, string filename) returns integer {
		return plugin.prepareReadOnly(name, filename);
	}

	/** Indicate whether or not a Store with the specified name has been 
		prepared already. 
	
		@param name A unique name identifying this Store. 
		@return True if it is safe to call open() on the specified store; 
			false if preparation failed or is still in progress.
	*/
	action hasStore(string name) returns boolean {
		return plugin.hasStore(name);
	}

	/** Open a named Store that has already been prepared, ready for use by 
		this monitor instance.
	
		Every monitor instance should prepare and open the stores it needs. 
		Multiple monitor instances can have the same table open at the same 
		time.

		It is an error to call open() before a prepare call for the table
		has finished without error.
		
		Note that opening a store will not immediately bring all that store's 
		tables into memory, this only happens when each individual table is 
		itself prepared and opened. 
		
		A persistent monitor can access only Correlator-persistent stores. 
		If a persistent monitor tries to open any other type of store 
		(e.g. in-memory, on-disk or distributed) the monitor instance 
		will terminate with an error.
		
		@param name A unique name identifying this Store. 
	*/
	action open(string name) returns Store {
		return Store(plugin.open(name));
	}
}
 00000039 C:\SoftwareAG\Apama\monitors\data_storage\MemoryStore.mon
TIME 0000000e 1484234969.7,1
MONF 0001252f package com.apama.scenario;

/**
 * This file contains the shared event definitions that are generic across 
 * all Scenarios.  
 *
 * WARNING: 
 *    The event definitions contained in this file form an internal protocol 
 *    and may change between software releases.
 *
 * Notes:
 * 1) The Event definitions contained in this file MUST be considered
 *    as an internal implementation of the communications protocol
 *    between the Apama client API and an Apama server.  As such
 *    these event definitions MUST NOT be considered "stable" and are 
 *    subject to change in any future software release.
 *
 *    The ONLY supported public APIs to the Scenario Service are the 
 *    Java client API (in the com.apama.services.scenario package) and the 
 *    .NET client API (in the Apama.Services.Scenario namespace).  
 *    Customers should not attempt to interface at the event or 
 *    EPL layer. Some events have been changed over time (as 
 *    noted here).
 *
 * 2) Most events now contain an initial field called "scenarioId". This string 
 *    uniquely identifies a scenario inside the correlator, and is used as 
 *    the package name, in several events, and for making up a part of the 
 *    data and control channel names.
 *
 * 3) Events that are intended to be used in a request-response pattern contain
 *    a "messageId" field.  The value of this field must be copied from the 
 *    request event into the response event. The mechanism allows clients to 
 *    match up request-response pairs.
 *
 *
 * $Copyright(c) 2005-2011 Progress Software Corporation (PSC). All rights reserved.$
 * $Copyright (c) 2013-2015 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
 * Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG
 *
 * $Revision: 267710 $
 */

/**
 * Request that a new instance of a specific scenario is created.
 *
 * See also: Created(), Acknowledge()
 *
 * Direction: From the client to the correlator.
 *
 * Response: Acknowledge()
 */
event Create {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	string owner;                        // the owner (user) of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
}

/**
 * Notifies all interested clients that a new instance of a specific 
 * scenario has been created. 
 * The event provides the owner (user), initial state, and initial values for 
 * all input fields and all output fields.
 *
 * See also: Create()
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Created { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
	string owner;                        // the owner (user) of the instance.
	string state;                        // the initial state of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form
}


/**
 * Notifies the interested clients of child scenarios created from
 * a parent scenario.
 *
 * Direction: Internal in the correlator
 *
 * Channel: <none>
 */
event ParentChildRelationship {
	string parentScenarioId;
	integer parentScenarioInstanceId;
	string childScenarioId;
	integer childScenarioInstanceId;
}


/**
 * Request that a specific instance of a specific scenario is edited (the input 
 * field values are changed).
 *
 * See also: Edited(), Acknowledge()
 *
 * Direction: From the client to the correlator.
 *
 * Response: Acknowledge()
 */
event Edit { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
}


/**
 * Notifies all interested clients that a specific instance of a specific 
 * scenario has been edited (the input field values have changed).
 *
 * See also: Edit()
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Edited { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form
}


/**
 * Request that a specific instance of a specific scenario is deleted.
 *
 * See also: Deleted(), Acknowledge()
 *
 * Direction: From the client to the correlator.
 *
 * Response: Acknowledge()
 */
event Delete {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
}


/**
 * Notifies all interested clients that a specific instance of a specific 
 * scenario has been deleted.
 *
 * See also: Delete()
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Deleted {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
}


/**
 * Indicates that a specific instance of a specific scenario has died.
 * This is sent as a result of a scenario instance use of MonitorScript ondie.
 * This occurs for any of deleting a running scenario, a scenario failing, or 
 * entering the end state.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event InstanceDied {
	string scenarioId;                   // the unique name of the scenario
	integer scenarioInstanceId;          // the ID of the scenario instance
}


/**
 * Contains updated scenario instance output fields.
 * Note that this is the ONLY event type that is sendted on the 
 * "<scenarioId>.Data" channel.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event Update { 
	string scenarioId;                   // the unique name of the scenario
	integer scenarioInstanceId;          // the ID of the scenario instance
	float timeStamp;                     // the time of the update (seconds since epoch)
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form
}


/**
 * A general Acknowledgement event that is the "response" to various "request"
 * events such as Create, Edit, Delete.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Control
 */
event Acknowledge { 
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the id of the scenario instance
	boolean success;                     // boolean indication of success
	sequence<string> outputFieldValues;  // sequence of the OUTPUT field values in string form, 
	                                     //   or an empty sequence if success = false
}


/**
 * Indicates that a specific instance of a specific scenario has changed 
 * state, where valid states include "ENDED", "FAILED", "RUNNING".
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Data and <scenarioId>.Data.Raw
 */
event StateChange { 
	string scenarioId;                   // the unique name of the scenario.
	integer scenarioInstanceId;          // the ID of the scenario instance.
	string state;                        // the new state.
}


/**
 * Request that each scenario loaded in the correlator send its meta
 * information out on the supplied channel. When all scenarios have
 * sent out this information, a final RequestScenariosDone event will
 * be sent on the same channel.
 *
 * As soon as this event is received, a RequestScenariosAck will be
 * sent on the same channel so client can stop resending the RequestScenarios
 * event.
 *
 * See also: Scenario, RequestScenariosDone, RequestScenariosAck
 *
 * Direction: From the client to the correlator.
 *
 * Response: Scenario() from each loaded scenario.
 */
event RequestScenarios { 
	// renamed for clarity - was Request
	string channel;                      // Name of the private response channel.
}


/**
 * This is a simple marker event that is sent by the correlator to indicate 
 * that it has finished sending all of the Scenario events in response
 * to a RequestScenarios event.
 * 
 * See also: RequestScenarios, Scenario.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: The private channel that was specified in the RequestScenarios event.
 */
event RequestScenariosDone {}

/* This is a simple ack event that is sent by the correlator to indicate the
 * RequestScenarios event is received and the request is being processed
 *
 * See also: RequestScenarios
 *
 * Direction: From the correlator to the client.
 *
 * Channel: The private channel that was specified in the RequestScenarios event.
 */
event RequestScenariosAck {}

/**
 * Request that each instance of the specified scenario send an Instance event 
 * out on the supplied channel. When all instances for the scenario have been 
 * sent out, a final RequestInstancesDone event will be sent on the same channel.
 *
 * See also: Instance, RequestInstancesDone
 *
 * Direction: From the client to the correlator.
 *
 * Response: Instance() from each scenario instance.
 */
event RequestInstancesOnChannel { 
	string scenarioId;                   // Identifier of the scenario for which to return instances. 
	integer messageId;                   // the unique message ID (for request-response matching)
	string channel;                      // Name of the private response channel.
}

/**
 * Request that each instance for the specified user of the specified scenario
 * send an Instance event out on the supplied channel. When all instances for
 * the scenario have been sent out, a final RequestInstancesDone event will be 
 * sent on the same channel.
 *
 * See also: Instance, RequestInstancesDone
 *
 * Direction: From the client to the correlator.
 *
 * Response: Instance() from each scenario instance.
 */
event RequestInstancesOnChannelByUser { 
	string scenarioId;                   // Identifier of the scenario for which to return instances. 
	integer messageId;                   // the unique message ID (for request-response matching)
	string channel;                      // Name of the private response channel.
	string owner;                        // the username to filter by
}


/**
 * This is a simple marker event that is sent by the correlator to indicate 
 * that it has finished sending all of the Instance events in response
 * to a RequestInstancesInternal event.
 * 
 * See also: RequestInstancesInternal, Scenario.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: A unique private channel as specified by the client in a 
 *          RequestScenariosOnChannel event.
 *
 *          Note that previously it would have been on <scenarioId>.Data and 
 *          <scenarioId>.Data.Raw, but that behaviour is now deprecated.
 */
event RequestInstancesDone {
	string scenarioId;                   // Identifier of the scenario for instances were returned. 	
	integer messageId;                   // the unique message ID (for request-response matching)
}


/**
 * Describes the meta-information about a scenario that is loaded in the 
 * correlator.
 * 
 * See also: RequestScenarios, RequestScenariosDone, ScenarioUnloaded
 * 
 * Direction: From correlator to client.
 *
 * Channel:   1) com.apama.scenario to broadcast when loaded.
 *            2) A unique private channel as specified by the client in a 
 *               RequestScenarios event.
 *
 * This event has gained the executionMode field in Apama 4.2
 */
event Scenario {
	string scenarioId;                   // unique identifier for Scenario, e.g. Scenario_statistical$002darbitrage
	string displayName;                  // user-specified name for Scenario, e.g. statistical-arbitrage
	string description;                  // description of the Scenario
	sequence<string> inputNames;         // input parameter names
	sequence<string> inputTypes;         // input parameter types
	sequence<string> inputConstraints;   // input parameter contraints
	sequence<string> inputDefaults;      // input parameter default values
	sequence<string> outputNames;        // output parameter names
	sequence<string> outputTypes;        // output parameter types
	integer executionMode;               // 0 = serial, 1 = parallel, 2 = parallel child. New as of 4.2
	dictionary<string, string> extraParams; // Additional parameters
}



/**
 * Indicates that a specific Scenario definition is being unloaded.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: <scenarioId>.Control
 */
event ScenarioUnloaded { 
	string scenarioId;                   // the unique name of the scenario
}

/**
 * Provides a dump of the current state of a scenario instance.
 * The event definition is identical to the Created event, and includes the 
 * owner (user), initial state, and current values for all input fields and 
 * all output fields.
 *
 * Instance events are sent in response to RequestInstancesOnChannel event 
 * and the deprecated RequestInstancesInternal event; 
 *
 * See also: RequestInstancesOnChannel, RequestInstancesDone, RequestInstancesInternal
 *
 * Direction: From the correlator to the client.
 *
 * Channel: A unique private channel as specified by the client in a 
 *          RequestScenariosOnChannel event.
 *
 *          Note that previously it would have been on <scenarioId>.Data and 
 *          <scenarioId>.Data.Raw, but that behaviour is now deprecated.
 */
event Instance {
	string scenarioId;                   // the unique name of the scenario. 
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance. 
	string owner;                        // the owner (user) of the instance.
	string state;                        // the initial state of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form. 
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form. 
}


/**
 * Indicates this shared MonitorScript has been loaded.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: com.apama.scenario to broadcast when loaded.
 */
event ScenarioServiceLoaded { 
}

/**
 * Indicates this shared MonitorScript is being unloaded.
 *
 * Direction: From the correlator to the client.
 *
 * Channel: com.apama.scenario to broadcast when unloaded.
 */
event ScenarioServiceUnloaded { 
}


/**
 * Set the period over which updates will be queued and coalesced before being
 * sent out on the data channel. Defaults to zero, which means they won't be
 * queued. If it is negative then we won't send any updates on the data channel.
 * This event is deprecated and the ConfigureUpdates event should be used 
 * instead (see below)
 */
event SetThrottlingPeriod {
	float period;   // The period in seconds. Default zero.
}


/**
 * Configures how updates are sent from scenarios.
 * Each scenario is controlled by two configurations - a global default,
 * and an optional per scenario configuration.  The per scenario
 * configuration takes precedence over the global default.
 * The configuration is made up of a number of entries in 
 * the configuration dictionary. The ConfigureUpdate event 
 * is merged into any previous configuration.
 *
 * Global configuration can be modified by specifying an empty string 
 * for scenarioId, and empty values remove values.
 */
event ConfigureUpdates {
	/** Specifies the scenario the configuratio will apply to, or use 
		empty string "" to specify a global default. 
	*/
	string scenarioId;
	/** 
	 * A set of the configurations modified by this event
	 * the key and meaning is one of:
	 * sendThrottled - boolean - whether to send Updates to the 
	 *                           Throttled (.Data) channel (default=true)
	 * throttlePeriod - float - period with which to send Updates. 
	 *                          0.0 means updates are not throttled - 
	 *                          every update is sent on the Throttled 
	 *                          channel. (default=0.0)
	 * sendRaw - boolean - whether to send Updates on the Raw channel 
	 *                     (.Raw) (default=true)
 	 * sendThrottledUser - boolean - whether to send Updates to the 
	 *                     throttled filtered (.Data:username) channel
	 *                     (default=false)
 	 * sendRawUser - boolean - whether to send Updates to the Raw 
	 *                     channel (.Raw:username) (default=false)
	 * routeUpdate - boolean - whether to route Update (and Edited, Deleted) events.
	 * An empty value removes that entry from the configuration
	 */
	dictionary<string,string> configuration;
}

/**
 * Immediately flushes to receivers any scenario Update events that were 
 * waiting for the next throttling period before being sent. 
 * 
 */
event SendQueuedUpdatesNow {
	
}

/* ==========================================================================
 * The following describes INTERNAL event definitions that should not be sent 
 * into the correlator, nor relied upon.
 * ==========================================================================
 */

/**
 * Request that each instance of the specified scenario send an Instance event 
 * out on the scenario Data or Raw channel. When all instances for the scenario
 * have been sent out, a final RequestInstancesDone event will be sent on the 
 * same channel.
 *
 * See also: Instance, RequestInstancesDone, RequestInstancesOnChannel, RequestInstancesOnChannelByUser
 *
 * Direction: From the ScenarioService to the scenario
 *
 * Response: Instance() from each scenario instance, RequestInstancesDone when finished.
 */
event RequestInstancesInternal { 
	string scenarioId;                   // Identifier of the scenario for which to return instances. 
	integer messageId;                   // the unique message ID (for request-response matching)
	string channel;                      // Name of the private response channel.
	boolean internal;                    // if true, events should be routed/ send-to'd the main context
	string owner;                        // owner filter (optional)
	boolean ownerFilter;                 // whether to filter by owner
}

/**
 * A scenario has finished running, but is still discoverable.
 * (i.e. entered end state or failed - but not deleted).
 * Note that this event contains the state as of the last
 * Update/ Edited event - i.e. if an action modified an output variable 
 * and then caused the scenario to fail, the prior modification
 * would not be reflected in this event.
 *
 * This event contains sufficient information for discovery of the
 * scenario instance later
 * 
 * Direction: from scenarios to the ScenarioService sub-monitor (spawned per scenario)
 */
event ScenarioFinished {
	string scenarioId;                   // Identifier of the scenario which has failed. 
	integer scenarioInstanceId;          // the ID of the scenario instance. 
	string owner;                        // the owner (user) of the instance.
	string state;                        // the initial state of the instance.
	sequence<string> inputFieldValues;   // sequence of INPUT field values in string form. 
	sequence<string> outputFieldValues;  // sequence of OUTPUT field values in string form. 
}
/**
 * Only used internally to tell all the scenarios to start routing their
 * meta data (Scenario). It is followed by a sweeper FinishedScenarioRecovery
 * event which indicates that all the scenarios have reported in.
 */
event StartScenarioRecovery {}

/**
 * Sweeper event to indicate that scenario recovery is done. Only used internally.
 */
event FinishedScenarioRecovery {}

/**
 * Trigger discovery of a parallel scenario. Sent from a sub-monitor of
 * ScenarioService to RequestInstancesHandler to create a new sub-monitor.
 */
event RequestInstancesParallel {
	RequestInstancesInternal request;          // the original request event
	dictionary<integer, context> instances;    // all scenario instances and their running context
	integer highestInstanceId;                 // the highest scenarioInstanceId listed in instances (or more accurately, the highest when discovery started)
}

/**
 * Discovery protocol of a parallel scenario. Sent from a scenario instance
 * to RequestInstancesHandler.
 */
event RequestInstancesParallelDone {
	string scenarioId;                   // the unique name of the scenario
	integer messageId;                   // the unique message ID (for request-response matching)
	integer scenarioInstanceId;          // the ID of the scenario instance
}

/**
 * Notification of a new scenario instance
 */
event ParallelStarting {
	string scenarioId;                   // the unique name of the scenario
	integer scenarioInstanceId;          // the ID of the scenario instance
	string owner;                        // the owner of the scenario instance
	context runningCtx;                  // the context the scenario is running in
}

/**
 * Get the current configuration for a given scenario and the default configuration
 */
event GetConfiguration {
	string scenarioId;                   // the unique name of the scenario
}

/**
 * The current configuration for a given scenario and the default configuration
 * @see ConfigureUpdates
 */
event Configuration {
	string scenarioId;                        // the unique name of the scenario
	dictionary<string, string> defaults;      // the global defaults
	dictionary<string, string> configuration; // the scenario configuration (takes precedence)
}


/**
 * An operation has completed. Sent from parallel scenarios to the main context.
 */
event OperationCompleted {
	string scenarioId;
	integer scenarioInstanceId;
	integer messageId;
}

/**
 * Notification that a scenario has loaded a ConfigureUpdates event
 */
event ScenarioProcessedUpdates {
	string scenarioId;
}

/**
 * Request all configuration
 */
event GetAllConfiguration {
	integer requestId;
}

/** 
 * Response all configuration
 */
event AllConfiguration {
	integer requestId;
	dictionary<string, string> defaultConfig;
	dictionary<string, dictionary<string, string> > configurations;
}


/**
 * Library of utiltiy actions
 */
event ScenarioServiceLibrary {

	/**
	 * Get the control channel for a scenario Id. This channel
	 * is always enabled (uses an event set scenario ID)
	 */
	action getControlChannel(string scenarioId) returns string
	{
		return scenarioId+".Control";
	}
	/**
	 * Get the data channel for a scenario ID. This channel 
	 * is enabled by the sendThrottled configuration key and 
	 * the throttlePeriod key (Update events may be throttled)
	 */
	action getDataChannel(string scenarioId) returns string
	{
		return scenarioId+".Data";
	}
	/**
	 * Get the raw channel for a scenario ID. This channel
	 * is enabled by the sendRaw configuration key.
	 */
	action getRawChannel(string scenarioId) returns string
	{
		return scenarioId+".Data.Raw";
	}
	/**
	 * Get the data channel for a scenario Id. This channel 
	 * is enabled by the sendThrottledUser configuration key and 
	 * the throttlePeriod key (Update events may be throttled)
	 */
	action getDataUserChannel(string channel, string owner) returns string
	{
		return channel+":"+owner;
	}
	/**
	 * Get the raw channel for a scenario Id. This channel
	 * is enabled by the sendRawUser configuration key.
	 */
	action getRawUserChannel(string channel, string owner) returns string
	{
		return channel+":"+owner;
	}
	
	/**
	 * Merge configuration. Any entries in updates overwrite entries in configuration.
	 * An empty string value removes the value.
	 * @see ConfigureUpdates
	 */
	action mergeConfiguration(dictionary<string, string> updates, dictionary<string, string> configuration) {
		string k;
		for k in updates.keys() {
			configuration[k]:=updates[k];
			if updates[k]="" then {
				configuration.remove(k);
			}
		}
	}
	
	// implementation note: the defaults for sendThrottled, sendRaw, throttlePeriod, etc are in the following actions:
	/**
	 * Get the sendThrottled value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendThrottled(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendThrottled", "true");
		return c = "true";
	}

	/**
	 * Get the sendThrottledUser value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendThrottledUser(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendThrottledUser", "false");
		return c = "true";
	}
	
	/**
	 * Get the sendRaw value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendRaw(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendRaw", "true");
		return c = "true";
	}
	
	/**
	 * Get the sendRawUser value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getSendRawUser(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "sendRawUser", "false");
		return c = "true";
	}
	
	/**
	 * Get the throttlePeriod value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getThrottlePeriod(dictionary<string,string> defaults, dictionary<string,string> config) returns float {
		string c:=getConfig(defaults, config, "throttlePeriod", "0.0");
		return float.parse(c);
	}
	
	/**
	 * Get the routeUpdate value from the given configuration
	 * @see ConfigureUpdates
	 */
	action getRouteUpdate(dictionary<string,string> defaults, dictionary<string,string> config) returns boolean {
		string c:=getConfig(defaults, config, "routeUpdate", "false");
		return c = "true";
	}
	

	/**
	 * Get the specified key from the configuration dictionaries, reverting to the default 
	 * if none specified.
	 */
	action getConfig(dictionary<string,string> defaults,
	                 dictionary<string,string> config, 
	                 string key, string _default) returns string {
		if config.hasKey(key) then {
			return config[key];
		}
		if defaults.hasKey(key) then {
			return defaults[key];
		}
		return _default;
	}

	action configurationManager(dictionary<string, string> defaultConfig, dictionary<string, dictionary<string, string> > configurations) {
		// the recognised ConfigureUpdates configuration keys, as above:
		dictionary<string,boolean> KNOWN_CONFIG_KEYS := {"sendThrottled":true, "throttlePeriod":false,
		 "sendRaw":true, "sendThrottledUser":true, "sendRawUser":true, "routeUpdate":true};

		dictionary <string,string> EMPTY_DICT:=new dictionary<string,string>;
		ConfigureUpdates cu;
		on all ConfigureUpdates():cu {
			string key;
			for key in cu.configuration.keys() {
				if not KNOWN_CONFIG_KEYS.hasKey(key) then {
					log "Unrecognized configuration property "+key+" in event "+cu.toString() at WARN;
				}
			}
			if cu.scenarioId = "" then {
				mergeConfiguration(cu.configuration, defaultConfig);
				log "Received "+cu.toString()+" : defaults applicable to all scenarios" at INFO;
			} else {
				if not configurations.hasKey(cu.scenarioId) then {
					configurations.add(cu.scenarioId, new dictionary<string,string>);
				}
				mergeConfiguration(cu.configuration, configurations[cu.scenarioId]);
				on ScenarioProcessedUpdates(cu.scenarioId) -> completed ConfigureUpdates(scenarioId=cu.scenarioId) {
					log "Received "+cu.toString()+" : applied to scenario" at INFO;
				}
				on completed ConfigureUpdates(scenarioId=cu.scenarioId) and not ScenarioProcessedUpdates(cu.scenarioId) {
					log "Received "+cu.toString()+" : for scenario that is not yet defined" at INFO;
				}
			}
		}

		GetConfiguration getConfig;
		on all GetConfiguration():getConfig {
			dictionary<string,string> config:=EMPTY_DICT;
			if configurations.hasKey(getConfig.scenarioId) then {
				config:=configurations[getConfig.scenarioId];
			}
			route Configuration(getConfig.scenarioId, defaultConfig, config);
		}	
		GetAllConfiguration gac;
		on all GetAllConfiguration():gac {
			route AllConfiguration(gac.requestId, defaultConfig, configurations);
		}
	}
		
}

event CallbackHelper {
	sequence<action<> > callbacks;
	action callback() {
		action<> c;
		for c in callbacks {
			c();
		}
	}
}



/**
 * Base event for tracking configuration for a given scenario
 */
event ScenarioServiceUpdaterBase {
	// these are internal and should not be set by users
	string scenarioId;
	dictionary<string,string> defaultConfig;
	dictionary<string,string> config;
	ScenarioServiceLibrary lib;
	boolean sendThrottled;
	boolean sendRaw;
	boolean sendAny;
	boolean emitAny;
	boolean sendThrottledUser;
	boolean sendRawUser;
	boolean routeUpdate;
	float throttlePeriod;
	float throttleStart;
	sequence<listener> listeners;
	string controlChannel;
	string rawChannel;
	string dataChannel;

	/**
	 * Called by monitor at onload time
	 * Will maintain configuration for this scenario
	 * @param sId the scenarioId
	 */
	action init(string sId, action<> cb_onUpdate) {
		scenarioId:=sId;
		controlChannel := lib.getControlChannel(scenarioId);
		rawChannel := lib.getRawChannel(scenarioId);
		dataChannel := lib.getDataChannel(scenarioId);
		route GetConfiguration(scenarioId);
		Configuration c;
		listener l:=on Configuration(scenarioId=scenarioId):c {
			config := c.configuration;
			defaultConfig := c.defaults;
			configurationUpdated();
			cb_onUpdate();
		}
		listeners.append(l);
	}

	/**
	 * Listen for further configuration changes.
	 * @param cb_onUpdate callback upon configuration having been updated
	 */	
	action listenToConfigureUpdates(action<> cb_onUpdate) {
		ConfigureUpdates cu;
		listener l:=on all ConfigureUpdates(scenarioId=""):cu or all ConfigureUpdates(scenarioId=scenarioId):cu {
			if(cu.scenarioId != "") then {
				route ScenarioProcessedUpdates(cu.scenarioId);
			}
			onConfigureUpdates(cu);
			cb_onUpdate();
		}
		listeners.append(l);
	}

	/**
	 * Called when new ConfigureUpdates event available
	 * @param sId the scenarioId
	 */
	action onConfigureUpdates(ConfigureUpdates cu) {
		if cu.scenarioId = "" then {
			lib.mergeConfiguration(cu.configuration, defaultConfig);
		} else {
			lib.mergeConfiguration(cu.configuration, config);
		}
		configurationUpdated();
	}
	
	/**
	 * Called when the configuration should be re-parsed.
	 * @param sId the scenarioId
	 */
	action configurationUpdated() {
		sendThrottled:=lib.getSendThrottled(defaultConfig, config);
		sendThrottledUser:=lib.getSendThrottledUser(defaultConfig, config);
		if sendThrottled or sendThrottledUser then {
			throttlePeriod:=lib.getThrottlePeriod(defaultConfig, config);
			if(throttlePeriod < 0.0) then {
				sendThrottled:=false;
				sendThrottledUser:=false;
			}
			throttleStart:=currentTime;
		}
		sendRaw:=lib.getSendRaw(defaultConfig, config);
		sendRawUser:=lib.getSendRawUser(defaultConfig, config);
		routeUpdate:=lib.getRouteUpdate(defaultConfig, config);
		sendAny:= sendRaw or sendThrottled or routeUpdate or sendRawUser or sendThrottledUser;
		emitAny:= sendRaw or sendThrottled or sendRawUser or sendThrottledUser;
	}

	/** 
	 * Get whether this scenario should send on the throttled (Data) channel
	 */
	action isSendThrottled() returns boolean {
		return sendThrottled or sendThrottledUser;
	}

	/** 
	 * Get whether this scenario should send on the raw channel
	 */
	action isSendRaw() returns boolean {
		return sendRaw or sendRawUser;
	}

	action doEmit(string emitted, string owner) {
		if sendRaw then {
			emit emitted to rawChannel;
		}
		if sendThrottled then {
			emit emitted to dataChannel;
		}
		if sendRawUser then {
			emit emitted to lib.getRawUserChannel(rawChannel, owner);
		}
		if sendThrottledUser then {
			emit emitted to lib.getDataUserChannel(dataChannel, owner);
		}
	}

	/**
 	 * Kill any listeners this object has started
	 */
	action destroy() {
		listener l;
		for l in listeners {
			l.quit();
		}
	}
}


/**
 * Utility event for tracking configuration for a given scenario.
 * This event is suitable for use by monitors which spawn per instance
 * (e.g. Scenarios)
 * 
 * This event also uses a callback to get the updates (supplied in
 * instanceInit). If the scenario is configured to only send throttled 
 * updates, the callback is only called when the throttling period 
 * determines an update should be sent - thus, the scenario does not
 * need to generate the output sequence<string> except when needed,
 * which can improve performance in such a configuration.
 * 
 * actions starting with an underscore should be considered private 
 * and not called by users of this event.
 */
event ScenarioServiceUpdaterSingleInstance {
	// these are internal and should not be set by users
	string scenarioId;
	integer scenarioInstanceId;
	ScenarioServiceLibrary lib;
	listener throttlingListener;
	ScenarioServiceUpdaterBase base;
	boolean havePending;
	float latestUpdate;
	action<> returns sequence<string> getUpdate;
	Update update;
	boolean needUpdate;
	context mainContext;
	string owner;
	string controlChannel;
	string rawChannel;
	string dataChannel;

	/**
	 * Called by monitor at onload time
	 * Will maintain configuration for this scenario
	 */
	action init(string sId) {
		init_cb(sId, _noopAction);
	}
	
	/**
	 * Called by monitor at onload time
	 * Will maintain configuration for this scenario.
	 * cb_init is called when initialisation is complete
	 */
	action init_cb(string sId, action<> cb_init) {
		base.init(sId, cb_init);
		scenarioId:=sId;
		controlChannel := lib.getControlChannel(scenarioId);
		rawChannel := lib.getRawChannel(scenarioId);
		dataChannel := lib.getDataChannel(scenarioId);
		base.listenToConfigureUpdates(_noopAction);
		mainContext:=context.current();
	}

	action _noopAction() {
	}
	

	/**
	 * Called by monitor after spawn
	 * Will maintain configuration for this scenario, and update listeners appropriately.
	 * @param getUpdateCallback a callback to get the latest outputFieldValues - may be called at any time, must 
         *        always return a consistent set of outputs
	 */
	action instanceInit(integer id, action<> returns sequence<string> getUpdateCallback, string _owner) {
		scenarioInstanceId:=id;
		owner:=_owner;
		getUpdate:=getUpdateCallback;
		update.scenarioId:=scenarioId;
		update.scenarioInstanceId:=scenarioInstanceId;
		base.listenToConfigureUpdates(_configurationUpdated);
		_configurationUpdated();
		listener l:=on all SendQueuedUpdatesNow() {
			_sendThrottledUpdate();
		}
		base.listeners.append(l);
	}

	/** 
	 * Get whether this scenario should route updates
	 */
	action isRouteUpdate() returns boolean {
		return base.routeUpdate;
	}

	/**
 	 * Kill any listeners this object has started
	 */
	action destroy() {
		base.destroy();
		throttlingListener.quit();
	}
	  
	/**
	 * called in instances (not factories) when configuration has changed
	 */
	action _configurationUpdated() {
		if base.isSendThrottled() then {
			throttlingListener.quit();
			flushPending();
			if(base.throttlePeriod >= 0.0) then {
				if havePending then {
					_setupThrottleListener();
				}
			}
		}
	}

	/**
	 * set up a throttled listener according to throttlePeriod control
	 */
	action _setupThrottleListener() {
		if base.throttlePeriod > 0.0 then {
			float offset:=currentTime-base.throttleStart;
			float t:=((offset/base.throttlePeriod).floor()+1).toFloat();
			throttlingListener:=on wait((t*base.throttlePeriod)-offset) {
				_sendThrottledUpdate();
			}
		} else {
			_sendThrottledUpdate();
		}
	}

	/**
	 * actually send an update on the throttled channel
	 */
	action _sendThrottledUpdate() {
		if not havePending then {
			return;
		}
		if needUpdate then {
			update.outputFieldValues:=getUpdate();
			update.timeStamp:=latestUpdate;
			needUpdate:=false;
		}
		if base.sendThrottled then {
			send update to dataChannel;
		}
		if base.sendThrottledUser then {
			send update to lib.getDataUserChannel(dataChannel, owner);
		}
		havePending:=false;
	}

	/**
	 * flush any pending update on the throttled channel.
	 */
	action flushPending() {
		if havePending then {
			_sendThrottledUpdate();
			throttlingListener.quit();
		}
	}	

	/**
 	 * Called when a new update is available.
	 */
	action newUpdateAvailable() {
		needUpdate:=true;
		latestUpdate:=currentTime;
 		if base.sendRaw or base.routeUpdate then {
			if needUpdate then {
				update.outputFieldValues:=getUpdate();
				update.timeStamp:=currentTime;
				needUpdate:=false;
			}
			if base.sendRaw then {
				send update to rawChannel;
			}
			if base.sendRawUser then {
				send update to lib.getRawUserChannel(rawChannel, owner);
			}
			if base.routeUpdate then {
				route update;
			}
		}
		if base.isSendThrottled() and not havePending then {
			havePending:=true;
			_setupThrottleListener();
		}
	}
	
	/**
 	 * Called to send a new Acknowledgement event.
	 */
	action emitAcknowledgement(integer messageId) {
		Acknowledge ack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, true, getUpdate());
		if base.routeUpdate then {
			route ack;
		}
		if base.emitAny then {
			send ack to controlChannel;
		}
	}
				
	/**
 	 * Called to send a new Nak event.
	 */
	action emitNack(integer messageId) {
		Acknowledge nack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, false, new sequence<string>);
		if base.routeUpdate then {
			route nack;
		}
		if base.emitAny then {
			send nack to controlChannel;
		}
	}
	
	/**
 	 * Called to send a new Created event.
	 */
	action emitCreated(integer messageId, string owner, string state, sequence<string> inputVariables, sequence<string> outputVariables) {
		if base.sendAny then {
			Created created:=Created(scenarioId, messageId, scenarioInstanceId, owner, state, inputVariables, outputVariables);
			route created;
			if base.emitAny then {
				base.doEmit(created.toString(), owner);
			}
		}
	}
	
	/**
 	 * Called to send a new Edited event.
	 */
	action emitEdited(integer messageId, sequence<string> inputVariables) {
		flushPending();
		if base.sendAny then {
			Edited edited:=Edited(scenarioId, messageId, scenarioInstanceId, inputVariables, getUpdate());
			if base.routeUpdate then {
				route edited;
			}
			if base.emitAny then {
				base.doEmit(edited.toString(), owner);
			}
		}
		emitOpCompleted(messageId);
	}

	/**
 	 * Called to say an operation has completed; implied by emitEdited. Must be called before emitInstanceDied.
	 */
	action emitOpCompleted(integer messageId) {
		if(context.current().getId()!=mainContext.getId()) then {
			send OperationCompleted(scenarioId, scenarioInstanceId, messageId) to mainContext;
		}
	}

	/**
 	 * Called to send a new Deleted event.
	 */
	action emitDeleted(integer messageId) {
		flushPending();
		if base.sendAny then {
			Deleted deleted:=Deleted(scenarioId, messageId, scenarioInstanceId);
			if base.routeUpdate then {
				route deleted;
			}
			if base.emitAny then {
				base.doEmit(deleted.toString(), owner);
			}
		}
		throttlingListener.quit();
		notifyInstanceDied();
	}

	/**
 	 * Called to send an instance Died event (either of failed, ended)
	 */
	action emitInstanceDied() {
		flushPending();
		if base.sendAny then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			if base.emitAny then {
				base.doEmit(iDied.toString(), owner);
			}
			if mainContext.getId()=context.current().getId() then {
				route iDied;
			}
		}
		throttlingListener.quit();
	}

	/**
 	 * Called to notify the scenario service monitor that we have gone away - must be called 
 	 * after emitting any events regarding this instance going away. Implied by emitDeleted.
	 */
	action notifyInstanceDied() {
		if mainContext.getId()!=context.current().getId() then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			
			// give a chance for anyone monitoring this from its own context 
			// to handle the InstanceDied before the main context
			if base.routeUpdate then {
				route InstanceDied(scenarioId, scenarioInstanceId);
			}

			send iDied to mainContext;
		}
	}
	
	/**
 	 * Called to send a new StateChange event.
	 */
	action emitStateChange(string state) {
		flushPending();
		StateChange stchange:=StateChange(scenarioId, scenarioInstanceId, state);
		if mainContext.getId()!=context.current().getId() then {
			send stchange to mainContext;
		} else {
			route stchange;
		}
		if base.emitAny then {
			base.doEmit(stchange.toString(), owner);
		}
	}

	/**
 	 * Called to send an instance in response to a RequestInstancesInternal event
	 */
	action emitInstance(RequestInstancesInternal request, string owner, string state, sequence<string> input, sequence<string> output) {
		Instance instance:=Instance(scenarioId, request.messageId, scenarioInstanceId, owner, state, input, output);
		if request.internal then {
			if mainContext.getId() != context.current().getId() then {
				send instance to mainContext;
			} else {
				route instance;
			}
		} else {
			if(base.emitAny) then {
				send instance to request.channel;
			}
		}
		if mainContext.getId() != context.current().getId() then {
			send RequestInstancesParallelDone(scenarioId, request.messageId, scenarioInstanceId) to mainContext;
		}
	}

	/**
 	 * Called when the instance has failed.  input and output are the input
 	 * and output variables as at the last Update/ Edited point.
	 */
	action finished(string state, string owner, sequence<string> input, sequence<string> output) {
		ScenarioFinished scenFinished:=ScenarioFinished(scenarioId, scenarioInstanceId, owner, state, input, output);
		if mainContext.getId() != context.current().getId() then {
			send scenFinished to mainContext;
		} else {
			route scenFinished;
		}
	}
	
}


/**
 * Utilitiy event for tracking configuration for a given scenario.
 * This event is suitable for use by monitors which spawn per scenario,
 * but not per instance. (e.g. ScenarioService, DataViewService)
 * 
 * actions starting with an underscore should be considered private 
 * and not called by users of this event.
 * 
 * Note that this updater only honours sendThrottledUser changes at the next throttling period
 * (it does not record the owner if sendThrottledUser is not true)
 */
event ScenarioServiceUpdaterMultipleInstances {
	// these are internal and should not be set by users
	string scenarioId;
	ScenarioServiceLibrary lib;
	listener throttlingListener;
	ScenarioServiceUpdaterBase base;
	boolean currentlySendingThrottledUser;
	dictionary<integer, Update> updates;
	dictionary<integer, string> owners;
	context mainContext;
	string controlChannel;
	string rawChannel;
	string dataChannel;

	/**
	 * Called by monitor for each scenario
	 * Will maintain configuration for this scenario Id
	 */
	action init(string sId, context mainCtx) {
		_init(sId, mainCtx, _configurationUpdated);
	}
	
	/**
	 * Called by monitor for each scenario
	 * Will maintain configuration for this scenario Id
	 */
	action init_cb(string sId, context mainCtx, action<> cb_initComplete) {
		CallbackHelper callbackHelper:=new CallbackHelper;
		callbackHelper.callbacks.append(cb_initComplete);
		callbackHelper.callbacks.append(_configurationUpdated);
		_init(sId, mainCtx, callbackHelper.callback);
	}

	/**
	 * Implementation of init and init_cb
	 */
	action _init(string sId, context mainCtx, action<> cb_initComplete) {
		base.init(sId, cb_initComplete);
		mainContext:=mainCtx;
		scenarioId:=sId;
		controlChannel := lib.getControlChannel(scenarioId);
		rawChannel := lib.getRawChannel(scenarioId);
		dataChannel := lib.getDataChannel(scenarioId);
		listener l:=on all SendQueuedUpdatesNow() {
			_sendThrottledUpdates();
		}
		base.listeners.append(l);
		base.listenToConfigureUpdates(_configurationUpdated);
	}
	
	/** 
	 * Get whether this scenario should route updates
	 */
	action isRouteUpdate() returns boolean {
		return base.routeUpdate;
	}

	/**
 	 * Kill any listeners this object has started
	 */
	action destroy() {
		base.destroy();
		throttlingListener.quit();
	}
	  

	/**
	 * called in instances (not factories) when configuration has changed
	 */
	action _configurationUpdated() {
		if base.isSendThrottled() then {
			throttlingListener.quit();
			flushPending();
			if(base.throttlePeriod >= 0.0) then {
				_setupThrottleListener();
			}
		}
	}

	/**
	 * set up a throttled listener according to throttlePeriod control
	 */
	action _setupThrottleListener() {
		if base.throttlePeriod > 0.0 then {
			throttlingListener:=on all wait(base.throttlePeriod) {
				_sendThrottledUpdates();
			}
		} else {
			_sendThrottledUpdates();
		}
	}

	/**
	 * actually send an update on the throttled channel
	 */
	action _sendThrottledUpdates() {
		integer instance;
		if base.sendThrottled then {
			for instance in updates.keys() {
				send updates[instance] to dataChannel;
			}
		}
		if currentlySendingThrottledUser then {
			for instance in updates.keys() {
				send updates[instance] to lib.getDataUserChannel(dataChannel, owners[instance]);
			}
		}
		owners.clear();
		updates.clear();
		currentlySendingThrottledUser := base.sendThrottledUser;
	}

	/**
	 * flush any pending update on the throttled channel.
	 */
	action flushPending() {
		_sendThrottledUpdates();
	}	

	/**
 	 * Flush pending throttled data for one instance
	 */
	action flushPendingInstance(integer scenarioInstanceId) {
		if updates.hasKey(scenarioInstanceId) then {
			if base.sendThrottled then {
				send updates[scenarioInstanceId] to dataChannel;
			}
			if currentlySendingThrottledUser then {
				send updates[scenarioInstanceId] to lib.getDataUserChannel(dataChannel, owners[scenarioInstanceId]);
			}
			updates.remove(scenarioInstanceId);
			if owners.hasKey(scenarioInstanceId) then {
				owners.remove(scenarioInstanceId);
			}
		}
	}	

	/**
 	 * Called when a new update is available. (This variant allows setting of the time parameter)
	 */
	action emitUpdate_time(integer scenarioInstanceId, float time, sequence<string> output, string owner) {
		if base.sendAny then {
			Update update:=Update(scenarioId, scenarioInstanceId, time, output);
			if base.sendRaw then {
				send update to rawChannel;
			}
			if base.sendRawUser then {
				send update to lib.getRawUserChannel(rawChannel, owner);
			}
			if base.routeUpdate then {
				route update;
			}
			if base.isSendThrottled() then {
				if base.throttlePeriod > 0.0 then {
					updates.add(scenarioInstanceId, update);
					if currentlySendingThrottledUser then {
						owners.add(scenarioInstanceId, owner);
					}
				} else {
					send update to dataChannel;
				}
			}
		}
	}
	
	/**
 	 * Called when a new update is available.
	 */
	action emitUpdate(integer scenarioInstanceId, sequence<string> output, string owner) {
		emitUpdate_time(scenarioInstanceId, currentTime, output, owner);
	}

	/**
 	 * Called to send a new Acknowledgement event.
	 */
	action emitAcknowledgement(integer messageId, integer scenarioInstanceId, sequence<string> output) {
		Acknowledge ack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, true, output);
		if base.routeUpdate then {
			route ack;
		}
		if base.emitAny then {
			send ack to controlChannel;
		}
	}
				
	/**
 	 * Called to send a new Nak event.
	 */
	action emitNack(integer messageId, integer scenarioInstanceId) {
		Acknowledge nack:=Acknowledge(scenarioId, messageId, scenarioInstanceId, false, new sequence<string>);
		if base.routeUpdate then {
			route nack;
		}
		if base.emitAny then {
			send nack to controlChannel;
		}
	}
	
	/**
 	 * Called to send a new Created event.
	 */
	action emitCreated(integer messageId, integer scenarioInstanceId, string owner, string state, sequence<string> inputVariables, sequence<string> outputVariables) {
		if base.sendAny then {
			Created created:=Created(scenarioId, messageId, scenarioInstanceId, owner, state, inputVariables, outputVariables);
			route created;
			if base.emitAny then {
				string sCreated:=created.toString();
				base.doEmit(sCreated, owner);
			}
		}
	}

	/**
 	 * Called to send any received events (except for instance) for this scenario.
	 */
	action emitReceivedEvents() {
		dictionary<integer, string> instanceOwners:=new dictionary<integer, string>;
		{
			Update update;
			listener l:=on all Update(scenarioId = scenarioId):update {
				if base.sendRaw then {
					send update to rawChannel;
				}
				if base.sendRawUser and instanceOwners.hasKey(update.scenarioInstanceId) then {	
					send update to lib.getRawUserChannel(rawChannel, instanceOwners[update.scenarioInstanceId]);
				}
				if base.isSendThrottled() then {
					if base.throttlePeriod > 0.0 then {
						updates.add(update.scenarioInstanceId, update);
						string owner:="*";
						if instanceOwners.hasKey(update.scenarioInstanceId) then {
							owner:=instanceOwners[update.scenarioInstanceId];
						}
						if currentlySendingThrottledUser then {
							owners.add(update.scenarioInstanceId, owner);
						}
					} else {
						send update to dataChannel;
					}
				}
			}
			base.listeners.append(l);
		}
		{
			Created created;
			listener l:=on all Created(scenarioId = scenarioId):created {
				if(created.owner != "*") then {
					instanceOwners.add(created.scenarioInstanceId, created.owner);
				}
				base.doEmit(created.toString(), created.owner);				
			}
			base.listeners.append(l);
		}
		{
			Deleted deleted;
			listener l:=on all Deleted(scenarioId = scenarioId):deleted {
				flushPendingInstance(deleted.scenarioInstanceId);
				string owner:="*";
				if instanceOwners.hasKey(deleted.scenarioInstanceId) then {
					owner:=instanceOwners[deleted.scenarioInstanceId];
					instanceOwners.remove(deleted.scenarioInstanceId);
				}
				base.doEmit(deleted.toString(), owner);		
			}
			base.listeners.append(l);
		}
		{
			Edited edited;
			listener l:=on all Edited(scenarioId = scenarioId):edited {
				flushPendingInstance(edited.scenarioInstanceId);
				string owner:="*";
				if instanceOwners.hasKey(edited.scenarioInstanceId) then {
					owner:=instanceOwners[edited.scenarioInstanceId];
				}
				base.doEmit(edited.toString(), owner);		
			}
			base.listeners.append(l);
		}
		{
			InstanceDied instanceDied;
			listener l:=on all InstanceDied(scenarioId = scenarioId):instanceDied {
				flushPendingInstance(instanceDied.scenarioInstanceId);
				string owner:="*";
				if instanceOwners.hasKey(instanceDied.scenarioInstanceId) then {
					owner:=instanceOwners[instanceDied.scenarioInstanceId];
				}
				base.doEmit(instanceDied.toString(), owner);		
			}
			base.listeners.append(l);
		}
	}
	
	/**
 	 * Called to send a new Edited event.
	 */
	action emitEdited(integer messageId, integer scenarioInstanceId, sequence<string> inputVariables, sequence<string> outputVariables, string owner) {
		flushPendingInstance(scenarioInstanceId);
		if base.sendAny then {
			Edited edited:=Edited(scenarioId, messageId, scenarioInstanceId, inputVariables, outputVariables);
			if base.routeUpdate then {
				route edited;
			}
			if base.emitAny then {
				base.doEmit(edited.toString(), owner);
			}
		}
		emitOpCompleted(messageId, scenarioInstanceId);
	}

	/**
 	 * Called to say an operation has completed; implied by emitEdited. Must be called before emitInstanceDied.
	 */
	action emitOpCompleted(integer messageId, integer scenarioInstanceId) {
		if(context.current().getId()!=mainContext.getId()) then {
			send OperationCompleted(scenarioId, scenarioInstanceId, messageId) to mainContext;
		}
	}

	/**
 	 * Called to send a new Deleted event.
	 */
	action emitDeleted(integer messageId, integer scenarioInstanceId, string owner) {
		flushPendingInstance(scenarioInstanceId);
		if base.sendAny then {
			Deleted deleted:=Deleted(scenarioId, messageId, scenarioInstanceId);
			if base.routeUpdate then {
				route deleted;
			}
			if base.emitAny then {
				base.doEmit(deleted.toString(), owner);
			}
		}
		notifyInstanceDied(scenarioInstanceId);
	}

	/**
 	 * Called to notify the scenario service monitor that we have gone away - must be called 
 	 * after emitting any events regarding this instance going away. Implied by emitDeleted.
	 */
	action notifyInstanceDied(integer scenarioInstanceId) {
		if mainContext.getId()!=context.current().getId() then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			send iDied to mainContext;
		}
	}
	

	
	/**
 	 * Called to send an instance Died event (either of failed, ended)
	 */
	action emitInstanceDied(integer scenarioInstanceId, string owner) {
		flushPendingInstance(scenarioInstanceId);
		if base.sendAny then {
			InstanceDied iDied:=InstanceDied(scenarioId, scenarioInstanceId);
			if base.emitAny then {
				base.doEmit(iDied.toString(), owner);
			}
			if mainContext.getId()=context.current().getId() then {
				route iDied;
			}
		}
	}
	
	/**
 	 * Called to send a new StateChange event.
	 */
	action emitStateChange(string state, integer scenarioInstanceId, string owner) {
		flushPendingInstance(scenarioInstanceId);
		StateChange stchange:=StateChange(scenarioId, scenarioInstanceId, state);
		if mainContext.getId()!=context.current().getId() then {
			send stchange to mainContext;
		} else {
			route stchange;
		}
		if base.emitAny then {
			base.doEmit(stchange.toString(), owner);
		}
	}

	/**
 	 * Called to send an instance in response to a RequestInstancesInternal event
	 */
	action emitInstance(RequestInstancesInternal request, integer scenarioInstanceId, string owner, string state, sequence<string> input, sequence<string> output) {
		Instance instance:=Instance(scenarioId, request.messageId, scenarioInstanceId, owner, state, input, output);
		if request.internal then {
			if mainContext.getId() != context.current().getId() then {
				send instance to mainContext;
			} else {
				route instance;
			}
		} else {
			if(base.emitAny) then {
				send instance to request.channel;
			}
		}
		if mainContext.getId() != context.current().getId() then {
				send RequestInstancesParallelDone(scenarioId, request.messageId, scenarioInstanceId) to mainContext;
		}
	}
	/**
 	 * Called to send an instance that has already been seen in the current context
	 */
	action emitReceivedInstance(RequestInstancesInternal request, Instance instance) {
		if request.internal then {
			if mainContext.getId() != context.current().getId() then {
				send instance to mainContext;
			}
		} else {
			if(base.emitAny) then {
				send instance to request.channel;
			}
		}
	}
	
}


/*
 * Monitor that performs the following tasks:
 *   - routing/emitting ScenarioServiceLoaded when the service is loaded
 *   - routing/emitting ScenarioServiceUnloaded when the service is unloaded
 *   - routing/emitting a nack if a Create request is ignored
 *   - maintains latest configuration
 *   - tracks state of ended/ failed scenarios
 *   - forwards Edit, delete events to scenarios in other contexts
 *
 */
monitor ScenarioService {

	event PendingOperation {
		integer messageId;
		integer type; // 0 = delete, 1 = edit
	}

	listener throttledSenderListener;
	ScenarioServiceLibrary lib;
	RequestScenarios requestScenarios;
	boolean requestingScenarios;
	
	// MetaData relating to the interface
	dictionary<string,string> interfaceMetaData := {
		"interface.package"     :"com.apama.scenario",
		"interface.name"        :"ScenarioService",
		"interface.fileName"    :"ScenarioService.mon",
		"interface.vendor"      :"Apama",
		"interface.version"     :"9.10.0.0.275046",
		"interface.fullVersion" :"rel/9.10.0.x@275046",
		"interface.language"    :"MonitorScript"
	};
	
	// Channel names	
	string scenarioServiceChannel := "com.apama.scenario";
	integer highestInstanceId;


	// the first mThread handles scenario discovery and maps some events to internal events
	action onload() {
		// print version
		log "ScenarioService interface loaded. MetaData: "+interfaceMetaData.toString() at INFO;
		
		// generate the ScenarioServiceLoaded event
		route ScenarioServiceLoaded();
		send ScenarioServiceLoaded() to scenarioServiceChannel;

		dictionary <string,string> defaultConfig:=new dictionary<string,string>;
		dictionary <string, dictionary<string,string> > configurations:=new dictionary<string, dictionary<string,string> >;
		lib.configurationManager(defaultConfig, configurations);
		RequestInstancesOnChannel requestInstancesOnChannel;
		on all RequestInstancesOnChannel():requestInstancesOnChannel {
			route RequestInstancesInternal(requestInstancesOnChannel.scenarioId, requestInstancesOnChannel.messageId, requestInstancesOnChannel.channel, false, "", false);
			on RequestInstancesDone(scenarioId=requestInstancesOnChannel.scenarioId, messageId=requestInstancesOnChannel.messageId) {
				send RequestInstancesDone(requestInstancesOnChannel.scenarioId, requestInstancesOnChannel.messageId) to requestInstancesOnChannel.channel;
			}
		}

		RequestInstancesOnChannelByUser requestInstancesOnChannelByUser;
		on all RequestInstancesOnChannelByUser():requestInstancesOnChannelByUser {
			route RequestInstancesInternal(requestInstancesOnChannelByUser.scenarioId, requestInstancesOnChannelByUser.messageId, requestInstancesOnChannelByUser.channel, false, requestInstancesOnChannelByUser.owner, true);
			on RequestInstancesDone(scenarioId=requestInstancesOnChannelByUser.scenarioId, messageId=requestInstancesOnChannelByUser.messageId) {
				send RequestInstancesDone(requestInstancesOnChannelByUser.scenarioId, requestInstancesOnChannelByUser.messageId) to requestInstancesOnChannelByUser.channel;
			}
		}
		Scenario scenario;
		on all Scenario():scenario {
			if requestingScenarios then {
				send scenario to requestScenarios.channel;
			} else {
				spawn trackScenario(scenario);
			}
		}
		
		ScenarioUnloaded scenarioUnloaded;
		on all ScenarioUnloaded(): scenarioUnloaded {
			send scenarioUnloaded to scenarioServiceChannel;
		}

		
		on all RequestScenarios():requestScenarios {
			send RequestScenariosAck() to requestScenarios.channel;
			route StartScenarioRecovery();
			route FinishedScenarioRecovery();
			requestingScenarios:=true;
			on FinishedScenarioRecovery() {
				requestingScenarios:=false;
				send RequestScenariosDone() to requestScenarios.channel;
			}
		}

		dictionary <string,string> EMPTY_DICT:=new dictionary<string,string>;
		// Pick up any requests for operations on invalid scenarioIds
		Create create;
		on all unmatched Create(): create {
			dictionary<string,string> config:=EMPTY_DICT;
			if configurations.hasKey(create.scenarioId) then {
				config:=configurations[create.scenarioId];
			}
			Acknowledge nack := new Acknowledge;
			nack.scenarioId := create.scenarioId;
			nack.messageId := create.messageId;
			nack.success := false;
			log create.scenarioId+": Scenario create ignored - unknown scenarioId." at WARN;
			send nack to lib.getControlChannel(create.scenarioId);
			if lib.getRouteUpdate(defaultConfig, config) then {
				route nack;
			}
		}

		// The old SetThrottlingPeriod is mapped to a ConfigureUpdates event
		SetThrottlingPeriod setThrottlingPeriod;		
		on all SetThrottlingPeriod():setThrottlingPeriod {
			dictionary<string, string> configChanges:=new dictionary<string,string>;
			if setThrottlingPeriod.period >= 0.0 then {
				configChanges["sendThrottled"]:="true";
				configChanges["throttlePeriod"]:=setThrottlingPeriod.period.toString();
			} else {
				configChanges["sendThrottled"]:="false";
			}
			ConfigureUpdates cu:=ConfigureUpdates("", configChanges);
			log "Received deprecated event "+setThrottlingPeriod.toString()+", will re-route as "+cu.toString() at WARN;
			route cu;
		}
	}		
				
	
	action onunload() {
		// generate the ScenarioServiceUnloaded event
		ScenarioServiceUnloaded unloaded := new ScenarioServiceUnloaded;
		route unloaded;
		send unloaded to scenarioServiceChannel;
	}
	
	/**
	 * spawned per scenario, and handles any finished scenario instances.
	 * For parallel scenarios, it also tracks which instance runs in 
	 * which context and forwards Edit and Delete events.
	 */
	action trackScenario(Scenario scenario) {
		on ScenarioUnloaded(scenarioId=scenario.scenarioId) {
			die;
		}
		ScenarioServiceUpdaterMultipleInstances updater:=new ScenarioServiceUpdaterMultipleInstances;
		updater.init(scenario.scenarioId, context.current());
		ScenarioFinished finished;
		on all ScenarioFinished(scenarioId=scenario.scenarioId):finished {
			// Finished scenarios can be deleted (which terminates all listeners for this instance), 
			// discovered, and edits are Nacked 
			Delete delete;
			on Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId):delete {
				updater.emitAcknowledgement(delete.messageId, finished.scenarioInstanceId, finished.outputFieldValues);
				updater.emitDeleted(delete.messageId, finished.scenarioInstanceId, finished.owner);
			}
			Edit edit;
			on all Edit(scenarioId=scenario.scenarioId, scenarioInstanceId=finished.scenarioInstanceId):edit and not 
			            Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId) {
				updater.emitNack(edit.messageId, finished.scenarioInstanceId);
				log scenario.displayName+"("+finished.scenarioInstanceId.toString()+ "): Scenario edit ignored - Scenario is in "+finished.state+" state." at WARN;
			}
			RequestInstancesInternal requestInstances;
			if finished.owner = "*" then {
				on all RequestInstancesInternal(scenarioId=scenario.scenarioId):requestInstances and not
						Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId) {
					updater.emitInstance(requestInstances, finished.scenarioInstanceId,
						finished.owner, finished.state, finished.inputFieldValues, finished.outputFieldValues);
				}
			} else {
				on all (RequestInstancesInternal(scenarioId=scenario.scenarioId, ownerFilter=false):requestInstances or
					RequestInstancesInternal(scenarioId=scenario.scenarioId, owner=finished.owner, ownerFilter=true):requestInstances) and not
						Delete(scenarioId=scenario.scenarioId, scenarioInstanceId = finished.scenarioInstanceId) {
					updater.emitInstance(requestInstances, finished.scenarioInstanceId,
						finished.owner, finished.state, finished.inputFieldValues, finished.outputFieldValues);
				}
			}
		}
		if scenario.executionMode > 0 then {
			// for parallel scenarios, we keep track of instance to context mapping:
			dictionary<integer, context> runningCtxs := new dictionary<integer, context>;
			// and to owner mapping:
			dictionary<integer, string> ownerCtxs := new dictionary<integer, string>;
			// and by user:
			dictionary<string, dictionary<integer, context> > runningCtxsByOwner := new dictionary<string, dictionary<integer, context> >;
			// maps from instanceId to sequence<messageId>
			dictionary<integer, sequence<PendingOperation> > pendingOperations := new dictionary<integer, sequence<PendingOperation> >;
			ParallelStarting starting;
			on all ParallelStarting(scenarioId = scenario.scenarioId):starting {
				runningCtxs.add(starting.scenarioInstanceId, starting.runningCtx);
				ownerCtxs.add(starting.scenarioInstanceId, starting.owner);
				if not runningCtxsByOwner.hasKey(starting.owner) then {
					runningCtxsByOwner.add(starting.owner, new dictionary<integer, context>);
				}
				runningCtxsByOwner[starting.owner].add(starting.scenarioInstanceId, starting.runningCtx);
				highestInstanceId := starting.scenarioInstanceId;
			}
			
			InstanceDied died;
			on all InstanceDied(scenarioId = scenario.scenarioId):died {
				if runningCtxs.hasKey(died.scenarioInstanceId) then {
					runningCtxs.remove(died.scenarioInstanceId);
				}
				if ownerCtxs.hasKey(died.scenarioInstanceId) then {
					string owner:=ownerCtxs[died.scenarioInstanceId];
					ownerCtxs.remove(died.scenarioInstanceId);
					if runningCtxsByOwner.hasKey(owner) then {
						if runningCtxsByOwner[owner].hasKey(died.scenarioInstanceId) then {
							runningCtxsByOwner[owner].remove(died.scenarioInstanceId);
						}
						if runningCtxsByOwner[owner].size()=0 then {
							runningCtxsByOwner.remove(owner);
						}
					}
				}
				if pendingOperations.hasKey(died.scenarioInstanceId) then {
					PendingOperation pending;
					for pending in pendingOperations[died.scenarioInstanceId] {
						if pending.type = 0 then {
							route Delete(scenario.scenarioId, pending.messageId, died.scenarioInstanceId);
						} else {
							if pending.type = 1 then {
								route Edit(scenario.scenarioId, pending.messageId, died.scenarioInstanceId, new sequence<string>);
							} else {
								log "error: unknown pending operation type "+pending.toString() at ERROR;
							}
						}
					}
					pendingOperations.remove(died.scenarioInstanceId);
				}
			}
			
			// and forward edits, deletes:
			Edit edit;
			on all unmatched Edit(scenarioId = scenario.scenarioId):edit {
				if runningCtxs.hasKey(edit.scenarioInstanceId) then {
					send edit to runningCtxs[edit.scenarioInstanceId];
					addPendingOperation(pendingOperations, edit.scenarioInstanceId, edit.messageId, 1);
					on OperationCompleted(scenarioId = scenario.scenarioId, scenarioInstanceId = edit.scenarioInstanceId, messageId = edit.messageId) and not
					   ScenarioFinished(scenarioId = scenario.scenarioId, scenarioInstanceId = edit.scenarioInstanceId){
						removePendingOperation(pendingOperations, edit.scenarioInstanceId, edit.messageId);
					}
				} else {
					log scenario.displayName+"("+edit.scenarioInstanceId.toString()+"): Scenario edit ignored - unknown scenarioInstanceId." at WARN;
					updater.emitNack(edit.messageId, edit.scenarioInstanceId);
				}
			}
			Delete delete;
			on all unmatched Delete(scenarioId = scenario.scenarioId):delete {
				if runningCtxs.hasKey(delete.scenarioInstanceId) then {
					send delete to runningCtxs[delete.scenarioInstanceId];
					addPendingOperation(pendingOperations, delete.scenarioInstanceId, delete.messageId, 0);
					on OperationCompleted(scenarioId = scenario.scenarioId, scenarioInstanceId = delete.scenarioInstanceId, messageId = delete.messageId) and not
					   ScenarioFinished(scenarioId = scenario.scenarioId, scenarioInstanceId = delete.scenarioInstanceId){
						removePendingOperation(pendingOperations, delete.scenarioInstanceId, delete.messageId);
					}
				} else {
					log scenario.displayName+"("+delete.scenarioInstanceId.toString()+"): Scenario delete ignored - unknown scenarioInstanceId." at WARN;
					updater.emitNack(delete.messageId, delete.scenarioInstanceId);
				}
			}
			
			// and request instances is handled by a separate monitor. Note that 
			// Finished scenarios are not in the dictionary, but are handled by the finished
			// listener above.
			RequestInstancesInternal reqInstances;
			on all RequestInstancesInternal(scenarioId=scenario.scenarioId):reqInstances {
				if reqInstances.ownerFilter then {
					if runningCtxsByOwner.hasKey(reqInstances.owner) then {
						dictionary<integer, context> rCtxs:=runningCtxsByOwner[reqInstances.owner];
						if runningCtxsByOwner.hasKey("*") then {
							rCtxs:=rCtxs.clone();
							integer i;
							dictionary<integer, context> wildcards:=runningCtxsByOwner["*"];
							for i in wildcards.keys() {
								rCtxs.add(i, wildcards[i]);
							}
						}
						route RequestInstancesParallel(reqInstances, rCtxs, highestInstanceId);
					} else {
						if runningCtxsByOwner.hasKey("*") then {
							route RequestInstancesParallel(reqInstances, runningCtxsByOwner["*"], highestInstanceId);
						} else {
							route RequestInstancesParallel(reqInstances, new dictionary<integer,context>, highestInstanceId);
						}
					}
				} else {
					route RequestInstancesParallel(reqInstances, runningCtxs, highestInstanceId);
				}
			}
			ConfigureUpdates cu;
			on all ConfigureUpdates(scenarioId=""):cu or all ConfigureUpdates(scenarioId=scenario.scenarioId):cu {
				integer inst;
				for inst in runningCtxs.keys() {
					send cu to runningCtxs[inst];
				}
			}
			on all SendQueuedUpdatesNow() {
				SendQueuedUpdatesNow snow:=SendQueuedUpdatesNow();
				integer inst;
				for inst in runningCtxs.keys() {
					send snow to runningCtxs[inst];
				}
			}
		}
	}
	
	action addPendingOperation(dictionary<integer,  sequence<PendingOperation> > pendingOperations, integer scenarioInstanceId, integer messageId, integer type) {
		if not pendingOperations.hasKey(scenarioInstanceId) then {
			pendingOperations.add(scenarioInstanceId, new sequence<PendingOperation>);
		}
		pendingOperations[scenarioInstanceId].append(PendingOperation(messageId, type));
	}
	
	action removePendingOperation(dictionary<integer, sequence<PendingOperation> > pendingOperations, integer scenarioInstanceId, integer messageId) {
		if not pendingOperations.hasKey(scenarioInstanceId) then {
			return;
		}
		integer idx:=-1, i:=0;
		while(i < pendingOperations[scenarioInstanceId].size()) {
			if pendingOperations[scenarioInstanceId][i].messageId = messageId then {
				idx:=i;
				break;
			}
			i:=i+1;
		}
		if(idx>=0) then {
			pendingOperations[scenarioInstanceId].remove(idx);
		}
		if pendingOperations[scenarioInstanceId].size() = 0 then {
			pendingOperations.remove(scenarioInstanceId);
		}
	}	
}

/*
 * Monitor that handles request instances for parallel scenarios:
 * - on a RequestInstancesOnChannel for a parallel scenario, the ScenarioService 
 *   routes a RequestInstancesParallel which triggers this monitor to spawn.
 * - this waits for a response (be it to say the request instances has been 
 *   handled or that the scenario has finished) before sending the 
 *   RequestInstancesDone event 
 *
 * Note that this monitor assumes scenarioInstancesIds always increase over time.
 */
monitor RequestInstancesHandler {
	RequestInstancesParallel req;
	action onload() {
		on all RequestInstancesParallel():req {
			spawn handleRequest();
		}
	}
	
	/**
	 * Forward the request to every context and await responses. We remove 
	 * instances from the dictionary upon receiving an update for them. 
	 */
	action handleRequest() {
		ScenarioServiceUpdaterMultipleInstances updater:=new ScenarioServiceUpdaterMultipleInstances;
		updater.init(req.request.scenarioId, context.current());
		integer k;
		for k in req.instances.keys() {
			send req.request to req.instances[k];
		}
		// if a scenario dies, it will send events in the order ScenarioFinished, InstanceDied:
		ScenarioFinished finished;
		on all ScenarioFinished(scenarioId=req.request.scenarioId, scenarioInstanceId <= req.highestInstanceId):finished {
			// if a scenario dies after it has sent the Instance, do not send another 
			// (the StateChange/ InstanceDied events are sufficient)
			if(req.instances.hasKey(finished.scenarioInstanceId)) then {
				updater.emitInstance(req.request, finished.scenarioInstanceId,
					finished.owner, finished.state, finished.inputFieldValues, finished.outputFieldValues);
			}
		}
		// A finished scenario should not be counted
		InstanceDied died;
		on all InstanceDied(scenarioId = req.request.scenarioId, scenarioInstanceId <= req.highestInstanceId):died {
			if(req.instances.hasKey(died.scenarioInstanceId)) then {
				req.instances.remove(died.scenarioInstanceId);
				checkFinished();
			}
		}
		RequestInstancesParallelDone pdone;
		on all RequestInstancesParallelDone(scenarioId = req.request.scenarioId, messageId = req.request.messageId):pdone {
			if(req.instances.hasKey(pdone.scenarioInstanceId)) then {
				req.instances.remove(pdone.scenarioInstanceId);
				checkFinished();
			}
		}
		checkFinished();
	}
	
	/**
	 * Check whether we are finished.
	 * We are finished if we have no instances left in our dictionary, in which 
	 * case we route a RequestInstancesDone (handled by the ScenarioService monitor)
	 * and terminate.
	 */
	action checkFinished() {
		if req.instances.size()=0 then {
			route RequestInstancesDone(req.request.scenarioId, req.request.messageId);
			die;
		}
	}
}

 00000030 C:\SoftwareAG\Apama\monitors\ScenarioService.mon
CDPF 000143da  0000003c C:\SoftwareAG\Apama\monitors\query_support\QueryServices.cdp
TIME 0000000e 1484234969.8,1
MONF 000029e9 // 
// Bridges between the MemoryStore and ScenarioService event APIs. 
//
// Requires: ScenarioService.mon. 
//
// $Copyright(c) 2009-2012 Progress Software Corporation (PSC). All rights reserved.$
// $Copyright (c) 2013-2015 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
// Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG

package com.apama.memorystore;

using com.apama.scenario.Update;
using com.apama.scenario.Create;
using com.apama.scenario.Delete;
using com.apama.scenario.Edit;
using com.apama.scenario.Created;
using com.apama.scenario.Deleted;
using com.apama.scenario.Edited;
using com.apama.scenario.InstanceDied;
using com.apama.scenario.Instance;
using com.apama.scenario.RequestInstancesDone;
using com.apama.scenario.RequestInstancesInternal;
using com.apama.scenario.Scenario;
using com.apama.scenario.ScenarioServiceUpdaterMultipleInstances;
using com.apama.scenario.ScenarioServiceLibrary;
using com.apama.scenario.StartScenarioRecovery;
using com.apama.scenario.ConfigureUpdates;
using com.apama.scenario.GetAllConfiguration;
using com.apama.scenario.AllConfiguration;

/**
	Requests Scenario Service updates for an exposed MemoryStore to be 
	forwarded to the specified Correlator context. 
	
	Note that this is inefficient and does not implement proper flow
	control. Only use for testing or debugging. 
	
	@see Schema#exposeMemoryView Only tables that are configured to expose 
		their contents will be affected by this event. 
*/
event ForwardMemoryStoreUpdatesTo {
	/** The context to which events should be forwarded. */
	context ctx;
}

/** Makes data in MemoryStore available for viewing by 
	any dashboard client that uses the Scenario Service, or as a 
	DataView. 
	
	@private
*/
monitor MemoryStoreScenarioImpl
{
	import "MemoryStorePlugin" as plugin;

	string MEMORYSTORE_SCENARIO_PREFIX := "DV_MEMST_";
	string PREFIX_UPPER := "DV_MEMST`";
	Scenario recoveryResponse;
	Storage storage;
	boolean doingRecovery;
	// a private context that sends events out.  Should never block on something 
	// that may be blocking on the memory store plugin. That means no 
	// calling into the plugin and no direct send-to to any other 
	// context that may call the plugin.
	// Deadlocks can be avoided using the asyncEnqueuTo method on the
	// plugin, but must only do so if there can only be a bounded 
	// number of such events queued; we use it for scenario discovery only.
	context emitterContext := context("MemoryStore_emitter");
	context asyncForwarding := context("MemoryStore_forwarder");
	context mainContext := context.current();

	action onload()
	{
		spawn asyncForwarder() to asyncForwarding;
		integer id:=integer.getUnique();
		route GetAllConfiguration(id);
		AllConfiguration allConfig;
		on AllConfiguration(requestId = id):allConfig {
			startup(allConfig.defaultConfig, allConfig.configurations);
		}
	}

	event RequestInstancesHandler {
		import "MemoryStorePlugin" as plugin;
		RequestInstancesInternal scenRequestInstances;
		ScenarioServiceUpdaterMultipleInstances updater;
		action<string, RequestInstancesInternal, ScenarioServiceUpdaterMultipleInstances> handleRequestInstances;
		context emitterContext;

		action onConfig() {
			sequence<string> names := ["", ""];
			plugin.decodeScenarioName(scenRequestInstances.scenarioId, names);
			string storeName := names[0], tableName := names[1];

			Storage storage:=new Storage;
			if storage.hasStore(storeName) then
			{
				Store store := storage.open(storeName);
				if store.hasTable(tableName) then
				{
					if updater.base.sendAny then
					{
						if plugin.exposingViews(tableName,storeName,isMemory(scenRequestInstances.scenarioId)) then {
							spawn spawnTarget() to emitterContext;
							plugin.sendScenarioInstancesFor(tableName,storeName,isMemory(scenRequestInstances.scenarioId),scenRequestInstances.messageId);
						} else {
							route com.apama.scenario.RequestInstancesDone(scenRequestInstances.scenarioId, scenRequestInstances.messageId);
						}
					} else {
						route com.apama.scenario.RequestInstancesDone(scenRequestInstances.scenarioId, scenRequestInstances.messageId);
					}
				}
			}
			updater.destroy();
		}
		action spawnTarget() {
			handleRequestInstances(scenRequestInstances.scenarioId, scenRequestInstances, updater);
		}

		action isMemory(string name) returns boolean
		{
			string MEMORYSTORE_SCENARIO_MEMORY_SUFFIX := "_memory";
			integer index := name.find(MEMORYSTORE_SCENARIO_MEMORY_SUFFIX);
			return index > 0;
		}
	}

	event InvalidRequestHandler {
		ScenarioServiceUpdaterMultipleInstances updater;
		integer messageId;
		integer scenarioInstanceId;

		action handle(string scenarioId, integer messageId, integer scenarioInstanceId) {
			self.messageId := messageId;
			self.scenarioInstanceId := scenarioInstanceId;
			updater.init_cb(scenarioId, context.current(), onConfig);
		}

		action onConfig() {
			updater.emitNack(messageId, scenarioInstanceId);
			updater.destroy();
		}
	}
	
	action startup(dictionary<string, string> defaultConfig, dictionary<string, dictionary<string, string> > configurations) {
		spawn handleNewScenarios(defaultConfig, configurations) to emitterContext;

		//setup listener to listen for discovery
		on all StartScenarioRecovery()
		{
			doingRecovery := true;
			chunk c := plugin.prepareScenariosSnapshot2();
			integer count := plugin.ScenarioChunk_count(c);
			integer i := 0;		
			while i < count
			{
				recoveryResponse.scenarioId := plugin.ScenarioChunk_getId(c,i);
				recoveryResponse.displayName := plugin.ScenarioChunk_getName(c,i);
				recoveryResponse.description := plugin.ScenarioChunk_getDescription(c,i);
				recoveryResponse.outputNames := [];
				integer numFields := plugin.ScenarioChunk_getFieldsLength(c,i);
				integer j := 0;
				while j < numFields
				{
					recoveryResponse.outputNames.append(plugin.ScenarioChunk_getField(c,i,j));
					j := j + 1;
				}
				recoveryResponse.outputTypes := [];
				integer numTypes := plugin.ScenarioChunk_getTypesLength(c,i);
				j := 0;
				while j < numTypes
				{
					recoveryResponse.outputTypes.append(plugin.ScenarioChunk_getType(c,i,j));
					j := j + 1;
				}
				i := i + 1;
				recoveryResponse.extraParams := {"isReadOnly":"true", "type":"dataview"};
				route recoveryResponse;
			}

		}
		on all completed StartScenarioRecovery() {
			doingRecovery := false;
		}

		// initialisation - send all scenarios to the emitter context, spawn for each scenario

		plugin.setEmitContext(emitterContext.getId());

		{
			chunk c := plugin.prepareScenariosSnapshot2();
			integer count := plugin.ScenarioChunk_count(c);
			integer i := 0;		

			while i < count
			{
				spawn handleScenario(plugin.ScenarioChunk_getId(c,i)) to emitterContext;
				i := i + 1;
			}
		}

		// forward scenario service requests:
		ConfigureUpdates configUpdate;
		on all ConfigureUpdates():configUpdate {
			send configUpdate to emitterContext;
		}
		RequestInstancesInternal scenRequestInstances;
		on all RequestInstancesInternal(scenarioId in (MEMORYSTORE_SCENARIO_PREFIX : PREFIX_UPPER)):scenRequestInstances
		{
			ScenarioServiceUpdaterMultipleInstances updater := new ScenarioServiceUpdaterMultipleInstances;
			RequestInstancesHandler handler := RequestInstancesHandler(scenRequestInstances, updater, handleRequestInstances, emitterContext);
			updater.init_cb(scenRequestInstances.scenarioId, context.current(), handler.onConfig);
		}
		Create scenCreate;
		on all Create(scenarioId in (MEMORYSTORE_SCENARIO_PREFIX : PREFIX_UPPER)):scenCreate
		{
			InvalidRequestHandler handler:=new InvalidRequestHandler;
			handler.handle(scenCreate.scenarioId, scenCreate.messageId, -1);
		}

		Delete scenDel;
		on all Delete(scenarioId  in (MEMORYSTORE_SCENARIO_PREFIX : PREFIX_UPPER)):scenDel
		{
			InvalidRequestHandler handler:=new InvalidRequestHandler;
			handler.handle(scenDel.scenarioId, scenDel.messageId, scenDel.scenarioInstanceId);
		}

		Edit scenEdit;
		on all Edit(scenarioId in (MEMORYSTORE_SCENARIO_PREFIX : PREFIX_UPPER)):scenEdit
		{
			InvalidRequestHandler handler:=new InvalidRequestHandler;
			handler.handle(scenEdit.scenarioId, scenEdit.messageId, scenEdit.scenarioInstanceId);
		}
		ForwardMemoryStoreUpdatesTo f;
		on all ForwardMemoryStoreUpdatesTo():f {
			spawn forwardUpdatesTo(f.ctx) to emitterContext;
		}
	}

	action handleNewScenarios(dictionary <string,string> defaultConfig, dictionary <string, dictionary<string,string> > configurations) {

		Scenario scenario;
		on all unmatched Scenario(scenarioId in (MEMORYSTORE_SCENARIO_PREFIX : PREFIX_UPPER)):scenario
		{
			send scenario to "com.apama.scenario";
			spawn handleScenario(scenario.scenarioId);
		}
		ScenarioServiceLibrary lib:= new ScenarioServiceLibrary;
		lib.configurationManager(defaultConfig, configurations);
	}
	


	action handleScenario(string scenarioId) {
		on all Scenario(scenarioId = scenarioId) {}

		ScenarioServiceUpdaterMultipleInstances updater := new ScenarioServiceUpdaterMultipleInstances;
		updater.init(scenarioId, asyncForwarding);
		updater.emitReceivedEvents();
	}

	action handleRequestInstances(string scenarioId, RequestInstancesInternal scenRequestInstances, ScenarioServiceUpdaterMultipleInstances updater) {
		Instance scenInstance;
		on all Instance(scenarioId = scenarioId, messageId = scenRequestInstances.messageId):scenInstance and 
			not RequestInstancesDone(scenarioId = scenarioId, messageId = scenRequestInstances.messageId) {
			updater.emitReceivedInstance(scenRequestInstances, scenInstance);
		}
		RequestInstancesDone rid;
		on all RequestInstancesDone(scenarioId = scenarioId, messageId = scenRequestInstances.messageId):rid {
			integer _ := plugin.asyncEnqueueTo(rid.toString(), mainContext.getId()); // doesn't matter when it completes
			die;
		}
	}

	action asyncForwarder() {
		Instance i;
		on all Instance():i {
			integer _:=plugin.asyncEnqueueTo(i.toString(), mainContext.getId());
		}
		RequestInstancesDone rid;
		on all RequestInstancesDone():rid {
			integer _:=plugin.asyncEnqueueTo(rid.toString(), mainContext.getId());
		}
	}

	action forwardUpdatesTo(context ctx) {
		Update u;
		on all Update(scenarioId in (MEMORYSTORE_SCENARIO_PREFIX : PREFIX_UPPER)):u {
			integer _:=plugin.asyncEnqueueTo(u.toString(), ctx.getId());
		}
	}
}

 00000045 C:\SoftwareAG\Apama\monitors\data_storage\MemoryStoreScenarioImpl.mon
MONF 00000286 //*****************************************************************************
// Title:         SensorEvent
// Description:   An event type for the sensor data and the timestamp in seconds.
// Author:        Software AG
//
//*****************************************************************************

package com.softwareag.saep;

event SensorEvent {
	integer sensorId;
	integer timeStamp;
	integer x;
	integer y;
	integer z;
	integer velocity;
	integer acceleration;
	integer velocityX;
	integer velocityY;
	integer velocityZ;
	integer accelerationX;
	integer accelerationY;
	integer accelerationZ;
	float seconds;
} 00000046 C:\Users\istmapara\workspace910\task1\eventdefinitions\SensorEvent.mon
MONF 00000231 //*****************************************************************************
// Title:         VelocityEvent
// Description:   VelocityEvent description
// Dependencies:  None
// Author:        istmapara
//
//*****************************************************************************

package com.softwareag.saep;


//event PlayerVelocity {
//	integer playerId;
//	string playerName;
//	float timestamp;
//	string intensity;
//	float speed;
//	float distance;
//	
//}

event PlayerVelocity {
integer playerId;
integer velocity;

} 00000048 C:\Users\istmapara\workspace910\task1\eventdefinitions\VelocityEvent.mon
MONF 000008b1 //*****************************************************************************
// Title:         VelocityMonitor
// Description:   VelocityMonitor description
// Dependencies:  None
// Author:        istmapara
//
//*****************************************************************************
package com.softwareag.saep;
using com.apama.aggregates.mean;

monitor VelocityMonitor {
	dictionary<integer, integer> sensorPlayer := {4:0,8:0,10:0,12:0,
		13:1,14:1,97:1,98:1, 47:2,16:2, 49:3,88:3, 19:4,52:4, 
		53:5,54:5, 23:6,24:6, 57:7,58:7, 59:8,28:8, 61:9,62:9,99:9,100:9,
		63:10,64:10,65:11,66:11, 67:12,68:12, 69:13,38:13, 71:14,40:14,
		73:15,74:15,75:16,44:16,105:17,106:17
	}; 
	dictionary<integer, string> playerNameDict := {0:"Ball",
		1:"Nick Gertje", 2:"Dennis Dotterweich", 3:"Niklas Walzlein",
		4:"Wili Sommer",5:"Philipp Harlass", 6:"Roman Hartleb", 
		7:"Erik Engelhardt", 8:"Sandro Schneider", 9:"Leon Krapf",
		10:"Kevin Baer",11:"Luca Ziegler", 12:"Ben Mueller", 13:"Vale Reitstetter",
		14:"Christopher Lee",15:"Leon Heinze",16:"Leo Langhans",17:"Referee"
	}; 
	action onload() {
		SensorEvent s1;
		on all SensorEvent(): s1{
			integer sensorId := s1.sensorId;
			integer playerId := sensorPlayer[sensorId];
			string playerName := playerNameDict[playerId];
			send PlayerVelocity(playerId, s1.velocity) to "";
		}
		
		PlayerVelocity playerV;
		on all PlayerVelocity() : playerV {
			log playerV.toString() at INFO;
		}
			
			float avg;
			from v in all PlayerVelocity(playerId = 0)
			  within 5.0
			  select mean(v.velocity.toFloat()) : avg {
				log "Avg for player 0" + " : " + avg.toString() at INFO;
			}
			
			from v in all PlayerVelocity(playerId = 5)
			  within 5.0
			  select mean(v.velocity.toFloat()) : avg {
				log "Avg for player 5" + " : " + avg.toString() at INFO;
			}
			
		//Mauro: 	Die Funktion muss für jede SpielerId für jedes Zeitfenster aufgerufen werden.
		//			within 5.0 every 5.0 funktioniert leider nich nicht. Ich denke das liegt 
		//			daran das wir zu wenige Daten haben.
		//			Ich denke der rest (die einordnung in die verschiedenen Klassen stehen, ..., rennen
		//			erfolgt direkt im dashboard.

	}
} 00000042 C:\Users\istmapara\workspace910\task1\monitors\VelocityMonitor.mon
MONF 0000036f //*****************************************************************************
// Title:         RawEvent
// Description:   An event type for the raw sensor data.
// Author:        Software AG
//
//*****************************************************************************

package com.softwareag.saep;

event RawEvent {
	integer sensorId;
	integer timeStamp;
	integer x;
	integer y;
	integer z;
	integer velocity;
	integer acceleration;
	integer velocityX;
	integer velocityY;
	integer velocityZ;
	integer accelerationX;
	integer accelerationY;
	integer accelerationZ;
	
	action getSourceTime() returns float {
		string sec := "0.0";
		integer length := timeStamp.toString().length();
		if (length > 4) then {
			sec := timeStamp.toString().substring(0, 5) + "." + timeStamp.toString().substring(5, length);
		}
		return sec.toFloat();
	}

} 00000043 C:\Users\istmapara\workspace910\task1\eventdefinitions\RawEvent.mon
MONF 000001cf //*****************************************************************************
// Title:         Counter
// Description:   Counts sensor events
// Author:        Software AG
//
//*****************************************************************************

package com.softwareag.saep;

event Counter {
	integer count;
}

event SensorCounter {
	integer sensorId;
	integer count;
}

event PlayerCounter {
	integer playerId;
	integer count;
} 00000047 C:\Users\istmapara\workspace910\task1\eventdefinitions\CounterEvent.mon
MONF 000002e0 //*****************************************************************************
// Title:         RawMonitor
// Description:   Creates a SensorEvent from each RawEvent.
// Dependencies:  Event type definitions
// Author:        Software AG
//
//*****************************************************************************

package com.softwareag.saep;

monitor RawMonitor {
	action onload() {
		RawEvent raw;
		on all RawEvent() : raw {
			route SensorEvent(raw.sensorId, raw.timeStamp, raw.x, raw.y, raw.z, 
			                  raw.velocity, raw.acceleration, raw.velocityX, raw.velocityY, raw.velocityZ, 
			                  raw.accelerationX, raw.accelerationY, raw.accelerationZ, raw.getSourceTime());
		}
	}
} 0000003d C:\Users\istmapara\workspace910\task1\monitors\RawMonitor.mon
MONF 00000379 //*****************************************************************************
// Title:         SensorMonitor
// Description:   Loga all SensorEvents. This is the starting point for the application logic.
// Dependencies:  Event type definitions and RawMonitor.mon
// Author:        Software AG
//
//*****************************************************************************

package com.softwareag.saep;
using com.apama.correlator.timeformat.TimeFormat;

monitor SensorMonitor {
	TimeFormat timeFormat;
	action onload() {
		SensorEvent sensor;
		on all SensorEvent() : sensor {
			log sensor.toString() + 
				", seconds: " + timeFormat.format(sensor.seconds, "HH:mm:ss,SSS") + 
				", event time: " + sensor.getTime().toString() + 
				", micro time: " + timeFormat.getMicroTime().toString()
			at INFO;
			//com.apama.queries
			send sensor to "";
		}
	}
} 00000040 C:\Users\istmapara\workspace910\task1\monitors\SensorMonitor.mon
MONI 0001426a /* Package as specified by the .qry */
package com.softwareag.saep; 
/* Private using declarations required by framework */
using com.apama.queries.__Index;
using com.apama.queries.__LatestEvent;
using com.apama.queries.__Respawn;
using com.apama.queries.__RestartQueryTimer;
using com.apama.queries.__Trigger;
using com.apama.queries.__TS;

/* Private using declarations required by framework to interact with QueryServices.mon */
using com.apama.queries.__ContextMgr;
using com.apama.queries.__DistributionMgr;
using com.apama.queries.__FailedQueryInstance;
using com.apama.queries.__HubContextRequest;
using com.apama.queries.__HubContextRemove;
using com.apama.queries.__PendingTimersMgr;
using com.apama.queries.__PrepareStore;
using com.apama.queries.__QueryLoaded;
using com.apama.queries.__QueryLogger;
using com.apama.queries.__QueryReady;
using com.apama.queries.__QueryScenarioService;
using com.apama.queries.__RemoveInstance;
using com.apama.queries.__StoredEventWindow;
using com.apama.queries.__StorePrepared;
using com.apama.queries.__StoredSnapshot;
using com.apama.queries.__TerminationMgr;
using com.apama.queries.__WorkerContextSet;
using com.apama.queries.__WindowLength;
using com.apama.queries.__WindowManager;
using com.apama.queries.__WindowManagerTableUsageChanged;

/* Using declarations explicitly specified in the .qry */
using com.apama.aggregates.count; 

/**
 * Monitor controlling query Groups.
 */
monitor Groups { 

	/** General internal events */
	event __NullType {
	}

	/** The set of worker contexts */
	__WorkerContextSet workers;
	
	/** The index of the current worker context */
	integer index;

	/* Flag for whether or not (and how) to respawn after ondie is triggered */
	boolean shouldRespawn := false;
	boolean shouldTerminateWorkers := false;
	boolean deleted := false; // has been deleted

	/* Number of instances of the query. Used to limit non-parameterized queries to a single instance */
	integer instanceCount := 0;
	
	/* TerminationManager used to shutdown workers */
	__TerminationMgr terminationMgr;

	/** Set of pending input window preparations
	 */	
	dictionary<integer, integer> pendingPreparations;

	/** The MemoryStore Store used to hold each event window */
	com.apama.memorystore.Store store;

	/** A __DistributionMgr for each input type */
	__DistributionMgr dist_com$softwareag$saep$SensorEvent;
	__DistributionMgr dist___RestartQueryTimer;
	/** Manager for processPending timers */
	__PendingTimersMgr timerMgr;

	/** Flag to inidicate where any input source times are used */
	boolean anyHaveSourceTimestamps;

	/** Used to interact with the Scenario Service monitor which is stuck in the past i.e. the main context */
	context scenarioServiceCtx;
	context mainCtx;
	// @see HubContextManager
	context hubCtx;
	context statsGatherer;
	boolean isMasterMonitor;
	boolean isInstanceProxy;
	boolean initialised;
	boolean createdAtStartup; // see initCommon
	integer qryId;
	string parameterizationOwner;

	/** Query scenario service event */
	__QueryScenarioService queryScenarioService;
	__QueryLogger qLogger;

	string queryDefinitionName := queryScenarioService.QUERY_PREFIX + "com.softwareag.saep.Groups";


	/**
	 * A per-matchset event. 
	 *
	 * Contains a potential matching set of events and any other state
	 * needed to evaluate the pattern.
	 * MatchSets are owned by a parent (either another MatchSet or the
	 * EvaluationState
	 */
	event __MatchSet {	
		///// state corresponding to the pattern:

		// coassigned (positive) events:
		wildcard SensorEvent csnmt_s1 ;

		// flags to record which coassignments we have:
		wildcard boolean has_s1;
		// flags to record which coassignments we have previously triggered:
		wildcard integer triggered_s1;
		
		// timestamps of the events
		wildcard float timestamp_s1;

		// per-followedby node - which way is it looking?


		// per-without sets of the event - only holds those where we
		// don't yet know whether the 'where' condition holds.
		
		///// state corresponding to the evaluation state:
		integer id;
		action init() {
			id := integer.getUnique();
		}

		// The effective timestamp for when this match occurred
		action mostRecentTime() returns float {
			float t := -float.INFINITY;

			if (timestamp_s1 > t) then {
				t := timestamp_s1;
			}

			return t;
		}

		// we maintain an ordered linked list of matchsets, the most recent first
		// this is managed by EvaluationState.addNewMatchsetAfter and 
		// EvaluationState.discard
		integer next;
		integer prev;

		// count of how many instances of the 'current' event this matchset contains:
		integer containsCurrent;
	}


	event __SelectOutput {
		wildcard integer sensorCount;
		/**
		 * Simulates the 'having' clause from a query. The having expression is fed into __having in the select clause, and then
		 * interrogated before the find action is triggered. We do this in preference to using an actual 'having' clause to avoid obscure
		 * error message bugs.
		 */
		boolean __having;
	}
	event __DelayedOutOfOrderTime {
		float maxInputEventTimestamp;
		float correlatorTimeBecomesDefinitive;
	}

    	/** Utility event containing all user-defined parameters, expressions and query actions*/
	event __ElasticQueryUserCode {

		/* Only copy of query parameters */


		wildcard integer sensorId; 


		/** Return the user-specified duration; the evaluation of either an EPL float expression or a time literal */
		action __getWithin_com$softwareag$saep$SensorEvent() returns float {
			return  5.0;   
		}


		/* User code that gets invoked when the pattern is matched 
		 * Takes coassignments into its scope as arguments, and parameters/keys as members on self.
		 */
		action __findAction(integer sensorCount ) {

			/**
			 * Brackets for extra scoping goodness; we want the user to be able to declare
			 * variables that mask arguments to this action i.e. coassignments
			 */
			{
{
			send SensorCounter(sensorId, sensorCount) to "";
		}				 
			}
		}

		action __processAggregates(sequence<__MatchSet> __matchSets) {
			integer __toRetain := __matchSets.size();
			integer __id := integer.getUnique();
			stream<__MatchSet> __mstr := from idx in all __Index(id=__id) retain __toRetain select __matchSets[idx.idx];
			// while these are not used (and should not be used), they are
			// here to help the completion proposals.  Actual use of them in
			// the projection is via the __ms prefix.

			SensorEvent s1;

			__SelectOutput __output;
			listener  __sstr := from __ms in __mstr retain __toRetain from __t in all __Trigger(__id)
				/** Force this to be an aggregate query so that a query with a non-aggregate-ey select clause gets flagged as an error */
				having true
				select __SelectOutput(count() 
		, 			true
				)
				:__output
			{
				__mstr.quit();
				__sstr.quit();
				if(__output.__having) then {
					try{
						__findAction(__output.sensorCount);
					} catch(com.apama.exceptions.Exception __e) {
						 
						__qLogger.instanceLog("Pattern action threw exception"
							+ ": " + __e.getType() + " - " + __e.getMessage(), "WARN", false); 

					}
				}
			}
			integer __i:=0;
			while(__i < __matchSets.size()) {
				route __Index(__id, __i);
				__i := __i+1;
			}
			route __Trigger(__id);
		} 





		/* Parameterized query logger */
		__QueryLogger __qLogger;

		/* Pattern event listener(s) */

		action<action<string, boolean, float>, integer, com.softwareag.saep.SensorEvent> __handle_com$softwareag$saep$SensorEvent;


		/** __WindowManager._listenFor_cb */
		action __listenFor_com$softwareag$saep$SensorEvent(action<string, boolean, float> __onEvent, action<string, string, boolean, float> __onHeartbeat) returns sequence<listener> {
			sequence<listener> listeners := [];
			com.softwareag.saep.SensorEvent  __latest;
			listener l := on all com.softwareag.saep.SensorEvent(): __latest { 
				__handle_com$softwareag$saep$SensorEvent(__onEvent, 10, __latest);
			}
			listeners.append(l);
			return listeners;

		}
		/* Template listener - not kept live, just used to serialise the templateArgs.  */
		action __startListener_com$softwareag$saep$SensorEvent() returns listener {
			com.softwareag.saep.SensorEvent  __latest;
			listener __l := on com.softwareag.saep.SensorEvent(): __latest { 
			}
			return __l;
		}


		/* Get time in seconds*/
		action __calculateTime(string day, string hour, string min, string sec, string msec) returns float {
			float value := __parseToFloat(day)*86400000.000 + 
			               __parseToFloat(hour)*3600000.000 + 
			               __parseToFloat(min)*60000.000 + 
			               __parseToFloat(sec)*1000.000 + 
			               __parseToFloat(msec);
			// round time to nearest millisecond
			return value.round().toFloat()/1000.0;
		}
	
		action __parseToFloat(string num) returns float {
			if (num = "") then {
				return 0.0;
			}
			// if hexadecimal integer then first parse into int
			if (num.length() > 2 and (num.substring(0, 2) = "0x" or num.substring(0, 2) = "0X")) then {
				return integer.parse(num).toFloat();
			} else {
				return float.parse(num);
			}
		}


	} // end of event __ElasticQueryUserCode

	__ElasticQueryUserCode __user;

	action __calculateTime(string day, string hour, string min, string sec, string msec) returns float {
		return __user.__calculateTime(day, hour, min, sec, msec);
	}

	/** Actually just proxies an onload_ call into the query hub context */
	//  @see HubContextManager
	action onload() {
		scenarioServiceCtx := context.current();
		mainCtx := context.current();
		(new __HubContextRequest).process(true, queryDefinitionName, hubCallback);
	}
	
	action hubCallback(context _hubCtx, context _statsGatherer) {
		hubCtx := _hubCtx;
		statsGatherer := _statsGatherer;
		route __QueryLoaded("com.softwareag.saep.Groups");
		// Spawn into the query hub context
		spawn onload_() to hubCtx;
	}

	/** 
	* Called when monitor is loaded.
	*/
	action onload_() {
		// Is main (parent) monitor causes termination then query scenario service is made aware
		isMasterMonitor := true;
		sequence<string> eventTypes := ["com.softwareag.saep.SensorEvent"];
		anyHaveSourceTimestamps := false;

		// Set necessary query scenario service support event query information
		queryScenarioService.init(
			"com.softwareag.saep.Groups",
			queryDefinitionName,
			false,
			false,
			createParameterizedQueryInstance,
			updateUserParameters,
			prepareParameterizedQueryInstanceFinish,
			scenarioServiceCtx,
			hubCtx,
			statsGatherer,
			eventTypes,
			getMetadataMap()
		);

		qLogger := queryScenarioService.getLogger();

		// Create a __TerminationMgr for the master, - in case an unparameterized query fails
		(new __TerminationMgr).init(terminateWorker, queryDefinitionName, -1);

		// Start point of query creation
		prepareStores();
	}

	// Block handle store preparation, where certain store need to be prepared
	// before the instance is prepared - uses callback (called only once successfully
	// prepared to ensure they are triggered in the intended order.
	// Order is pending timer manager -> scenario service
	action prepareStores() {
		timerMgr.init(hubCtx, queryScenarioService.masterId, qLogger, prepareStoresCompleted);
	}

	boolean allTablePrepareSucceeded;

	action prepareStoresCompleted(boolean success, com.apama.memorystore.Table timersTable) {
		allTablePrepareSucceeded := success; // used by initWindowTable, see below
		// Store preparation listener
		integer reqId := integer.getUnique();
		__StorePrepared prepared;
		on __StorePrepared(requestId = reqId):prepared {
			/** Name of the store */
			queryScenarioService.storeName := prepared.storeName;
			if(prepared.success) then {
				timerMgr.timersTable := timersTable;
				timerMgr.startClusterMemberChangeMonitor();
				scenarioServiceStorePrepared();
			} else {
				qLogger.queryLog("Could not prepare store " + queryScenarioService.storeName + ": " + prepared.reason, "FATAL", false);
				shouldRespawn := false;
				die;
			}
		}

		// Prepare the store
		route __PrepareStore(queryScenarioService.name, reqId);
	}

	action scenarioServiceStarted() {
		// start the failed query handler
		spawn failedQueryHandler();

		// the following instances are created at startup:
		createdAtStartup := true;
		// Check to see if this unparameterized query was previously created and if so recreate with the same instance ID.
		// There should only be a single instance in the table for a non-parameterized query
		try {
			com.apama.memorystore.Iterator it:=queryScenarioService.paramTable.begin();
			if (not it.done()) then {
				// ReCreate the existing instance
				qLogger.queryLog("Recreating non-parameterized query instance", "DEBUG", false);
				queryScenarioService.routeCreate(0, "*", new sequence<string>, it.getKey().toInteger());
			} else {
				// Create a new instance
				queryScenarioService.routeCreate(0, "*", new sequence<string>, 0);
			}
		} catch(com.apama.exceptions.Exception e) {
			// fallback, possibly if no table of parameterizations:
			queryScenarioService.routeCreate(0, "*", new sequence<string>, 0);
		}
		// either way, we create a single instance; mark this as loading until the instance has started (i.e. not start JMS until it has started)
		send __QueryLoaded(queryScenarioService.name) to scenarioServiceCtx;
		send __QueryReady(queryScenarioService.name) to scenarioServiceCtx;
		integer id:=integer.getUnique();
		route __Trigger(id);
		on __Trigger(id) {
			// after we have processed Create events, any further creates are not at startup.
			createdAtStartup := false;
		}
	}

	/** Store is ready to be opened */
	action scenarioServiceStorePrepared() {
		store := (new com.apama.memorystore.Storage).open(queryScenarioService.storeName);

		// Open or create the parameterised store here.
		// Needs to be ready before ScenarioService is (ie before we have create listeners etc)
		// FIXME - Use a single table to store the parameterizations?
		__NullType n := new __NullType;
		string queryName := n.getName().substring(0,-11);
		// Table to store parameter values
		string tableName := "parameterizations_"+queryName+"_"+queryScenarioService.name;
		com.apama.memorystore.Schema schema := new com.apama.memorystore.Schema;
		schema.fields.append("scenarioId");
		schema.types.append("string");
		schema.fields.append("owner");
		schema.types.append("string");
		schema.fields.append("parameters");
		schema.types.append("string");

		// Table to store instance ID
		string eqConfigTableName := "eqConfig"; // elastic queries config table
		com.apama.memorystore.Schema eqConfigSchema := new com.apama.memorystore.Schema;
		eqConfigSchema.fields.append("integerConfig");
		eqConfigSchema.types.append("integer");
		eqConfigSchema.fields.append("stringConfig");
		eqConfigSchema.types.append("string");
		
		// Prepare the table to hold the event window
		qLogger.queryLog("Preparing table to store parameter values: " + tableName, "DEBUG", false);
		integer id2 := store.prepare(tableName, schema);
		qLogger.queryLog("Preparing table to store parameter IDs: " + eqConfigTableName, "DEBUG", false);
		integer id3 := store.prepare(eqConfigTableName, eqConfigSchema);

		com.apama.memorystore.Finished f2;
		com.apama.memorystore.Finished f3;
		on com.apama.memorystore.Finished(id=id2):f2 and
		   com.apama.memorystore.Finished(id=id3):f3 {
			if f2.success then { 
				// Open the parameterizations table
				queryScenarioService.paramTable := store.open(tableName);
				qLogger.queryLog("Successfully prepared table to store parameter values: " + tableName, "DEBUG", false);
			} else {
				qLogger.queryLog("Asynchronous MemoryStore operation (Prepare Parameterizations) failed: " + f2.toString(), "FATAL", false);
			}

			if f3.success then { 
				queryScenarioService.eqConfigTable := store.open(eqConfigTableName);
				qLogger.queryLog("Successfully prepared table to store parameter IDs: " + eqConfigTableName, "DEBUG", false);
			} else {
				qLogger.queryLog("Asynchronous MemoryStore operation (Prepare eqConfig table) failed: " + f3.toString(), "FATAL", false);
			}
			allTablePrepareSucceeded := allTablePrepareSucceeded and f2.success and f3.success;

			try {
				// Subscribe to the table notifications
				integer notificationId := queryScenarioService.paramTable.subscribeRowChanged();
				queryScenarioService.supportsRowNotifications := true;
			} catch (com.apama.exceptions.Exception e) {
				qLogger.queryLog("MemoryStore driver doesn't support RowChanged notifications.", "INFO", false);
				queryScenarioService.supportsRowNotifications := false;
			}
			
			if (queryScenarioService.supportsRowNotifications) then {
				com.apama.memorystore.RowChanged rc;
				on all com.apama.memorystore.RowChanged(storeName  = queryScenarioService.storeName,
				                                        tableName  = tableName,
				                                        changeType = com.apama.memorystore.RowChanged.INSERT):rc {
					qLogger.queryLog("Received RowChanged::" + rc.getChangeTypeString() + " event: key=" + rc.key 
						+ ": " + rc.oldFieldValues.toString() + " -> " + rc.newFieldValues.toString(), "DEBUG", false);

					com.apama.memorystore.Row r := queryScenarioService.paramTable.get(rc.key);
					string sid := r.getString("scenarioId");
					string s1 := r.getString("parameters");
					sequence<string> seq := sequence<string>.parse(s1);
					
					// (Re)Create the instance - this correlator might have created this instance in which case we 
					// shouldn't do anything here.
					queryScenarioService.routeCreate(0, "*", seq, rc.key.toInteger());
				}
			}

			// start query scenario service
			queryScenarioService.start(setupScenario(), scenarioServiceStarted);
			spawn talkToScenarioService() to scenarioServiceCtx; // Ensure correct communication with scenario service
		}

	}

	string sharedId;

	action initWindowTable(action<> callbackComplete) {
		
		string oldSharedId := sharedId;
		dictionary<string, boolean> allSharedIds_and_hasSourceTime := {sharedId_com$softwareag$saep$SensorEvent:false};
		sequence<string> allSharedIds_and_hasSourceTime_keys := allSharedIds_and_hasSourceTime.keys();
		allSharedIds_and_hasSourceTime_keys.sort();
		sequence<string> allSharedIds := new sequence<string>;
		sequence<boolean> hasSourceTime := new sequence<boolean>;
		dictionary<string,string> sharedIdToHeartbeatType := {
			sharedId_com$softwareag$saep$SensorEvent : ""
			};
		string sharedId_key;
		for sharedId_key in allSharedIds_and_hasSourceTime_keys {
			allSharedIds.append(sharedId_key);
			hasSourceTime.append(allSharedIds_and_hasSourceTime[sharedId_key]);
		}

		sharedId := allSharedIds.toString();
		if oldSharedId = sharedId then {
			return;
		}
		string tableName := windowManager_com$softwareag$saep$SensorEvent.getTableName(allSharedIds);
		com.apama.memorystore.Schema schema := new com.apama.memorystore.Schema;
		string s;
		integer i:=0;
		dictionary<string, string> heartbeatsAdded := {};
		for s in allSharedIds {
			schema.fields.append("contents_"+s);
			schema.types.append("string");
			schema.fields.append("timestamps_"+s);
			schema.types.append("string");
			if(hasSourceTime[i]) then {
				schema.fields.append("srctimes_"+s);
				schema.types.append("string");
			}
			string heartbeat := sharedIdToHeartbeatType[s];
			if(heartbeat != "" and not heartbeatsAdded.hasKey(heartbeat)) then {
				schema.fields.append("heartbeatTime_"+heartbeat);
				schema.types.append("string");
				heartbeatsAdded[heartbeat] := heartbeat;
			}
			i:=i+1;
		}
		if(anyHaveSourceTimestamps) then {
			schema.fields.append("evalTime");
			schema.types.append("float");
		}
		// Prepare the table to hold the event window
		qLogger.instanceLog("Preparing table to store window contents: " + tableName, "DEBUG", false);
		integer id := store.prepare(tableName, schema);
		pendingPreparations.add(id,id);
		com.apama.memorystore.Finished f;
		on com.apama.memorystore.Finished(id=id):f {
			allTablePrepareSucceeded := allTablePrepareSucceeded and f.success;
			if f.success then {
				qLogger.instanceLog("Successfully prepared table to store window contents: " + tableName, "DEBUG", false);
			} else {
				qLogger.instanceLog("Asynchronous MemoryStore operation (Prepare window table data) failed: " + f.toString(), "FATAL", false);
			}
			if not allTablePrepareSucceeded then {
				if haveCreateParameterizedCompletedCallback then {
					try {
						// has to go into created state before we can move it into the failed state:
						createParameterizedCompletedCallback();
					} catch(com.apama.exceptions.Exception e) {
						// wil fail to update param table if it is not open, that's fine..
					}
				}
				shouldRespawn := false;
				die;
			}
			prepareFinished(true, id, callbackComplete);
		}
	}




	/** 
	 * Spawned to create a monitor that handles routing scenario service events.
	 */
	action talkToScenarioService() {
		isMasterMonitor := false; // the talkToScenarioService monitor is neither master nor an instance proxy:
		queryScenarioService.talkToScenarioService();
	}	

	/** 
	 * Spawned to create a monitor that handles instance proxies that enter the failed state.
	 */
	action failedQueryHandler() {
		isMasterMonitor := false; // the failedQueryHandler monitor is neither master nor an instance proxy:
		queryScenarioService.failedQueryHandler();
	}	

	/* Supplementary query scenario service actions block */


	/* Callback used to setup query scenario service. */
	action setupScenario() returns dictionary<string, sequence<string> > {
		dictionary<string, sequence<string> > s := new dictionary<string, sequence<string> >;
		// Handle request for Scenario data
		s["inputNames"] := [
		];
		s["inputTypes"] := [
		];
		s["inputDefaults"] := [
		];
		
		return s;
	}

	//End of supplementary query scenario service actions block

	boolean haveCreateParameterizedCompletedCallback;
	action<> createParameterizedCompletedCallback;

	/**
	* Run in the instance proxy on receipt of a request to create a new parameterized query instance. 
	* Sets specified parameter values and instance ID before creating tables for this parameterization,
	* spawning a worker to each context, and initializing a distributor.
	* Note we only request distributors if any parameterizations exist. (though of course at most one of
	* them will be 'live' at any one time -see __DistributionMgr)
	* Exception may be thrown from updateUserParameters and initCommon (to be caught by queryScenarioService) if value 
	* field sizes do not match, is parsing fails or if values used to evaluate expressions result in exceptions.
	*/
	action createParameterizedQueryInstance(sequence<string> parameterValues, string owner, action<> completedCallback) {
		//Set this to false so that any failures after spawning will not interpreted as being from the main monitor
		isMasterMonitor := false;
		isInstanceProxy := true;
		parameterizationOwner := owner;
		qLogger := queryScenarioService.getLogger(); // ensures the instance logger is using the correct Id
		updateUserParameters(parameterValues, true, true, initCommon);

		// Create an action and listener list for the chain of initialisation actions
		// Create a __TerminationMgr for the instance proxy, - in case the instance should terminate
		(new __TerminationMgr).init(terminateWorker, queryDefinitionName, queryScenarioService.instancePxyId);
		createParameterizedCompletedCallback := completedCallback;
		haveCreateParameterizedCompletedCallback := true;

		// Set necessary __PendingTimersMgr information
		timerMgr.setInstance(queryScenarioService.instancePxyId);
	}


	/**
	* Callback used to log the a request has been made to delete this parameterized instance.
	* Also ensure that this does not trigger a respawn upon termination.
	*/
	action prepareParameterizedQueryInstanceFinish(boolean logDeath) {	
		if logDeath then {
			if isInstanceProxy then {
				qLogger.instanceLog("Deleting instance", "INFO", false);
			} 
		}
		shouldRespawn := false;
		if isInstanceProxy and (not deleted) and initialised then {
			route __WindowManagerTableUsageChanged(-1, [sharedId_com$softwareag$saep$SensorEvent]);
		}
		deleted := true;
	}

	/**
	* Called immediately upon receiving query scenario service create or edit event. 
	* Exception will be thrown (to be caught by queryScenarioService) if value field sizes do not 
	* match, is parsing fails or if any of the within/retains expressions, within filters or waits
	* are invalid (syntacically or <= 0) - no try-catch blocks are used as queryScenarioService
	* caller will log error/stacktrace as appropriate.
	*/
	action updateUserParameters(sequence<string> parameterValues, boolean validate, boolean calledByCreate, action<> completeCallback) {
		if validate then {
			queryScenarioService.checkSizeOfParameters(parameterValues, calledByCreate);
		}
		sequence<string> old_sharedIds := [sharedId_com$softwareag$saep$SensorEvent];

		/** Sets "const" parameters used to reset locally mutable parameter variables, by 
		* parsing each parameter into __user (needed prior to (eg) _within_ initialisation).
		* Henceforth use the canonical form of the parameters (having been parsed).
		* Also handles update of query services' sequence of parameter values.
		*/
		sequence <string> paramValues := [];
		queryScenarioService.updateParameterValues(paramValues);

		if validate then {
			/* Expressions are validated here - exception can be thrown out of each catch-block, which will be caught by queryScenarioService */
			{
				queryScenarioService.validatingExpr("within clause \"5.0\" for input com$softwareag$saep$SensorEvent");
				float v := __user.__getWithin_com$softwareag$saep$SensorEvent();
				if v  <=  0.0 then {
					qLogger.requestFailed(calledByCreate, "Invalid within clause \"5.0\" (duration = " + v.toString() + ") for input com$softwareag$saep$SensorEvent. Cannot be less than or equal to zero.", getParametersString());
					queryScenarioService.failValidation(); 
				}
			} 

			initWindow_com$softwareag$saep$SensorEvent();

			initWindowTable(completeCallback);

			prepareFinished(false, 0, completeCallback); // may well not have any tables to prepare
		} else {
			if not isInstanceProxy then {
				if not calledByCreate then {
					 
					within_com$softwareag$saep$SensorEvent := __user.__getWithin_com$softwareag$saep$SensorEvent();  
					initWaits();
					initWithinFilters();
				}

				generateSharedId_com$softwareag$saep$SensorEvent();

				completeCallback();

				if not calledByCreate then {
					// must terminate the window managers before re-spawning
					windowManager_com$softwareag$saep$SensorEvent.terminate();
					// for the window manager's benefit, we handle Edit re-spawning and dieing - but we re-spawn from this mThread, and not via the respawn interface
					spawn workerMain(); // skip re-spawning the respawnListener, the old one should still be active.
					shouldRespawn := false;
					die;
				}
			} else {
				completeCallback();
			}

		}
		if isInstanceProxy then {
			route __WindowManagerTableUsageChanged(+1, [sharedId_com$softwareag$saep$SensorEvent]);
			if initialised then {
				route __WindowManagerTableUsageChanged(-1, old_sharedIds);
			}
		}
	}

	action getParametersString() returns string {
		return queryScenarioService.getParametersString(queryScenarioService.parameterValues, false);
	}


	/** 
	 * Called when any preparation has finished - will call initCommon if all preparations complete
	 */
	action prepareFinished(boolean removeId, integer id, action<> callbackComplete) {
		if removeId then {
			pendingPreparations.remove(id);
		}
		if pendingPreparations.size() = 0 then {
			callbackComplete();
		}
	}


 	/** 
	 * Called from the factory instance, when any tables have been prepared.  Only runs if no preparations left.
	 * Sets up the framework for handling multiple contexts. 
	 */
	action initCommon() {
		initWaits();
		initWithinFilters();
		initialised := true;
		if createdAtStartup then {
			// if this was created during startup, this is
			// either a non-parameterized instance or a
			// parameterized instance on a cluster, we are
			// only ready now:
			send __QueryReady(queryScenarioService.name) to scenarioServiceCtx;
		}

		// Handle changes to the set of worker-contexts  - causes workers to be spawned
		(new __ContextMgr).init( onNewContexts );

		// Initialise each __DistributionMgr  
		dist_com$softwareag$saep$SensorEvent.init(com.softwareag.saep.SensorEvent.getName(), distribute_com$softwareag$saep$SensorEvent);
		dist___RestartQueryTimer.init(__RestartQueryTimer.getName(), distribute___RestartQueryTimer);
		if haveCreateParameterizedCompletedCallback then {
			createParameterizedCompletedCallback();
		}

	}

	/** Executed before this instance dies. */
  	action ondie() {
  		// Clean-up!
		// If other queries share these event inputs, and if this query is currently
		// in charge of distribution, then a new distributor needs electing
		dist_com$softwareag$saep$SensorEvent.terminate();
		dist___RestartQueryTimer.terminate();		
		windowManager_com$softwareag$saep$SensorEvent.terminate();
		if isInstanceProxy and not deleted then {
			route __FailedQueryInstance(queryScenarioService.name, queryScenarioService.instancePxyId, queryScenarioService.parameterValues, parameterizationOwner);
			send __RemoveInstance(queryDefinitionName, queryScenarioService.instancePxyId) to workers.ctxs;
			if initialised then {
				route __WindowManagerTableUsageChanged(-1, [sharedId_com$softwareag$saep$SensorEvent]);
			}
		}

		if shouldTerminateWorkers then {
			log "Query log: Exception thrown when processing query, terminating all workers" at FATAL;
			send __RemoveInstance(queryDefinitionName, queryScenarioService.instancePxyId) to hubCtx;
		} else if shouldRespawn then { 
			// respawn in case aggregate function threw exception

			route __Respawn(queryScenarioService.instancePxyId); 
		}

		if not shouldTerminateWorkers then {
			// we should not lose any timer state we have, so send all 
			// state about timers to the hub context, which will
			// re-distribute it to the workers (possibly back to us, 
			// but possibly not; whatever it will do the right thing).
			timerMgr.broadcastTimers();
		}

		if isMasterMonitor then {
			// Ref-counting remove to HubContextManager
			(new __HubContextRemove).process(queryDefinitionName , mainCtx);
			// Alert query scenario service that the entire definition is gone - called once per definition.
			// Intentionally called here instead of in onunload to as to have access to the master monitor member values.
			queryScenarioService.unload();
		} else if isInstanceProxy then {
			timerMgr.removeAll();
		}
	}


	action distribute_com$softwareag$saep$SensorEvent() {
		com.softwareag.saep.SensorEvent e;
		on all com.softwareag.saep.SensorEvent(): e { 			 
			forward_com$softwareag$saep$SensorEvent(e, nextContext());
		}
	}

	action forward_com$softwareag$saep$SensorEvent(com.softwareag.saep.SensorEvent e, context ctx) {
		
	  	enqueue e to ctx;
	}

	action distribute___RestartQueryTimer() {
		__RestartQueryTimer e;
		on all __RestartQueryTimer(): e { 			 
			forward___RestartQueryTimer(e, nextContext());
		}
	}

	action forward___RestartQueryTimer(__RestartQueryTimer e, context ctx) {
		
	  	enqueue e to ctx;
	}


	 
	/** Spawned on each new worker instance */
	action newWorker() {
		isMasterMonitor := false;
		isInstanceProxy := false;


		// set up respawn listener for new worker in case of exception thrown by aggregate function
		spawn respawnListener();
		workerMain();
	}

	action workerMain() {
		qryId := integer.getUnique();

		// starts the query scenario service listeners as these are not active afer being spawned - only if we have parameters
		queryScenarioService.startWorkerListeners(context.current().getId() = workers.gc_ctx.getId());




		dictionary<string,string> sharedIdToHeartbeatType := {
			sharedId_com$softwareag$saep$SensorEvent : ""
		};

		// Set-up a listener for each event inputs
		initWindowListener_com$softwareag$saep$SensorEvent(sharedIdToHeartbeatType);
	
		// Create a __TerminationMgr for the worker instance, so that the context can be discarded 
		terminationMgr := new __TerminationMgr;
		terminationMgr.init(terminateWorker, queryDefinitionName, queryScenarioService.instancePxyId);
		
		// and restart any timers we get notified of:
		__RestartQueryTimer restartTimer;
		on all __RestartQueryTimer(queryName=queryScenarioService.name, instanceId=queryScenarioService.instancePxyId):restartTimer {
			reEvaluateInputs(restartTimer);
		}
	}


	/** respawn listener set up for every instance */
	action respawnListener() {
		on __Respawn(instanceId = queryScenarioService.instancePxyId) {
			qLogger.instanceLog("Exception thrown from aggregate function(s), respawning worker to current context", "WARN", false);

			shouldRespawn := false;
			spawn newWorker();
			die;
		}

		// Create a __TerminationMgr for the worker instance, so that the context can be discarded 
		terminationMgr := new __TerminationMgr;
		terminationMgr.init(terminateWorker, queryDefinitionName, queryScenarioService.instancePxyId);
	}


	/* All input definition and maintenance code */
	/* ========================================== */	

	/* Initialise individual event input inputs */

	/** Size of the 'within' window of com.softwareag.saep.SensorEvent */
	float within_com$softwareag$saep$SensorEvent;

	string sharedId_com$softwareag$saep$SensorEvent;
	__WindowManager windowManager_com$softwareag$saep$SensorEvent;

	action generateSharedId_com$softwareag$saep$SensorEvent() {
		// set up a listener as a template:
		listener l:=__user.__startListener_com$softwareag$saep$SensorEvent();
		sharedId_com$softwareag$saep$SensorEvent := l.serialise() + "-" + 
			"sensorId";
		l.quit();
	}

	/*
	 * Initialise the window 'com.softwareag.saep.SensorEvent' for events of type com.softwareag.saep.SensorEvent
	 */
	action initWindow_com$softwareag$saep$SensorEvent() {
		generateSharedId_com$softwareag$saep$SensorEvent();
	}

	/* Code to extract the key from the input event **/
	action __getRowKey_com$softwareag$saep$SensorEvent(com.softwareag.saep.SensorEvent e) returns string {
		sequence<string> keyFields := [];
		keyFields.append(e.sensorId.toString()); 

		/**
		 * This beautiful bit of unreachable code is designed to
		 * provoke typechecking errors for incompatibilities between
		 * the types of key elements. (and also with unique). It does
		 * this by going through all the key elements of this input's
		 * event type and trying to assign them to a dummy event of
		 * the first input, and vice versa (both directions in order
		 * to find any constant fields being used as keys) 
		 */
		if(false) then {
			com.softwareag.saep.SensorEvent specimen_e := new com.softwareag.saep.SensorEvent;
			com.softwareag.saep.SensorEvent specimen := new com.softwareag.saep.SensorEvent;
			// Split up so that we only map errors to do with the assignment itself, rather than getting the field out of the specimen
			specimen.sensorId

				:= specimen_e.sensorId; 

			// Split up so that we only map errors to do with the assignment itself, rather than getting the field out of the specimen
			specimen_e.sensorId

				:= specimen.sensorId; 


		}
		return keyFields.toString();
	}





	action handle_com$softwareag$saep$SensorEvent(action<string, boolean, float> __onEvent, integer retryCount, com.softwareag.saep.SensorEvent latest) {
		try {
			latest_com$softwareag$saep$SensorEvent := latest;
			float srcTime := currentTime;
			__onEvent( __getRowKey_com$softwareag$saep$SensorEvent( latest), false, srcTime);

		} catch (com.apama.exceptions.Exception __e) {
			if (retryCount > 0) then {
				qLogger.instanceLog("Caught exception (retries="+retryCount.toString()+") "+__e.getType()+" - "+__e.getMessage()+" - "+__e.toString()+" - "+__e.getStackTrace().toString(), "ERROR", false);
				terminationMgr.incrOutstandingRetries();
				on wait(1.0) {
					handle_com$softwareag$saep$SensorEvent(__onEvent, retryCount-1, latest);
					terminationMgr.decrOutstandingRetries();
				}
				return;
			} else {
				qLogger.instanceLog("Terminating query instance. Exception "+__e.getType()+" - "+__e.getMessage()+" - "+__e.toString(), "FATAL", false);
				shouldTerminateWorkers := true;
				die;
			}
		}
	}

	com.softwareag.saep.SensorEvent latest_com$softwareag$saep$SensorEvent;

	action initWindowListener_com$softwareag$saep$SensorEvent(dictionary<string, string> sharedIdToHeartbeatType) {
		__WindowLength length := __WindowLength(-1.0, -1, 0.0, 0.0);
		calculateWithin_com$softwareag$saep$SensorEvent();
		length.withinDuration := within_com$softwareag$saep$SensorEvent;

		__user.__handle_com$softwareag$saep$SensorEvent := handle_com$softwareag$saep$SensorEvent;
		dictionary<string, boolean> allSharedIds_and_hasSourceTime := {sharedId_com$softwareag$saep$SensorEvent:false};
		sequence<string> allSharedIds_and_hasSourceTime_keys := allSharedIds_and_hasSourceTime.keys();
		allSharedIds_and_hasSourceTime_keys.sort();
		sequence<string> allSharedIds := new sequence<string>;
		sequence<boolean> hasSourceTime := new sequence<boolean>;
		string sharedId_key;
		for sharedId_key in allSharedIds_and_hasSourceTime_keys {
			allSharedIds.append(sharedId_key);
			hasSourceTime.append(allSharedIds_and_hasSourceTime[sharedId_key]);
		}

		windowManager_com$softwareag$saep$SensorEvent.init(
			sharedId_com$softwareag$saep$SensorEvent,
			qryId,
			allSharedIds,
			length,
			__user.__listenFor_com$softwareag$saep$SensorEvent,
			calculateInputDefinitiveTime_com$softwareag$saep$SensorEvent,
			maintainWindow_com$softwareag$saep$SensorEvent,
			store,
			hubCtx,
			context.current().getId() = workers.gc_ctx.getId(),
			hasSourceTime,
			sharedIdToHeartbeatType
		);

		__StoredSnapshot ss;
		on all __StoredSnapshot(sharedId = sharedId_com$softwareag$saep$SensorEvent, managerId = windowManager_com$softwareag$saep$SensorEvent.managerId):ss {
			gotSnapshot(ss);
		}		
	}

	/** __WindowManager._calculateInputDefinitiveTime_cb */
	action calculateInputDefinitiveTime_com$softwareag$saep$SensorEvent(__StoredEventWindow sew, float maxTime, float maxWait) returns float {
		return calculateInputDefinitiveTime(sew.timestamps, sew.timestamps, getCurrentTime(maxTime, false), maxWait, 
				sew.heartbeatTime, new dictionary<string, __DelayedOutOfOrderTime>, "", false);
	}

	action maintainWindow_parse_com$softwareag$saep$SensorEvent(string str) returns sequence<com.softwareag.saep.SensorEvent> {
		return sequence<com.softwareag.saep.SensorEvent>.parse(str);
	}


	/** __WindowManager._maintainWindow_cb 
	* definitiveTime is the minimum of the definitive times of the other
	*  query inputs; this input needs to add its latest event (if addLatest
	*  is set), then calculate this input's definitive time, to obtain the
	*  new query definitive time.
	*  Returns the details of latest event to be received by the correlator
	*  (the event being processed here, i.e. latest_com$softwareag$saep$SensorEvent)
	*/

	action maintainWindow_com$softwareag$saep$SensorEvent(__StoredEventWindow sew, __WindowLength length, float minWaitTime, float maxTime, float definitiveTime, boolean addLatest, float srcTime, dictionary<string, __StoredEventWindow> windows) returns __LatestEvent {
		sequence<com.softwareag.saep.SensorEvent> seq;
		if(sew.seq_of_evts = "") then {
			seq := new sequence<com.softwareag.saep.SensorEvent>;
		} else {
			seq := maintainWindow_parse_com$softwareag$saep$SensorEvent(sew.seq_of_evts);
		}

		float srcTimeUsed := float.NAN;
		float now := getCurrentTime(maxTime, true);

		float prevDefinitiveTime := float.min(definitiveTime, calculateInputDefinitiveTime_com$softwareag$saep$SensorEvent(sew, now, length.waitTime));

		if(addLatest) then {
			seq.append(latest_com$softwareag$saep$SensorEvent);
			sew.timestamps.append(now);
			srcTimeUsed := now;		definitiveTime := float.min(definitiveTime, calculateInputDefinitiveTime_com$softwareag$saep$SensorEvent(sew, now, length.waitTime));

		} else {
			definitiveTime := prevDefinitiveTime;
		}


		// At least one, possibly both, of length.retainDuration and
		// withinDuration are non-negative (i.e. set).  We ignore those
		// that are not set, and if both are set, then we take the union
		// - which is the minimum of the 'oversize' count.
		integer oversize := seq.size();

		// apply retain restriction if set
		if (length.retainDuration >= 0) then {
			oversize := seq.size() - length.retainDuration;	}

		// apply within restriction if set:
		if( length.withinDuration >= 0.0 ) then {
			integer binSearchIndex := -1;
			float windowEnd := (definitiveTime / __TS.GRANULARITY).floor().toFloat() * __TS.GRANULARITY;		windowEnd := windowEnd - length.withinDuration;
			// And exclude things that are right on the edge, even if they've been bumped over by __TS.TIEBREAKER
			windowEnd := windowEnd + (__TS.GRANULARITY - __TS.TIEBREAKER);
			sequence<float> evtTimestamps := sew.timestamps;
			{
				integer oldest := 0;
				integer youngest := evtTimestamps.size();

				while oldest < youngest {
							
					integer midpoint := oldest + ((youngest - oldest) / 2);
					if evtTimestamps[midpoint] <= windowEnd then {
						oldest := midpoint + 1;
					} else {
						youngest := midpoint;	
					}	
				}
				if oldest = youngest and (oldest >= evtTimestamps.size() or  evtTimestamps[oldest] > windowEnd) then {
					binSearchIndex := oldest;
				}
			}
			if binSearchIndex < oversize then {
				oversize := binSearchIndex;
			}
		}

		// this can be negative, but the while loop will only remove
		// anything if it is > 0:
		while(oversize > 0) {
			seq.remove(0);
			sew.timestamps.remove(0);
			oversize := oversize - 1;
		}

		sew.seq_of_evts := seq.toString();
		return __LatestEvent(now, srcTimeUsed);
	}

	/*
	 * Populate the entry in definitiveTimes with the definitive time for this input.
	 * Only count events with (correlator-realm) timestamps up to uptoCorrelatorTime.
	 */
	action populateInputDefinitiveTime_com$softwareag$saep$SensorEvent(__StoredSnapshot ss, dictionary<string, float> definitiveTimes, boolean isPrevEval, dictionary<string, __DelayedOutOfOrderTime> delayedOutOfOrders) {
		try {
			float uptoCorrelatorTime := ss.previousEvalTimestamp;
			float correlatorEvalTime := ss.previousEvalTimestamp;
			if not isPrevEval then {
				uptoCorrelatorTime := float.INFINITY;
				correlatorEvalTime := getCurrentTime(ss.latestEvent.processedTimestamp, false);
			}

			__StoredEventWindow sew := ss.allEvts[sharedId_com$softwareag$saep$SensorEvent];
			sequence<float> timestamps := [];
			sequence<float> correlatorTimestamps := [];
			integer i:=0;

			timestamps := sew.timestamps;
			correlatorTimestamps := sew.timestamps;

			// Calculate input definitive time based non-discarded events in window
			float heartbeat;
			if isPrevEval then {
				heartbeat := sew.previousHeartbeatTime;
			} else {
				heartbeat := sew.heartbeatTime;
			}
			definitiveTimes["com$softwareag$saep$SensorEvent"] := calculateInputDefinitiveTime(timestamps, correlatorTimestamps, correlatorEvalTime, 
	0.0, heartbeat, delayedOutOfOrders,
					"com$softwareag$saep$SensorEvent", false);
		} catch(com.apama.exceptions.Exception exc) {
			// Probably due to the entry not being there - treat as empty:
			return;
		}
	}

	/** Returns window relevant to this query instance, taking into considerations any retain clauses */
	action getWindow_com$softwareag$saep$SensorEvent(__StoredSnapshot ss) returns sequence<com.softwareag.saep.SensorEvent> {
		try {
			__StoredEventWindow sew := ss.allEvts[sharedId_com$softwareag$saep$SensorEvent];
			sequence<float> evtTimestamps := sew.timestamps;
			sequence<com.softwareag.saep.SensorEvent> contents;
			if sew.seq_of_evts = "" then {
				contents := new sequence<com.softwareag.saep.SensorEvent>;
			} else {
				contents := sequence<com.softwareag.saep.SensorEvent>.parse(sew.seq_of_evts);
			}

			integer i:=0;
			com.softwareag.saep.SensorEvent elem;
			while i < contents.size() {
				elem := contents[i];
				elem.setTimeDeep(evtTimestamps[i]);
				i := i+1;		}

			return contents;
		} catch(com.apama.exceptions.Exception exc) {
			// Probably due to the entry not being there - treat as empty:
			return new sequence<com.softwareag.saep.SensorEvent>;
		}
	}

	/** 
	 * Trims the window (sequence of events) so those later than the definitive time are not considered yet 
	 * and take into considerations retain/within clauses.
	 * This MUST be called after getWindow_com$softwareag$saep$SensorEvent and calculateQueryDefinitiveTime.
	 */
	action scopeWindowToDefinitiveTime_com$softwareag$saep$SensorEvent(sequence<com.softwareag.saep.SensorEvent> contents, float definitiveTime, __StoredSnapshot ss, boolean isSpeculating, float maxDefinitiveTime) {
		if contents.size() = 0 then {
			return;
		}

		// Determines the index BELOW which the window is accurate up to the definitive time (hence numEvtsBeforeDefinitiveTime
		// corresponds to the total number of events that can be used).
		integer numEvtsBeforeDefinitiveTime := binSearch_com$softwareag$saep$SensorEvent(definitiveTime, contents);
		if numEvtsBeforeDefinitiveTime = 0 then {
			contents.clear();
		} else if numEvtsBeforeDefinitiveTime > 0 then {
			contents.setSize(numEvtsBeforeDefinitiveTime); // truncate any events that are too recent (> dt)
		}

		// if we are speculating, we need to reach as far back as within the current max definitive time (DT will be infinity)
		if isSpeculating then {
			definitiveTime := maxDefinitiveTime;
		}
		// Trim window based on within expression
		// The end of the window has to be aligned across actual timestamps (__TS.GRANULARITY), ignoring __TS.TIEBREAKER
		definitiveTime := (definitiveTime / __TS.GRANULARITY).floor().toFloat() * __TS.GRANULARITY;
		float within_windowEnd := definitiveTime - (within_com$softwareag$saep$SensorEvent);
		// And exclude things that are right on the edge, even if they've been bumped over by __TS.TIEBREAKER
		within_windowEnd := within_windowEnd + (__TS.GRANULARITY - __TS.TIEBREAKER);
		integer oldestInWindow := binSearch_com$softwareag$saep$SensorEvent(within_windowEnd, contents);
		if oldestInWindow < 0 then {
			contents.clear();
		} else if oldestInWindow > 0 then {
			integer oversize := oldestInWindow; 
			//TODO Story 30128 - Think about how best to optimize this. 
			while(oversize > 0)  {
				contents.remove(0);
				oversize := oversize - 1;
			}
		}

		if contents.size() > 0 then {
			// Updates statistics
			if ss.sharedId = sharedId_com$softwareag$saep$SensorEvent then {
				queryScenarioService.reportWindowUpdate("com.softwareag.saep.SensorEvent", contents.size(), ss.key);
			}
		}
	}

	/* Calculate, validate and save 'within' duration */
	action calculateWithin_com$softwareag$saep$SensorEvent() {
		 
		within_com$softwareag$saep$SensorEvent := __user.__getWithin_com$softwareag$saep$SensorEvent();  

	}
	/* 
	 * Get index of oldest element whose timestamp is more recent than windowEnd, or -1 if contents is 
	 * empty or all elements are older than or equal to windowEnd. Assumes contents is sorted by timestamp from oldest 
	 * to most recent. 
	 */
	action binSearch_com$softwareag$saep$SensorEvent(float windowEnd, sequence<com.softwareag.saep.SensorEvent> contents) returns integer {
		if contents.size() <=0 or contents[contents.size() - 1].getTime() < windowEnd then {
			return -1; 
		}

		integer binSearchIndex := -1;
		{
			integer oldest := 0;
			integer youngest := contents.size();

			while oldest < youngest {
						
				integer midpoint := oldest + ((youngest - oldest) / 2);
				if contents[midpoint].getTime() <= windowEnd then {
					oldest := midpoint + 1;
				} else {
					youngest := midpoint;	
				}	
			}
			if oldest = youngest and (oldest >= contents.size() or  contents[oldest].getTime() > windowEnd) then {
				binSearchIndex := oldest;
			}
		}

		return binSearchIndex;
	}

	/**
	 * This is the form that an element within the window of com.softwareag.saep.SensorEvent takes in the memory store. It contains the event and its
	 * timestamp, as stringifying and parsing events ignores the event's getTime(), so it has to be kept in a separate field alongside.
	 */
	event __Stored_com$softwareag$saep$SensorEvent {
		com.softwareag.saep.SensorEvent value;
		float timestamp;
	}

	/**
	 * An indexable used to identify uniqueness of input as per with-unique clause
	 */


	 

	/* All pattern definition and evaluation code */
	/* ========================================== */


	/** An index into each of the types.
	 * 
	 * Iterates the window contents across all types on demand.
	 */
	event __WindowsIterator {

		// current iteration state:
		string currentType;	
		integer currentIndex;
		float currentTimestamp;
		/** Contents of each window */
		wildcard sequence<com.softwareag.saep.SensorEvent> window_com$softwareag$saep$SensorEvent;
		/** Index into window contents where this iterator is currently pointing */
		wildcard integer idx_com$softwareag$saep$SensorEvent; 

		sequence<string> types;
		
		/* Determine if we are evaluating against time or event. If true then return the 
		   current event type as empty but time of event will be available*/
		boolean timeMode;
		
		/* Source timestamp (which is known to be unique) of the latest event received by correlator*/
		float timestampOfLatestReceived;

		/* Window index into at which the current event is located. Only valid if isDone() returns 
			false. Use getType() to determine the type of the element to which the index applies.  */ 
		action getIndex() returns integer {
			return currentIndex;
		}

		action getType() returns string {
			if timeMode then {
				return "";
			}
			return currentType;
		}

		/* Get the stringified form of the event at the current index for the current type */
		action getStringified() returns string {
			 
			/* Switch based on type of input */
			return window_com$softwareag$saep$SensorEvent[idx_com$softwareag$saep$SensorEvent].toString();
		}

		action getCurrentTimestamp() returns float {
			return currentTimestamp;
		}

		/* Initialize the iterator. On completion the most recent event in the combined window
			can be retrieved using getIndex() and getType().
			@param endTime - an optional (ignored if NaN) timestamp to append to the end of the windows
		 */
		action init(float endTime) {
			types := ["com$softwareag$saep$SensorEvent"];
			types.reverse();
			idx_com$softwareag$saep$SensorEvent := window_com$softwareag$saep$SensorEvent.size() - 1;
			currentType := types[0];
			currentTimestamp := float.INFINITY;
			idx_com$softwareag$saep$SensorEvent := idx_com$softwareag$saep$SensorEvent + 1;
			if(not endTime.isNaN()) then {
				currentTimestamp := endTime;
				currentType := "";
				currentIndex := getIndexForType(types[0]);
			} else {
				next();
			}
		}

		/* Increment the iterator to point to the next event in the combined window. If there are no
			more events then isDone() will return true. Otherwise, use getIndex() and getType() to
			access the event. */
		action next() {
			if(currentType = "") then {
				currentType := types[0];
			}
			 
			/* Switch based on type of input */
			idx_com$softwareag$saep$SensorEvent := idx_com$softwareag$saep$SensorEvent - 1;
			string nextPrevType:="";
			float nextPrevTime:=-float.INFINITY;
			integer nextIndex:= -1;

			string type;
			for type in types {
				float evtTime:=getTimestamp(type);

				// assert (t >= currentTimestamp);
				if evtTime > nextPrevTime then {
					nextPrevTime := evtTime;
					nextPrevType := type;
					nextIndex:=getIndexForType(type);
				}
			}
			currentTimestamp := nextPrevTime;
			currentType := nextPrevType;
			currentIndex := nextIndex;
		}

		action isLatestReceived() returns boolean {
			return timestampOfLatestReceived = currentTimestamp;
		}

		action isDone() returns boolean {
			return currentIndex = -1;
		}

		action getTimestamp(string type) returns float {
			 
			/* Switch based on type of input */
			if idx_com$softwareag$saep$SensorEvent < 0 then {
				return -float.INFINITY;
			} else {
				return window_com$softwareag$saep$SensorEvent[idx_com$softwareag$saep$SensorEvent].getTime();
			}
		}

		action getIndexForType(string type) returns integer {
			 
			/* Switch based on type of input */
			return idx_com$softwareag$saep$SensorEvent;
		}
		
		action setTimeMode(boolean isTimeMode) {
			timeMode := isTimeMode;
		}
	}


	/** Internal event for holding evaluation state for a single find block */
	event __EvaluationState {

		// the user object (contains all user defined expressions/actions)
		__ElasticQueryUserCode __user;

		// Query scenario service event
		__QueryScenarioService queryScenarioService;

		// current index into the merged ordered window:
		__WindowsIterator inputs;

		// the current potential matchsets:
		dictionary<integer, __MatchSet> matchSets;
		
		// Matchsets spawned from the current matchset:
		sequence<integer> addedMatchsets;

		// whether we are matching the 'current' or latest event:
		boolean matchingCurrentEvent;
		
		// how many times we have consumed (coassigned) any events:
		integer haveConsumed;
		
		// the most recent matchset id
		integer mostRecentMatchSet;

		// whether to trigger even if the latest event is not in a matchset
		boolean findAllMatches;


		// duration for within filters (if any)

		//wait durations (if any)

		// The maximum time we really have (not just this evaluation)
		float maxDefinitiveTime;	

		// The timestamp of previously evaluated event
		float previousEventTimestamp;
		/* Effective timestamp of current event. Currently used by within filter. Initially 
		 * equal to the time of current event. Later it is set to the startTime of wait 
		 * interval when wait gets consumed. This ensures that within node evaluates 
		 * properly for event outside of wait interval as wait pattern causes whole 
		 * pattern to be evaluated for event outside wait interval.
		 * */
		float effectiveEventTimestamp;
		// value of the partition key for which evaluation is being done
		string key;
		// denote that pattern is being evaluated on expiry of some future wait
		boolean evalOnWaitExpiry;
		// If a wait evaluate while evalFutureTimer is true then wait is future wait
		boolean evalFutureTimer;
		// start time of the expired future wait
		float expiredWaitStartTime;
		// action to re-evaluate pattern on expirey of future wait
		action<__RestartQueryTimer> reEvaluateInputsAction;

		/** Evaluate a find pattern, calling __ElasticQueryUserCode.__findAction on a match
		  *
		  * Walks the window contents, evaluating the pattern using
		  * each of a set of MatchSets.
		  * Calls the __ElasticQueryUserCode.__findAction if a top level MatchSet exists
		  * which meets all of the where clauses and constraints
		  */
		action patternTrigger(float timeAtEndOfWindow, dictionary<string, float> inputDefinitiveTimes, dictionary<string, float> inputWaitTimes, boolean isSpeculating, dictionary<string, __DelayedOutOfOrderTime> delayedOutOfOrders) {
			///// Initialise state
			inputs.init(timeAtEndOfWindow);
			addInitialMatchSet();

			previousEventTimestamp := float.INFINITY;
			// ids of MatchSets that are final
			dictionary<integer, integer> finalMatchSetIds := new dictionary<integer, integer>;
			// in case of evalOnWaitExpiry, matchingCurrentEvent will get set to true
			// once future wait gets consumed.
			// when speculating matchingCurrentEvent only gets set to true if processing
			// the most recently received event.
			if not evalOnWaitExpiry then {
				matchingCurrentEvent := true;
			}
				
			boolean inputsDone := false;
			// first time pattern will be evaluated against no event to find future waits
			evalFutureTimer := true; 
			///// walk the window
			// for each event (until we have a final matchset, or no matchsets left)
			// we also evaluate pattern for window with no event and time -float.INFINITY
			while (not inputsDone) and (matchSets.size() > 0) {
				if isSpeculating then {
					matchingCurrentEvent := inputs.isLatestReceived();
				}
				__MatchSet matchSet;
				// for each matchset (present at the beginning
				// of processing this event - doesn't evaluate
				// matchsets added during this loop):
				for matchSet in matchSets.values() {
					///// evaluate the pattern twice:
					// once against time only then against event
					processPattern(matchSet, finalMatchSetIds, true);
					processPattern(matchSet, finalMatchSetIds, false);
				}

				evalFutureTimer := false;
				if (inputs.isDone()) then {
					inputsDone := true;
				}

				previousEventTimestamp := inputs.getCurrentTimestamp();
				inputs.next();
				// for the current/ latest event only: if it
				// is not coassigned, we abort the pattern
				// evaluation:
				if matchingCurrentEvent and haveConsumed = 0 and not findAllMatches then {
					return;
				}
				matchingCurrentEvent := false;
			}

			if finalMatchSetIds.size() > 0 then {
				if isSpeculating then {
					// determine when any matches triggered by the event most recently received by the correlator
					// will be less-than or equal to definitive time then re-evaluate at this time if it is currently
					// greater-than definitive time i.e. determine how long to wait for if necessary
					// (although explained using definitive time the actual calculation is in terms of real time)
					__MatchSet ms;
					integer fmsId;
					// The time at which this match occurred/will occur
					float ct := currentTime;
					for fmsId in finalMatchSetIds.keys() {
						ms := matchSets[fmsId];
						if ms.containsCurrent <= 0 then {
							continue;
						}

						float maxTS := ms.mostRecentTime();
						float speculativeWaitExpiryTime := ct;
						string eType;
						for eType in inputDefinitiveTimes.keys() {
							if inputDefinitiveTimes[eType] < maxTS then {
								__DelayedOutOfOrderTime delayed := delayedOutOfOrders.getOrDefault(eType);
								if delayed.maxInputEventTimestamp >= maxTS then {
									speculativeWaitExpiryTime := float.max(speculativeWaitExpiryTime, float.min(maxTS + inputWaitTimes.getOr(eType, 0.0), delayed.correlatorTimeBecomesDefinitive));
								} else {
									speculativeWaitExpiryTime := float.max(speculativeWaitExpiryTime, maxTS + inputWaitTimes.getOr(eType, 0.0));
								}
							}
						}

						if speculativeWaitExpiryTime > ct then {
							// wait for time+epsilon to avoid floating-point rounding errors, specifically the wait being slightly less than it should be
							speculativeWaitExpiryTime := speculativeWaitExpiryTime.nextafter(float.INFINITY);
							reEvaluateInputsAction(__RestartQueryTimer(queryScenarioService.name, queryScenarioService.instancePxyId, key, ct, speculativeWaitExpiryTime, false));
						}
					}

					return;
				}

				integer id:= mostRecentMatchSet;
				sequence<__MatchSet> allMatches := new sequence<__MatchSet>;
				boolean anyHaveCurrent := false;
				boolean anyFireNow := false;
				while(id != -1) {
					__MatchSet matchSet := matchSets[id];
					// check that there are no pending timers
					if finalMatchSetIds.hasKey(id) then {
						if matchSet.containsCurrent > 0 then {
							anyFireNow := processPendingWaitTimers(matchSet, inputWaitTimes) or anyFireNow;
							anyHaveCurrent := true;
						}

						allMatches.append(matchSet);
					}
					id := matchSet.next;
				}

				// if no new matchsets (i.e. with the current event), then suppress generating output:
				if not findAllMatches and ((not anyHaveCurrent) or (not anyFireNow)) then {
					return;
				}

				allMatches.reverse();
				__user.__processAggregates(allMatches);
				return; 

			}
		}

		/** Process pattern against time only or against event*/
		action processPattern(__MatchSet matchSet, dictionary<integer, integer> finalMatchSetIds, boolean withTime) {
			inputs.setTimeMode(withTime);
			
			effectiveEventTimestamp := inputs.getCurrentTimestamp();
			if matchSets.hasKey(matchSet.id) and not finalMatchSetIds.hasKey(matchSet.id) and evaluatePattern(matchSet) then {
				// we have a complete potential matchset.  If it matches the where clause, ...
				if pattern_node0_where(matchSet) then {
					// .. then we have a final matchset
					finalMatchSetIds.add(matchSet.id, matchSet.id);
				} else {
					discard(matchSet);
				}
			}
		}
		
		/** Process pending wait timers. If there are atleast one pending timer
		* which need to be evaluated in future then it returns false. */
		action processPendingWaitTimers(__MatchSet matchSet, dictionary<string,float> inputWaitTimes) returns boolean {
			// there will not be any pending timers when evaluating against
			// wait expiry because we are evaluating after all required waits are expired
			if evalOnWaitExpiry then {
				return true;
			}
			boolean noPendingTimer := true;
			float waitExpiryTime := -float.INFINITY;
			float waitStartTime := -float.INFINITY;
			string actionName := "";
			if not noPendingTimer then {
				// the waitStartTime is supplied so that wait
				// expression will evaluate to true when
				// evaluation reaches to that event
				reEvaluateInputsAction(__RestartQueryTimer(queryScenarioService.name, queryScenarioService.instancePxyId, key, waitStartTime, waitExpiryTime, true));
			}

			return noPendingTimer;
		}

		/** read current window content and corresponding event timestamps */
		action currentWindowContents(boolean forLogging) returns sequence<string> {
			inputs.init(float.NAN);
			sequence<string> contentsAndTimestamps := new sequence<string>;
			sequence<string> windowDump:=new sequence<string>;
			sequence<string> timestamps:=new sequence<string>;
			while(not inputs.isDone()) {
				windowDump.insert(inputs.getStringified(),0);
				decimal actualTimestamp := (inputs.getCurrentTimestamp().toDecimal() / __TS.GRANULARITY.toDecimal()).round().toDecimal() * __TS.GRANULARITY.toDecimal();
				timestamps.insert(actualTimestamp.toFloat().toString(), 0);
				inputs.next();
			}
			if forLogging then {
				contentsAndTimestamps.append("Groups window contents: ["+(",".join(windowDump))+"]");
				contentsAndTimestamps.append("Groups window timestamps: ["+(",".join(timestamps))+"]");
			} else {
				contentsAndTimestamps.append("["+(",".join(windowDump))+"]");
				contentsAndTimestamps.append("["+(",".join(timestamps))+"]");
			}

			return contentsAndTimestamps;
		}

		constant integer EVAL_MATCHEVENTS := 1;
		constant integer EVAL_EVAL := 2;
		constant integer EVAL_CONDITIONS := 3;

		/** Evaluate the entire pattern (including withouts, withins, etc) */
		action evaluatePattern(__MatchSet matchSet) returns boolean {
			addedMatchsets:= new sequence<integer>;
			boolean prev_has_s1 := matchSet.has_s1;
			boolean p := pattern_node_0(matchSet, EVAL_MATCHEVENTS);
			p := pattern_node_0(matchSet, EVAL_EVAL);
			boolean p2 := pattern_node_0(matchSet, EVAL_CONDITIONS);
			p := p and p2;
			integer msId;
			while addedMatchsets.size() > 0 {
				sequence<integer> prevAdded := addedMatchsets;
				addedMatchsets := new sequence<integer>;
				for msId in prevAdded {
					if matchSets.hasKey(msId) then {
						matchSet := matchSets[msId];
						boolean q := pattern_node_0(matchSet, EVAL_EVAL);
						boolean q2 := pattern_node_0(matchSet, EVAL_CONDITIONS);
						if q or q2 then {
							__user.__qLogger.instanceLog("Unexpectedly evaluated a spawned matchset to true", "ERROR", false);
						}
					}
				}
			}
			return p;
		}

		/* Start of evaluation actions for each node in the pattern */
		action pattern_node0_where(__MatchSet matchSet) returns boolean {

			// what positive where clauses can we now evaluate?
			// what without where clauses can we now evaluate?

			// do any withouts invalidate this matchset?

			return true;
		}

		// utility methods for managing MatchSets:
		/** Add the initial matchset. */
		action addInitialMatchSet() {
			__MatchSet initial := new __MatchSet;
			initial.init();
			initial.next := -1;
			initial.prev := -1;
			mostRecentMatchSet := initial.id;
			matchSets.add(initial.id, initial);
		}

		/** Find the most recent matchset that is in the supplied set */
		action findMostRecentIn(dictionary<integer, integer> set) returns integer {
			integer id:= mostRecentMatchSet;
			while (id != -1 and not set.hasKey(id)) {
				id := matchSets[id].next;
			}
			return id;
		}

		/** Add a match set */
		action addMatchSetAfter(__MatchSet prior) returns __MatchSet {
			if(not matchSets.hasKey(prior.id)) then {
				return prior;
			}
			__MatchSet newms := prior.clone();
			newms.init();
			newms.prev := prior.id;
			newms.next := prior.next;
			prior.next := newms.id;
			if(newms.next != -1) then {
				matchSets[newms.next].prev := newms.id;
			}
			matchSets.add(newms.id, newms);
			addedMatchsets.append(newms.id);
			return newms;
		}

		/** discard a match set */
		action discard(__MatchSet matchSet) {
			if matchSets.hasKey(matchSet.id) then {
				// maintain linked list:
				if(matchSet.prev != -1) then {
					if matchSets.hasKey(matchSet.prev) then {
						matchSets[matchSet.prev].next :=  matchSet.next;
					} else {
						__user.__qLogger.instanceLog("Unexpected matchset (prev) " + matchSet.prev.toString() + " in " + self.toString(), "ERROR", false);
					}
				}
				if(matchSet.next != -1) then {
					if matchSets.hasKey(matchSet.next) then {
						matchSets[matchSet.next].prev :=  matchSet.prev;
					} else {
						__user.__qLogger.instanceLog("Unexpected matchset (next) " + matchSet.next.toString() + " in " + self.toString(), "ERROR", false);
					}
				}
				if mostRecentMatchSet = matchSet.id then {
					mostRecentMatchSet := matchSet.next;
				}
				matchSets.remove(matchSet.id);
			} // else may have already been discarded - ignore
		}


		action evalConditions_node_0(__MatchSet matchSet) returns boolean {

			// what positive where clauses can we now evaluate?
			// what without where clauses can we now evaluate?

			// do any withouts invalidate this matchset?

			return true;
		}

		/* Pattern node for a coassignment from com$softwareag$saep$SensorEvent to s1 */
		action pattern_node_0(__MatchSet matchSet, integer evalState) returns boolean {
			// if we already have this coassignmnet, we evaluate to true, and don't copy or do anything:
			if matchSet.triggered_s1 > 0 then {
				if (evalState = EVAL_CONDITIONS) and (matchSet.triggered_s1  = EVAL_EVAL) then {
					matchSet.triggered_s1 := EVAL_CONDITIONS;
					boolean matchedWhere := evalConditions_node_0(matchSet);
					if not matchedWhere then {
						discard(matchSet);
					}
					return matchedWhere;
				}
				return true;
			}

			if "com$softwareag$saep$SensorEvent" = inputs.getType() then {
				if evalState = EVAL_MATCHEVENTS then {
					// coassign the event
					matchSet.csnmt_s1 := inputs.window_com$softwareag$saep$SensorEvent[inputs.getIndex()];
					matchSet.has_s1 := true;
					matchSet.timestamp_s1 := inputs.getCurrentTimestamp();

					haveConsumed := haveConsumed + 1;
					if matchingCurrentEvent then {
						matchSet.containsCurrent := matchSet.containsCurrent + 1;
					}

					return true;
				}
			}

			if evalState = EVAL_EVAL and matchSet.has_s1 then {
				boolean doCopy := true;
					__MatchSet copy := addMatchSetAfter(matchSet);
					copy.has_s1 := false;
					copy.triggered_s1 := 0;
					if matchingCurrentEvent then {
						copy.containsCurrent := copy.containsCurrent - 1;
					}
				matchSet.triggered_s1 := EVAL_EVAL;
				return true;
			} else {
				return false;
			}
		}

	}

	/* End of evaluation actions for each node in the pattern */

	action initWithinFilters() {
	}

	//wait duration
	action initWaits() {
	}
	
	/* Common code */
	/* =========== */
	
	/** Gets the next context for round-robin distribution of input events. */
	action nextContext() returns context {
		if workers.ctxs.size() <= 1 then {
			qLogger.instanceLog("Invalid state: No worker contexts.", "ERROR", false);
			shouldRespawn := false;
			die;
		}
		
		index := (index + 1) % workers.ctxs.size();
		if workers.ctxs[index].getId() = workers.gc_ctx.getId() then  {
			index := (index + 1) % workers.ctxs.size();
		}
		return workers.ctxs[index];
	}
	
	/** 
	* Called if the system is reconfigured.
	* Updates the set of contexts over which to distribute events.
	*/
	action onNewContexts( __WorkerContextSet workers_ ) {
		workers := workers_;
		context ctx;
		for ctx in workers.ctxs {
			spawn newWorker() to ctx;
		}

		queryScenarioService.updateWorkerContexts(workers);
	}
	
	/** Terminates a worker instance */
	action terminateWorker() {
		// Check if we've got any waits outstanding before shutting down.
		shouldRespawn := false;
		die;
	}
	
	/** Re-evaluate patterns
	* timer - details of the time we should re-evaluate at.
	*/
	action reEvaluateInputs(__RestartQueryTimer timer) {
		if not timerMgr.hasTimer(timer) then {
			timerMgr.add(timer);
			if(timer.waitExpiryTime > currentTime) then {
				on wait(timer.waitExpiryTime - currentTime) {
					fireTimer(timer, 10);
				}
			} else {
				fireTimer(timer, 10);
			}
		}
	}

	/** Find new definitive times since our last evaluation.
	* populates definitiveTimes with any source-realm definitive timestamps which were not definitive as of the last evaluation.
	*/
	action findValidNewDefinitiveTimes(sequence<float> definitiveTimes, float previousDefinitiveTime, float definitiveTime, float waitTime, sequence<float> sourceTimes, sequence<float> times) {
		integer i:=0;
		while(i < times.size() and i < sourceTimes.size()) {
			// must be (previous, current] definitive time, and not invalid (discarded due to delay > waitTime)
			if sourceTimes[i] > previousDefinitiveTime and sourceTimes[i] <= definitiveTime and times[i] - sourceTimes[i] <= waitTime then {
				definitiveTimes.append(sourceTimes[i]);
			}
			i := i + 1;
		}
	}


	/** 
	 * Process a stored snapshot for one of the inputs of this query
	 */
	action gotSnapshot(__StoredSnapshot ss) {
		boolean isEvalOnWaitExpiry:= ss.isEvalOnWaitExpiry;
		float expiredWaitStartTime:= ss.expiredWaitStartTime;
		float expiredWaitEndTime := ss.expiredWaitEndTime;

		// Set up input __EvaluationState variables
		__EvaluationState evalState := newEvaluationState(ss);
		dictionary<string, float> inputWaitTimes := new dictionary<string, float>;
		dictionary<string, float> dict := new dictionary<string, float>;

		// no source timestamps => single evaluation always
		if not anyHaveSourceTimestamps then {
			evalWindowOnce(evalState, ss, ss.latestEvent.processedTimestamp, currentTime, isEvalOnWaitExpiry, expiredWaitStartTime, expiredWaitEndTime, false, dict, dict, new dictionary<string, __DelayedOutOfOrderTime>);
		} else {
			inputWaitTimes := {};
			// Calculate previous definitive time, based on previousEvalTimestamp
			dictionary<string, float> previousDefinitiveTimes := new dictionary<string, float>;
			dictionary<string, __DelayedOutOfOrderTime> delayedOutOfOrders := {};
			populateInputDefinitiveTime_com$softwareag$saep$SensorEvent(ss, previousDefinitiveTimes, true, delayedOutOfOrders);

			// Calculate current defintive time:
			dictionary<string, float> definitiveTimesDict := new dictionary<string, float>;
			populateInputDefinitiveTime_com$softwareag$saep$SensorEvent(ss, definitiveTimesDict, false, delayedOutOfOrders);
			float previousDefinitiveTime := calculateQueryDefinitiveTime(previousDefinitiveTimes, "previous");
			float definitiveTime := calculateQueryDefinitiveTime(definitiveTimesDict, "current");

			float beginDefinitiveSearchRange := previousDefinitiveTime;
			float endDefinitiveSearchRange := definitiveTime;
			// determine what new definitive times we have:
			sequence<float> definitiveTimes := []; // populated by calls to findValidNewDefinitiveTimes
			{
				sequence<float> sourceTimes := ss.allEvts[sharedId_com$softwareag$saep$SensorEvent].timestamps;
				float waitTime:=0.0;
				findValidNewDefinitiveTimes(definitiveTimes, beginDefinitiveSearchRange, endDefinitiveSearchRange, waitTime, sourceTimes, ss.allEvts[sharedId_com$softwareag$saep$SensorEvent].timestamps);
			}
			definitiveTimes.sort();

			float evalDefinitiveTime;
			for evalDefinitiveTime in definitiveTimes {
				evalWindowOnce(evalState.clone(), ss.clone(), evalDefinitiveTime, definitiveTime, false, float.NAN, float.NAN, false, dict, inputWaitTimes, delayedOutOfOrders);
			}

			if anyHaveSourceTimestamps and not isEvalOnWaitExpiry then {
				// now perform speculative search through window to determine if any timers should be set up
				evalWindowOnce(evalState, ss, float.INFINITY, definitiveTime, false, float.NAN, float.NAN, true, definitiveTimesDict, inputWaitTimes, delayedOutOfOrders);
			}
		}
	}

	/** 
	 * Evaluate the window, up to the point indicated in source time by definitive time
	 */
	action evalWindowOnce(__EvaluationState evalState, __StoredSnapshot ss, float definitiveTime, float maxDefinitiveTime, boolean isEvalOnWaitExpiry, float expiredWaitStartTime, float expiredWaitEndTime, boolean isSpeculating, dictionary<string, float> definitiveTimes, dictionary<string, float> inputWaitTimes, dictionary<string, __DelayedOutOfOrderTime> delayedOutOfOrders) {
		// Set up the rest of input __EvaluationState variables
		evalState.maxDefinitiveTime := maxDefinitiveTime;
		evalState.evalOnWaitExpiry := isEvalOnWaitExpiry;
		evalState.expiredWaitStartTime := expiredWaitStartTime;
		evalState.findAllMatches := ss.findAllMatches;

		// Trim relevant windows based on the queries definitive time
		scopeWindowToDefinitiveTime_com$softwareag$saep$SensorEvent(evalState.inputs.window_com$softwareag$saep$SensorEvent, definitiveTime, ss, isSpeculating, maxDefinitiveTime);
		// set evalState.inputs.timestampOfLatestReceived to the timestamp available to
		// __WindowsIterator which is sew.sourceTimestamp if available, otherwise sew.timestamp
		evalState.inputs.timestampOfLatestReceived := ss.latestEvent.sourceTimestamp;

		// Execute patternTrigger
		// If isSpeculating = true we scan through once to determine any future matchSets and get the max wait value
		evalState.patternTrigger(expiredWaitEndTime, definitiveTimes, inputWaitTimes, isSpeculating, delayedOutOfOrders);
	}


	/**
	 * Actually re-evaluate an expired timer
	 */
	action fireTimer(__RestartQueryTimer timer, integer retryCount) {
		string key := timer.windowKey;
		__StoredSnapshot ss;
		try {
			ss := windowManager_com$softwareag$saep$SensorEvent.getSnapshot(key, false);
			// correlator timestamp of events can go
			// slightly ahead of correlator time, so
			// processedTimestamp is the max of
			// ss.latestEvent and the timer expiry time:
			ss.latestEvent.processedTimestamp := float.max(ss.latestEvent.processedTimestamp, timer.waitExpiryTime);
			ss.isEvalOnWaitExpiry := true;
			ss.expiredWaitStartTime := timer.waitStartTime;
			ss.expiredWaitEndTime := timer.waitExpiryTime;
		} catch (com.apama.exceptions.Exception __e) {
			if (retryCount > 0) then {
				qLogger.instanceLog("Caught exception (retries="+retryCount.toString()+") "+__e.getType()+" - "+__e.getMessage()+" - "+__e.toString()+" - "+__e.getStackTrace().toString(), "ERROR", false);
				terminationMgr.incrOutstandingRetries();
				on wait(1.0) {
					fireTimer(timer, retryCount - 1);
					terminationMgr.decrOutstandingRetries();
				}
				return;
			} else {
				qLogger.instanceLog("Terminating query instance. Exception "+__e.getType()+" - "+__e.getMessage()+" - "+__e.toString(), "FATAL", false);
				shouldTerminateWorkers := true;
				die;
			}
		}
		// We have timers per query instance; just eval locally.
		gotSnapshot(ss);
		timerMgr.remove(timer);
	}

	// Set up variables required when instantiating __EvalutationState
	action newEvaluationState(__StoredSnapshot ss) returns __EvaluationState {
		__EvaluationState evalState := new __EvaluationState;
		evalState.key := ss.key;
		evalState.reEvaluateInputsAction := reEvaluateInputs;
	
		evalState.queryScenarioService := queryScenarioService;
		__user.__qLogger := qLogger;
		evalState.__user := __user.clone();
		
		// set the key values:
		sequence<string> keyValues := sequence<string>.parse(ss.key);
		integer i:=0;
		evalState.__user.sensorId := integer.parse(keyValues[i]);
		i := i+1;

		evalState.inputs.window_com$softwareag$saep$SensorEvent := getWindow_com$softwareag$saep$SensorEvent(ss);

		shouldRespawn := true;
		return evalState;
	}

	action getCurrentTime(float maxTimestamp, boolean breakTie) returns float {
		 if(currentTime > maxTimestamp) then { 	 
			return currentTime;
		} else if breakTie then {
			return maxTimestamp + __TS.TIEBREAKER;
		} else {
			return maxTimestamp;
		}
	}

	/* 
	 * Calculates the definitive time of the input window corresponding to the 
	 * sourceTimestamps passed in. Calculated as the maximum of:
	 * 	Most recent timestamp or source timestamp
	 * 	Correlator's current time - input wait time
	 */
	action calculateInputDefinitiveTime(sequence<float> definitiveTimestamps, 
			sequence<float> correlatorTimestamps, 
			float evalCurrentTime, float inputWait, 
			float heartbeatTime, 
			dictionary<string, __DelayedOutOfOrderTime> delayedOutOfOrders, 
			string thisInput, 
			boolean outOfOrder) returns float {

		if outOfOrder then {
			return float.max(evalCurrentTime - inputWait, heartbeatTime);
		}

		float dt := -float.INFINITY;
		float maxTimeOutOfOrder := -float.INFINITY;
		float timeWillBecomeDefinitive := -float.INFINITY;
		integer i:=0;
		while(i < definitiveTimestamps.size()) {
			float evtDelayTime := correlatorTimestamps[i] - definitiveTimestamps[i];
			float evtAge := evalCurrentTime - correlatorTimestamps[i];
			if( evtDelayTime <= queryScenarioService.delayLeeway.delayLeeway or 
			     evtAge >= queryScenarioService.delayLeeway.reorderBuffer) then {
				if maxTimeOutOfOrder = -float.INFINITY then {
					dt := float.max(dt, definitiveTimestamps[i]);
				}
			} else {
				maxTimeOutOfOrder := float.max(maxTimeOutOfOrder, definitiveTimestamps[i]);
				timeWillBecomeDefinitive := float.max(timeWillBecomeDefinitive, correlatorTimestamps[i] + queryScenarioService.delayLeeway.reorderBuffer);
			}
			i := i + 1;
		}
		if(maxTimeOutOfOrder != -float.INFINITY and thisInput != "") then {
			delayedOutOfOrders[thisInput] := __DelayedOutOfOrderTime(maxTimeOutOfOrder, timeWillBecomeDefinitive);
		}

		return float.max(float.max(dt, evalCurrentTime - inputWait), heartbeatTime);
	}

	/* 
	 * Calculates the definitive time of the query. Calculated as the minimum of
	 * all the input definitive times.
	 * Definitive time defines the time the query is accurate up to, across all
	 * inputs, taking into account any source times the inputs may have. It is the point
	 * in time for which the query runtime knows it has received all the events it is 
	 * going to receive. Only from this time onwards will patterns match.
	 * This is definied for queries with and without any getSourceTime actions 
	 * implemented but only has special method when at least one is present;
	 */
	action calculateQueryDefinitiveTime(dictionary<string, float> dts, string type) returns float {
		float dt := float.INFINITY;
		string dt_key;
		for dt_key in dts.keys() {
			dt := float.min(dt, dts[dt_key]);
		}

		return dt;
	}
	
	action getMetadataMap() returns dictionary<string, string> {
		return {
"Author":"Software AG"
				};
	}
}

// QUERY SOURCE:
// This is a base64-encoded copy of the query source (generated by rel/9.10.0.x@275046) that generated this .mon file
// Ly8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
// KioqKioqKioqKioqKioqKioqKioqKg0KLy8gVGl0bGU6ICAgICAgICAgR3JvdXBzDQovLyBEZXNj
// cmlwdGlvbjogICBHcm91cCB0aGUgc2Vuc29yIGV2ZW50cyBieSBzb25zb3JJZCBhbmQgY291bnQu
// DQovLyBEZXBlbmRlbmNpZXM6ICBFdmVudCB0eXBlIGRlZmluaXRpb24NCi8vIEF1dGhvcjogICAg
// ICAgIFNvZnR3YXJlIEFHDQovLw0KLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
// KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQpwYWNrYWdlIGNv
// bS5zb2Z0d2FyZWFnLnNhZXA7DQp1c2luZyBjb20uYXBhbWEuYWdncmVnYXRlcy5jb3VudDsNCg0K
// cXVlcnkgR3JvdXBzIHsJDQoJDQoJbWV0YWRhdGEgew0KCQkiQXV0aG9yIjoiU29mdHdhcmUgQUci
// DQoJfQ0KCQ0KCWlucHV0cyAgew0KCQkvL2tleiBzZW5zb3JJZDogZ3J1cHBpZXJ0IGRpZSBTZW5z
// b3Jlbg0KCQljb20uc29mdHdhcmVhZy5zYWVwLlNlbnNvckV2ZW50KCkga2V5IHNlbnNvcklkIHdp
// dGhpbiA1LjA7DQoJfQ0KCQ0KCWZpbmQgZXZlcnkgU2Vuc29yRXZlbnQgOiBzMQ0KCXNlbGVjdCBj
// b3VudCgpIDogc2Vuc29yQ291bnQgew0KDQoJCSVjdXN0b20oInRpdGxlIjoiQ3VzdG9tIEVQTCBB
// Y3Rpb24gMSIpIHsNCgkJCXNlbmQgU2Vuc29yQ291bnRlcihzZW5zb3JJZCwgc2Vuc29yQ291bnQp
// IHRvICIiOw0KCQl9DQoJfQ0KfQ0K

TIME 0000000f 1484234969.9,31
TIME 0000000e 1484234969.9,1
TIME 0000000f 1484234969.9,32
TIME 0000000f 1484234969.9,30
TIME 0000000e 1484234969.9,3
TIME 0000000e 1484234969.9,4
MONI 00013d31 /* Package as specified by the .qry */
package com.softwareag.saep; 
/* Private using declarations required by framework */
using com.apama.queries.__Index;
using com.apama.queries.__LatestEvent;
using com.apama.queries.__Respawn;
using com.apama.queries.__RestartQueryTimer;
using com.apama.queries.__Trigger;
using com.apama.queries.__TS;

/* Private using declarations required by framework to interact with QueryServices.mon */
using com.apama.queries.__ContextMgr;
using com.apama.queries.__DistributionMgr;
using com.apama.queries.__FailedQueryInstance;
using com.apama.queries.__HubContextRequest;
using com.apama.queries.__HubContextRemove;
using com.apama.queries.__PendingTimersMgr;
using com.apama.queries.__PrepareStore;
using com.apama.queries.__QueryLoaded;
using com.apama.queries.__QueryLogger;
using com.apama.queries.__QueryReady;
using com.apama.queries.__QueryScenarioService;
using com.apama.queries.__RemoveInstance;
using com.apama.queries.__StoredEventWindow;
using com.apama.queries.__StorePrepared;
using com.apama.queries.__StoredSnapshot;
using com.apama.queries.__TerminationMgr;
using com.apama.queries.__WorkerContextSet;
using com.apama.queries.__WindowLength;
using com.apama.queries.__WindowManager;
using com.apama.queries.__WindowManagerTableUsageChanged;

/* Using declarations explicitly specified in the .qry */

/**
 * Monitor controlling query Sensors.
 */
monitor Sensors { 

	/** General internal events */
	event __NullType {
	}

	/** The set of worker contexts */
	__WorkerContextSet workers;
	
	/** The index of the current worker context */
	integer index;

	/* Flag for whether or not (and how) to respawn after ondie is triggered */
	boolean shouldRespawn := false;
	boolean shouldTerminateWorkers := false;
	boolean deleted := false; // has been deleted

	/* Number of instances of the query. Used to limit non-parameterized queries to a single instance */
	integer instanceCount := 0;
	
	/* TerminationManager used to shutdown workers */
	__TerminationMgr terminationMgr;

	/** Set of pending input window preparations
	 */	
	dictionary<integer, integer> pendingPreparations;

	/** The MemoryStore Store used to hold each event window */
	com.apama.memorystore.Store store;

	/** A __DistributionMgr for each input type */
	__DistributionMgr dist_com$softwareag$saep$SensorEvent;
	__DistributionMgr dist___RestartQueryTimer;
	/** Manager for processPending timers */
	__PendingTimersMgr timerMgr;

	/** Flag to inidicate where any input source times are used */
	boolean anyHaveSourceTimestamps;

	/** Used to interact with the Scenario Service monitor which is stuck in the past i.e. the main context */
	context scenarioServiceCtx;
	context mainCtx;
	// @see HubContextManager
	context hubCtx;
	context statsGatherer;
	boolean isMasterMonitor;
	boolean isInstanceProxy;
	boolean initialised;
	boolean createdAtStartup; // see initCommon
	integer qryId;
	string parameterizationOwner;

	/** Query scenario service event */
	__QueryScenarioService queryScenarioService;
	__QueryLogger qLogger;

	string queryDefinitionName := queryScenarioService.QUERY_PREFIX + "com.softwareag.saep.Sensors";


	/**
	 * A per-matchset event. 
	 *
	 * Contains a potential matching set of events and any other state
	 * needed to evaluate the pattern.
	 * MatchSets are owned by a parent (either another MatchSet or the
	 * EvaluationState
	 */
	event __MatchSet {	
		///// state corresponding to the pattern:

		// coassigned (positive) events:
		wildcard SensorEvent csnmt_s1 ;

		// flags to record which coassignments we have:
		wildcard boolean has_s1;
		// flags to record which coassignments we have previously triggered:
		wildcard integer triggered_s1;
		
		// timestamps of the events
		wildcard float timestamp_s1;

		// per-followedby node - which way is it looking?


		// per-without sets of the event - only holds those where we
		// don't yet know whether the 'where' condition holds.
		
		///// state corresponding to the evaluation state:
		integer id;
		action init() {
			id := integer.getUnique();
		}

		// The effective timestamp for when this match occurred
		action mostRecentTime() returns float {
			float t := -float.INFINITY;

			if (timestamp_s1 > t) then {
				t := timestamp_s1;
			}

			return t;
		}

		// we maintain an ordered linked list of matchsets, the most recent first
		// this is managed by EvaluationState.addNewMatchsetAfter and 
		// EvaluationState.discard
		integer next;
		integer prev;

		// count of how many instances of the 'current' event this matchset contains:
		integer containsCurrent;
	}


	event __SelectOutput {
		wildcard integer e1;
		/**
		 * Simulates the 'having' clause from a query. The having expression is fed into __having in the select clause, and then
		 * interrogated before the find action is triggered. We do this in preference to using an actual 'having' clause to avoid obscure
		 * error message bugs.
		 */
		boolean __having;
	}
	event __DelayedOutOfOrderTime {
		float maxInputEventTimestamp;
		float correlatorTimeBecomesDefinitive;
	}

    	/** Utility event containing all user-defined parameters, expressions and query actions*/
	event __ElasticQueryUserCode {

		/* Only copy of query parameters */




		/** Return the user-specified duration; the evaluation of either an EPL float expression or a time literal */
		action __getWithin_com$softwareag$saep$SensorEvent() returns float {
			return  __calculateTime("", "", "", "5", "");   
		}


		/* User code that gets invoked when the pattern is matched 
		 * Takes coassignments into its scope as arguments, and parameters/keys as members on self.
		 */
		action __findAction(integer e1 ) {

			/**
			 * Brackets for extra scoping goodness; we want the user to be able to declare
			 * variables that mask arguments to this action i.e. coassignments
			 */
			{
{
			send Counter(e1) to "";
		}				 
			}
		}

		action __processAggregates(sequence<__MatchSet> __matchSets) {
			integer __toRetain := __matchSets.size();
			integer __id := integer.getUnique();
			stream<__MatchSet> __mstr := from idx in all __Index(id=__id) retain __toRetain select __matchSets[idx.idx];
			// while these are not used (and should not be used), they are
			// here to help the completion proposals.  Actual use of them in
			// the projection is via the __ms prefix.

			SensorEvent s1;

			__SelectOutput __output;
			listener  __sstr := from __ms in __mstr retain __toRetain from __t in all __Trigger(__id)
				/** Force this to be an aggregate query so that a query with a non-aggregate-ey select clause gets flagged as an error */
				having true
				select __SelectOutput(com.apama.aggregates.count() 
		, 			true
				)
				:__output
			{
				__mstr.quit();
				__sstr.quit();
				if(__output.__having) then {
					try{
						__findAction(__output.e1);
					} catch(com.apama.exceptions.Exception __e) {
						 
						__qLogger.instanceLog("Pattern action threw exception"
							+ ": " + __e.getType() + " - " + __e.getMessage(), "WARN", false); 

					}
				}
			}
			integer __i:=0;
			while(__i < __matchSets.size()) {
				route __Index(__id, __i);
				__i := __i+1;
			}
			route __Trigger(__id);
		} 





		/* Parameterized query logger */
		__QueryLogger __qLogger;

		/* Pattern event listener(s) */

		action<action<string, boolean, float>, integer, SensorEvent> __handle_com$softwareag$saep$SensorEvent;


		/** __WindowManager._listenFor_cb */
		action __listenFor_com$softwareag$saep$SensorEvent(action<string, boolean, float> __onEvent, action<string, string, boolean, float> __onHeartbeat) returns sequence<listener> {
			sequence<listener> listeners := [];
			SensorEvent  __latest;
			listener l := on all SensorEvent(): __latest { 
				__handle_com$softwareag$saep$SensorEvent(__onEvent, 10, __latest);
			}
			listeners.append(l);
			return listeners;

		}
		/* Template listener - not kept live, just used to serialise the templateArgs.  */
		action __startListener_com$softwareag$saep$SensorEvent() returns listener {
			SensorEvent  __latest;
			listener __l := on SensorEvent(): __latest { 
			}
			return __l;
		}


		/* Get time in seconds*/
		action __calculateTime(string day, string hour, string min, string sec, string msec) returns float {
			float value := __parseToFloat(day)*86400000.000 + 
			               __parseToFloat(hour)*3600000.000 + 
			               __parseToFloat(min)*60000.000 + 
			               __parseToFloat(sec)*1000.000 + 
			               __parseToFloat(msec);
			// round time to nearest millisecond
			return value.round().toFloat()/1000.0;
		}
	
		action __parseToFloat(string num) returns float {
			if (num = "") then {
				return 0.0;
			}
			// if hexadecimal integer then first parse into int
			if (num.length() > 2 and (num.substring(0, 2) = "0x" or num.substring(0, 2) = "0X")) then {
				return integer.parse(num).toFloat();
			} else {
				return float.parse(num);
			}
		}


	} // end of event __ElasticQueryUserCode

	__ElasticQueryUserCode __user;

	action __calculateTime(string day, string hour, string min, string sec, string msec) returns float {
		return __user.__calculateTime(day, hour, min, sec, msec);
	}

	/** Actually just proxies an onload_ call into the query hub context */
	//  @see HubContextManager
	action onload() {
		scenarioServiceCtx := context.current();
		mainCtx := context.current();
		(new __HubContextRequest).process(true, queryDefinitionName, hubCallback);
	}
	
	action hubCallback(context _hubCtx, context _statsGatherer) {
		hubCtx := _hubCtx;
		statsGatherer := _statsGatherer;
		route __QueryLoaded("com.softwareag.saep.Sensors");
		// Spawn into the query hub context
		spawn onload_() to hubCtx;
	}

	/** 
	* Called when monitor is loaded.
	*/
	action onload_() {
		// Is main (parent) monitor causes termination then query scenario service is made aware
		isMasterMonitor := true;
		sequence<string> eventTypes := ["com.softwareag.saep.SensorEvent"];
		anyHaveSourceTimestamps := false;

		// Set necessary query scenario service support event query information
		queryScenarioService.init(
			"com.softwareag.saep.Sensors",
			queryDefinitionName,
			false,
			false,
			createParameterizedQueryInstance,
			updateUserParameters,
			prepareParameterizedQueryInstanceFinish,
			scenarioServiceCtx,
			hubCtx,
			statsGatherer,
			eventTypes,
			getMetadataMap()
		);

		qLogger := queryScenarioService.getLogger();

		// Create a __TerminationMgr for the master, - in case an unparameterized query fails
		(new __TerminationMgr).init(terminateWorker, queryDefinitionName, -1);

		// Start point of query creation
		prepareStores();
	}

	// Block handle store preparation, where certain store need to be prepared
	// before the instance is prepared - uses callback (called only once successfully
	// prepared to ensure they are triggered in the intended order.
	// Order is pending timer manager -> scenario service
	action prepareStores() {
		timerMgr.init(hubCtx, queryScenarioService.masterId, qLogger, prepareStoresCompleted);
	}

	boolean allTablePrepareSucceeded;

	action prepareStoresCompleted(boolean success, com.apama.memorystore.Table timersTable) {
		allTablePrepareSucceeded := success; // used by initWindowTable, see below
		// Store preparation listener
		integer reqId := integer.getUnique();
		__StorePrepared prepared;
		on __StorePrepared(requestId = reqId):prepared {
			/** Name of the store */
			queryScenarioService.storeName := prepared.storeName;
			if(prepared.success) then {
				timerMgr.timersTable := timersTable;
				timerMgr.startClusterMemberChangeMonitor();
				scenarioServiceStorePrepared();
			} else {
				qLogger.queryLog("Could not prepare store " + queryScenarioService.storeName + ": " + prepared.reason, "FATAL", false);
				shouldRespawn := false;
				die;
			}
		}

		// Prepare the store
		route __PrepareStore(queryScenarioService.name, reqId);
	}

	action scenarioServiceStarted() {
		// start the failed query handler
		spawn failedQueryHandler();

		// the following instances are created at startup:
		createdAtStartup := true;
		// Check to see if this unparameterized query was previously created and if so recreate with the same instance ID.
		// There should only be a single instance in the table for a non-parameterized query
		try {
			com.apama.memorystore.Iterator it:=queryScenarioService.paramTable.begin();
			if (not it.done()) then {
				// ReCreate the existing instance
				qLogger.queryLog("Recreating non-parameterized query instance", "DEBUG", false);
				queryScenarioService.routeCreate(0, "*", new sequence<string>, it.getKey().toInteger());
			} else {
				// Create a new instance
				queryScenarioService.routeCreate(0, "*", new sequence<string>, 0);
			}
		} catch(com.apama.exceptions.Exception e) {
			// fallback, possibly if no table of parameterizations:
			queryScenarioService.routeCreate(0, "*", new sequence<string>, 0);
		}
		// either way, we create a single instance; mark this as loading until the instance has started (i.e. not start JMS until it has started)
		send __QueryLoaded(queryScenarioService.name) to scenarioServiceCtx;
		send __QueryReady(queryScenarioService.name) to scenarioServiceCtx;
		integer id:=integer.getUnique();
		route __Trigger(id);
		on __Trigger(id) {
			// after we have processed Create events, any further creates are not at startup.
			createdAtStartup := false;
		}
	}

	/** Store is ready to be opened */
	action scenarioServiceStorePrepared() {
		store := (new com.apama.memorystore.Storage).open(queryScenarioService.storeName);

		// Open or create the parameterised store here.
		// Needs to be ready before ScenarioService is (ie before we have create listeners etc)
		// FIXME - Use a single table to store the parameterizations?
		__NullType n := new __NullType;
		string queryName := n.getName().substring(0,-11);
		// Table to store parameter values
		string tableName := "parameterizations_"+queryName+"_"+queryScenarioService.name;
		com.apama.memorystore.Schema schema := new com.apama.memorystore.Schema;
		schema.fields.append("scenarioId");
		schema.types.append("string");
		schema.fields.append("owner");
		schema.types.append("string");
		schema.fields.append("parameters");
		schema.types.append("string");

		// Table to store instance ID
		string eqConfigTableName := "eqConfig"; // elastic queries config table
		com.apama.memorystore.Schema eqConfigSchema := new com.apama.memorystore.Schema;
		eqConfigSchema.fields.append("integerConfig");
		eqConfigSchema.types.append("integer");
		eqConfigSchema.fields.append("stringConfig");
		eqConfigSchema.types.append("string");
		
		// Prepare the table to hold the event window
		qLogger.queryLog("Preparing table to store parameter values: " + tableName, "DEBUG", false);
		integer id2 := store.prepare(tableName, schema);
		qLogger.queryLog("Preparing table to store parameter IDs: " + eqConfigTableName, "DEBUG", false);
		integer id3 := store.prepare(eqConfigTableName, eqConfigSchema);

		com.apama.memorystore.Finished f2;
		com.apama.memorystore.Finished f3;
		on com.apama.memorystore.Finished(id=id2):f2 and
		   com.apama.memorystore.Finished(id=id3):f3 {
			if f2.success then { 
				// Open the parameterizations table
				queryScenarioService.paramTable := store.open(tableName);
				qLogger.queryLog("Successfully prepared table to store parameter values: " + tableName, "DEBUG", false);
			} else {
				qLogger.queryLog("Asynchronous MemoryStore operation (Prepare Parameterizations) failed: " + f2.toString(), "FATAL", false);
			}

			if f3.success then { 
				queryScenarioService.eqConfigTable := store.open(eqConfigTableName);
				qLogger.queryLog("Successfully prepared table to store parameter IDs: " + eqConfigTableName, "DEBUG", false);
			} else {
				qLogger.queryLog("Asynchronous MemoryStore operation (Prepare eqConfig table) failed: " + f3.toString(), "FATAL", false);
			}
			allTablePrepareSucceeded := allTablePrepareSucceeded and f2.success and f3.success;

			try {
				// Subscribe to the table notifications
				integer notificationId := queryScenarioService.paramTable.subscribeRowChanged();
				queryScenarioService.supportsRowNotifications := true;
			} catch (com.apama.exceptions.Exception e) {
				qLogger.queryLog("MemoryStore driver doesn't support RowChanged notifications.", "INFO", false);
				queryScenarioService.supportsRowNotifications := false;
			}
			
			if (queryScenarioService.supportsRowNotifications) then {
				com.apama.memorystore.RowChanged rc;
				on all com.apama.memorystore.RowChanged(storeName  = queryScenarioService.storeName,
				                                        tableName  = tableName,
				                                        changeType = com.apama.memorystore.RowChanged.INSERT):rc {
					qLogger.queryLog("Received RowChanged::" + rc.getChangeTypeString() + " event: key=" + rc.key 
						+ ": " + rc.oldFieldValues.toString() + " -> " + rc.newFieldValues.toString(), "DEBUG", false);

					com.apama.memorystore.Row r := queryScenarioService.paramTable.get(rc.key);
					string sid := r.getString("scenarioId");
					string s1 := r.getString("parameters");
					sequence<string> seq := sequence<string>.parse(s1);
					
					// (Re)Create the instance - this correlator might have created this instance in which case we 
					// shouldn't do anything here.
					queryScenarioService.routeCreate(0, "*", seq, rc.key.toInteger());
				}
			}

			// start query scenario service
			queryScenarioService.start(setupScenario(), scenarioServiceStarted);
			spawn talkToScenarioService() to scenarioServiceCtx; // Ensure correct communication with scenario service
		}

	}

	string sharedId;

	action initWindowTable(action<> callbackComplete) {
		
		string oldSharedId := sharedId;
		dictionary<string, boolean> allSharedIds_and_hasSourceTime := {sharedId_com$softwareag$saep$SensorEvent:false};
		sequence<string> allSharedIds_and_hasSourceTime_keys := allSharedIds_and_hasSourceTime.keys();
		allSharedIds_and_hasSourceTime_keys.sort();
		sequence<string> allSharedIds := new sequence<string>;
		sequence<boolean> hasSourceTime := new sequence<boolean>;
		dictionary<string,string> sharedIdToHeartbeatType := {
			sharedId_com$softwareag$saep$SensorEvent : ""
			};
		string sharedId_key;
		for sharedId_key in allSharedIds_and_hasSourceTime_keys {
			allSharedIds.append(sharedId_key);
			hasSourceTime.append(allSharedIds_and_hasSourceTime[sharedId_key]);
		}

		sharedId := allSharedIds.toString();
		if oldSharedId = sharedId then {
			return;
		}
		string tableName := windowManager_com$softwareag$saep$SensorEvent.getTableName(allSharedIds);
		com.apama.memorystore.Schema schema := new com.apama.memorystore.Schema;
		string s;
		integer i:=0;
		dictionary<string, string> heartbeatsAdded := {};
		for s in allSharedIds {
			schema.fields.append("contents_"+s);
			schema.types.append("string");
			schema.fields.append("timestamps_"+s);
			schema.types.append("string");
			if(hasSourceTime[i]) then {
				schema.fields.append("srctimes_"+s);
				schema.types.append("string");
			}
			string heartbeat := sharedIdToHeartbeatType[s];
			if(heartbeat != "" and not heartbeatsAdded.hasKey(heartbeat)) then {
				schema.fields.append("heartbeatTime_"+heartbeat);
				schema.types.append("string");
				heartbeatsAdded[heartbeat] := heartbeat;
			}
			i:=i+1;
		}
		if(anyHaveSourceTimestamps) then {
			schema.fields.append("evalTime");
			schema.types.append("float");
		}
		// Prepare the table to hold the event window
		qLogger.instanceLog("Preparing table to store window contents: " + tableName, "DEBUG", false);
		integer id := store.prepare(tableName, schema);
		pendingPreparations.add(id,id);
		com.apama.memorystore.Finished f;
		on com.apama.memorystore.Finished(id=id):f {
			allTablePrepareSucceeded := allTablePrepareSucceeded and f.success;
			if f.success then {
				qLogger.instanceLog("Successfully prepared table to store window contents: " + tableName, "DEBUG", false);
			} else {
				qLogger.instanceLog("Asynchronous MemoryStore operation (Prepare window table data) failed: " + f.toString(), "FATAL", false);
			}
			if not allTablePrepareSucceeded then {
				if haveCreateParameterizedCompletedCallback then {
					try {
						// has to go into created state before we can move it into the failed state:
						createParameterizedCompletedCallback();
					} catch(com.apama.exceptions.Exception e) {
						// wil fail to update param table if it is not open, that's fine..
					}
				}
				shouldRespawn := false;
				die;
			}
			prepareFinished(true, id, callbackComplete);
		}
	}




	/** 
	 * Spawned to create a monitor that handles routing scenario service events.
	 */
	action talkToScenarioService() {
		isMasterMonitor := false; // the talkToScenarioService monitor is neither master nor an instance proxy:
		queryScenarioService.talkToScenarioService();
	}	

	/** 
	 * Spawned to create a monitor that handles instance proxies that enter the failed state.
	 */
	action failedQueryHandler() {
		isMasterMonitor := false; // the failedQueryHandler monitor is neither master nor an instance proxy:
		queryScenarioService.failedQueryHandler();
	}	

	/* Supplementary query scenario service actions block */


	/* Callback used to setup query scenario service. */
	action setupScenario() returns dictionary<string, sequence<string> > {
		dictionary<string, sequence<string> > s := new dictionary<string, sequence<string> >;
		// Handle request for Scenario data
		s["inputNames"] := [
		];
		s["inputTypes"] := [
		];
		s["inputDefaults"] := [
		];
		
		return s;
	}

	//End of supplementary query scenario service actions block

	boolean haveCreateParameterizedCompletedCallback;
	action<> createParameterizedCompletedCallback;

	/**
	* Run in the instance proxy on receipt of a request to create a new parameterized query instance. 
	* Sets specified parameter values and instance ID before creating tables for this parameterization,
	* spawning a worker to each context, and initializing a distributor.
	* Note we only request distributors if any parameterizations exist. (though of course at most one of
	* them will be 'live' at any one time -see __DistributionMgr)
	* Exception may be thrown from updateUserParameters and initCommon (to be caught by queryScenarioService) if value 
	* field sizes do not match, is parsing fails or if values used to evaluate expressions result in exceptions.
	*/
	action createParameterizedQueryInstance(sequence<string> parameterValues, string owner, action<> completedCallback) {
		//Set this to false so that any failures after spawning will not interpreted as being from the main monitor
		isMasterMonitor := false;
		isInstanceProxy := true;
		parameterizationOwner := owner;
		qLogger := queryScenarioService.getLogger(); // ensures the instance logger is using the correct Id
		updateUserParameters(parameterValues, true, true, initCommon);

		// Create an action and listener list for the chain of initialisation actions
		// Create a __TerminationMgr for the instance proxy, - in case the instance should terminate
		(new __TerminationMgr).init(terminateWorker, queryDefinitionName, queryScenarioService.instancePxyId);
		createParameterizedCompletedCallback := completedCallback;
		haveCreateParameterizedCompletedCallback := true;

		// Set necessary __PendingTimersMgr information
		timerMgr.setInstance(queryScenarioService.instancePxyId);
	}


	/**
	* Callback used to log the a request has been made to delete this parameterized instance.
	* Also ensure that this does not trigger a respawn upon termination.
	*/
	action prepareParameterizedQueryInstanceFinish(boolean logDeath) {	
		if logDeath then {
			if isInstanceProxy then {
				qLogger.instanceLog("Deleting instance", "INFO", false);
			} 
		}
		shouldRespawn := false;
		if isInstanceProxy and (not deleted) and initialised then {
			route __WindowManagerTableUsageChanged(-1, [sharedId_com$softwareag$saep$SensorEvent]);
		}
		deleted := true;
	}

	/**
	* Called immediately upon receiving query scenario service create or edit event. 
	* Exception will be thrown (to be caught by queryScenarioService) if value field sizes do not 
	* match, is parsing fails or if any of the within/retains expressions, within filters or waits
	* are invalid (syntacically or <= 0) - no try-catch blocks are used as queryScenarioService
	* caller will log error/stacktrace as appropriate.
	*/
	action updateUserParameters(sequence<string> parameterValues, boolean validate, boolean calledByCreate, action<> completeCallback) {
		if validate then {
			queryScenarioService.checkSizeOfParameters(parameterValues, calledByCreate);
		}
		sequence<string> old_sharedIds := [sharedId_com$softwareag$saep$SensorEvent];

		/** Sets "const" parameters used to reset locally mutable parameter variables, by 
		* parsing each parameter into __user (needed prior to (eg) _within_ initialisation).
		* Henceforth use the canonical form of the parameters (having been parsed).
		* Also handles update of query services' sequence of parameter values.
		*/
		sequence <string> paramValues := [];
		queryScenarioService.updateParameterValues(paramValues);

		if validate then {
			/* Expressions are validated here - exception can be thrown out of each catch-block, which will be caught by queryScenarioService */
			{
				queryScenarioService.validatingExpr("within clause \"\" for input com$softwareag$saep$SensorEvent");
				float v := __user.__getWithin_com$softwareag$saep$SensorEvent();
				if v  <=  0.0 then {
					qLogger.requestFailed(calledByCreate, "Invalid within clause \"\" (duration = " + v.toString() + ") for input com$softwareag$saep$SensorEvent. Cannot be less than or equal to zero.", getParametersString());
					queryScenarioService.failValidation(); 
				}
			} 

			initWindow_com$softwareag$saep$SensorEvent();

			initWindowTable(completeCallback);

			prepareFinished(false, 0, completeCallback); // may well not have any tables to prepare
		} else {
			if not isInstanceProxy then {
				if not calledByCreate then {
					 
					within_com$softwareag$saep$SensorEvent := __user.__getWithin_com$softwareag$saep$SensorEvent();  
					initWaits();
					initWithinFilters();
				}

				generateSharedId_com$softwareag$saep$SensorEvent();

				completeCallback();

				if not calledByCreate then {
					// must terminate the window managers before re-spawning
					windowManager_com$softwareag$saep$SensorEvent.terminate();
					// for the window manager's benefit, we handle Edit re-spawning and dieing - but we re-spawn from this mThread, and not via the respawn interface
					spawn workerMain(); // skip re-spawning the respawnListener, the old one should still be active.
					shouldRespawn := false;
					die;
				}
			} else {
				completeCallback();
			}

		}
		if isInstanceProxy then {
			route __WindowManagerTableUsageChanged(+1, [sharedId_com$softwareag$saep$SensorEvent]);
			if initialised then {
				route __WindowManagerTableUsageChanged(-1, old_sharedIds);
			}
		}
	}

	action getParametersString() returns string {
		return queryScenarioService.getParametersString(queryScenarioService.parameterValues, false);
	}


	/** 
	 * Called when any preparation has finished - will call initCommon if all preparations complete
	 */
	action prepareFinished(boolean removeId, integer id, action<> callbackComplete) {
		if removeId then {
			pendingPreparations.remove(id);
		}
		if pendingPreparations.size() = 0 then {
			callbackComplete();
		}
	}


 	/** 
	 * Called from the factory instance, when any tables have been prepared.  Only runs if no preparations left.
	 * Sets up the framework for handling multiple contexts. 
	 */
	action initCommon() {
		initWaits();
		initWithinFilters();
		initialised := true;
		if createdAtStartup then {
			// if this was created during startup, this is
			// either a non-parameterized instance or a
			// parameterized instance on a cluster, we are
			// only ready now:
			send __QueryReady(queryScenarioService.name) to scenarioServiceCtx;
		}

		// Handle changes to the set of worker-contexts  - causes workers to be spawned
		(new __ContextMgr).init( onNewContexts );

		// Initialise each __DistributionMgr  
		dist_com$softwareag$saep$SensorEvent.init(SensorEvent.getName(), distribute_com$softwareag$saep$SensorEvent);
		dist___RestartQueryTimer.init(__RestartQueryTimer.getName(), distribute___RestartQueryTimer);
		if haveCreateParameterizedCompletedCallback then {
			createParameterizedCompletedCallback();
		}

	}

	/** Executed before this instance dies. */
  	action ondie() {
  		// Clean-up!
		// If other queries share these event inputs, and if this query is currently
		// in charge of distribution, then a new distributor needs electing
		dist_com$softwareag$saep$SensorEvent.terminate();
		dist___RestartQueryTimer.terminate();		
		windowManager_com$softwareag$saep$SensorEvent.terminate();
		if isInstanceProxy and not deleted then {
			route __FailedQueryInstance(queryScenarioService.name, queryScenarioService.instancePxyId, queryScenarioService.parameterValues, parameterizationOwner);
			send __RemoveInstance(queryDefinitionName, queryScenarioService.instancePxyId) to workers.ctxs;
			if initialised then {
				route __WindowManagerTableUsageChanged(-1, [sharedId_com$softwareag$saep$SensorEvent]);
			}
		}

		if shouldTerminateWorkers then {
			log "Query log: Exception thrown when processing query, terminating all workers" at FATAL;
			send __RemoveInstance(queryDefinitionName, queryScenarioService.instancePxyId) to hubCtx;
		} else if shouldRespawn then { 
			// respawn in case aggregate function threw exception

			route __Respawn(queryScenarioService.instancePxyId); 
		}

		if not shouldTerminateWorkers then {
			// we should not lose any timer state we have, so send all 
			// state about timers to the hub context, which will
			// re-distribute it to the workers (possibly back to us, 
			// but possibly not; whatever it will do the right thing).
			timerMgr.broadcastTimers();
		}

		if isMasterMonitor then {
			// Ref-counting remove to HubContextManager
			(new __HubContextRemove).process(queryDefinitionName , mainCtx);
			// Alert query scenario service that the entire definition is gone - called once per definition.
			// Intentionally called here instead of in onunload to as to have access to the master monitor member values.
			queryScenarioService.unload();
		} else if isInstanceProxy then {
			timerMgr.removeAll();
		}
	}


	action distribute_com$softwareag$saep$SensorEvent() {
		SensorEvent e;
		on all SensorEvent(): e { 			 
			forward_com$softwareag$saep$SensorEvent(e, nextContext());
		}
	}

	action forward_com$softwareag$saep$SensorEvent(SensorEvent e, context ctx) {
		
	  	enqueue e to ctx;
	}

	action distribute___RestartQueryTimer() {
		__RestartQueryTimer e;
		on all __RestartQueryTimer(): e { 			 
			forward___RestartQueryTimer(e, nextContext());
		}
	}

	action forward___RestartQueryTimer(__RestartQueryTimer e, context ctx) {
		
	  	enqueue e to ctx;
	}


	 
	/** Spawned on each new worker instance */
	action newWorker() {
		isMasterMonitor := false;
		isInstanceProxy := false;


		// set up respawn listener for new worker in case of exception thrown by aggregate function
		spawn respawnListener();
		workerMain();
	}

	action workerMain() {
		qryId := integer.getUnique();

		// starts the query scenario service listeners as these are not active afer being spawned - only if we have parameters
		queryScenarioService.startWorkerListeners(context.current().getId() = workers.gc_ctx.getId());




		dictionary<string,string> sharedIdToHeartbeatType := {
			sharedId_com$softwareag$saep$SensorEvent : ""
		};

		// Set-up a listener for each event inputs
		initWindowListener_com$softwareag$saep$SensorEvent(sharedIdToHeartbeatType);
	
		// Create a __TerminationMgr for the worker instance, so that the context can be discarded 
		terminationMgr := new __TerminationMgr;
		terminationMgr.init(terminateWorker, queryDefinitionName, queryScenarioService.instancePxyId);
		
		// and restart any timers we get notified of:
		__RestartQueryTimer restartTimer;
		on all __RestartQueryTimer(queryName=queryScenarioService.name, instanceId=queryScenarioService.instancePxyId):restartTimer {
			reEvaluateInputs(restartTimer);
		}
	}


	/** respawn listener set up for every instance */
	action respawnListener() {
		on __Respawn(instanceId = queryScenarioService.instancePxyId) {
			qLogger.instanceLog("Exception thrown from aggregate function(s), respawning worker to current context", "WARN", false);

			shouldRespawn := false;
			spawn newWorker();
			die;
		}

		// Create a __TerminationMgr for the worker instance, so that the context can be discarded 
		terminationMgr := new __TerminationMgr;
		terminationMgr.init(terminateWorker, queryDefinitionName, queryScenarioService.instancePxyId);
	}


	/* All input definition and maintenance code */
	/* ========================================== */	

	/* Initialise individual event input inputs */

	/** Size of the 'within' window of com.softwareag.saep.SensorEvent */
	float within_com$softwareag$saep$SensorEvent;

	string sharedId_com$softwareag$saep$SensorEvent;
	__WindowManager windowManager_com$softwareag$saep$SensorEvent;

	action generateSharedId_com$softwareag$saep$SensorEvent() {
		// set up a listener as a template:
		listener l:=__user.__startListener_com$softwareag$saep$SensorEvent();
		sharedId_com$softwareag$saep$SensorEvent := l.serialise() + "-" + 
			"";
		l.quit();
	}

	/*
	 * Initialise the window 'com.softwareag.saep.SensorEvent' for events of type com.softwareag.saep.SensorEvent
	 */
	action initWindow_com$softwareag$saep$SensorEvent() {
		generateSharedId_com$softwareag$saep$SensorEvent();
	}

	/* Code to extract the key from the input event **/
	action __getRowKey_com$softwareag$saep$SensorEvent(SensorEvent e) returns string {
		sequence<string> keyFields := [];

		/**
		 * This beautiful bit of unreachable code is designed to
		 * provoke typechecking errors for incompatibilities between
		 * the types of key elements. (and also with unique). It does
		 * this by going through all the key elements of this input's
		 * event type and trying to assign them to a dummy event of
		 * the first input, and vice versa (both directions in order
		 * to find any constant fields being used as keys) 
		 */
		if(false) then {
			SensorEvent specimen_e := new SensorEvent;
			SensorEvent specimen := new SensorEvent;

		}
		return keyFields.toString();
	}





	action handle_com$softwareag$saep$SensorEvent(action<string, boolean, float> __onEvent, integer retryCount, SensorEvent latest) {
		try {
			latest_com$softwareag$saep$SensorEvent := latest;
			float srcTime := currentTime;
			__onEvent( __getRowKey_com$softwareag$saep$SensorEvent( latest), false, srcTime);

		} catch (com.apama.exceptions.Exception __e) {
			if (retryCount > 0) then {
				qLogger.instanceLog("Caught exception (retries="+retryCount.toString()+") "+__e.getType()+" - "+__e.getMessage()+" - "+__e.toString()+" - "+__e.getStackTrace().toString(), "ERROR", false);
				terminationMgr.incrOutstandingRetries();
				on wait(1.0) {
					handle_com$softwareag$saep$SensorEvent(__onEvent, retryCount-1, latest);
					terminationMgr.decrOutstandingRetries();
				}
				return;
			} else {
				qLogger.instanceLog("Terminating query instance. Exception "+__e.getType()+" - "+__e.getMessage()+" - "+__e.toString(), "FATAL", false);
				shouldTerminateWorkers := true;
				die;
			}
		}
	}

	SensorEvent latest_com$softwareag$saep$SensorEvent;

	action initWindowListener_com$softwareag$saep$SensorEvent(dictionary<string, string> sharedIdToHeartbeatType) {
		__WindowLength length := __WindowLength(-1.0, -1, 0.0, 0.0);
		calculateWithin_com$softwareag$saep$SensorEvent();
		length.withinDuration := within_com$softwareag$saep$SensorEvent;

		__user.__handle_com$softwareag$saep$SensorEvent := handle_com$softwareag$saep$SensorEvent;
		dictionary<string, boolean> allSharedIds_and_hasSourceTime := {sharedId_com$softwareag$saep$SensorEvent:false};
		sequence<string> allSharedIds_and_hasSourceTime_keys := allSharedIds_and_hasSourceTime.keys();
		allSharedIds_and_hasSourceTime_keys.sort();
		sequence<string> allSharedIds := new sequence<string>;
		sequence<boolean> hasSourceTime := new sequence<boolean>;
		string sharedId_key;
		for sharedId_key in allSharedIds_and_hasSourceTime_keys {
			allSharedIds.append(sharedId_key);
			hasSourceTime.append(allSharedIds_and_hasSourceTime[sharedId_key]);
		}

		windowManager_com$softwareag$saep$SensorEvent.init(
			sharedId_com$softwareag$saep$SensorEvent,
			qryId,
			allSharedIds,
			length,
			__user.__listenFor_com$softwareag$saep$SensorEvent,
			calculateInputDefinitiveTime_com$softwareag$saep$SensorEvent,
			maintainWindow_com$softwareag$saep$SensorEvent,
			store,
			hubCtx,
			context.current().getId() = workers.gc_ctx.getId(),
			hasSourceTime,
			sharedIdToHeartbeatType
		);

		__StoredSnapshot ss;
		on all __StoredSnapshot(sharedId = sharedId_com$softwareag$saep$SensorEvent, managerId = windowManager_com$softwareag$saep$SensorEvent.managerId):ss {
			gotSnapshot(ss);
		}		
	}

	/** __WindowManager._calculateInputDefinitiveTime_cb */
	action calculateInputDefinitiveTime_com$softwareag$saep$SensorEvent(__StoredEventWindow sew, float maxTime, float maxWait) returns float {
		return calculateInputDefinitiveTime(sew.timestamps, sew.timestamps, getCurrentTime(maxTime, false), maxWait, 
				sew.heartbeatTime, new dictionary<string, __DelayedOutOfOrderTime>, "", false);
	}

	action maintainWindow_parse_com$softwareag$saep$SensorEvent(string str) returns sequence<SensorEvent> {
		return sequence<SensorEvent>.parse(str);
	}


	/** __WindowManager._maintainWindow_cb 
	* definitiveTime is the minimum of the definitive times of the other
	*  query inputs; this input needs to add its latest event (if addLatest
	*  is set), then calculate this input's definitive time, to obtain the
	*  new query definitive time.
	*  Returns the details of latest event to be received by the correlator
	*  (the event being processed here, i.e. latest_com$softwareag$saep$SensorEvent)
	*/

	action maintainWindow_com$softwareag$saep$SensorEvent(__StoredEventWindow sew, __WindowLength length, float minWaitTime, float maxTime, float definitiveTime, boolean addLatest, float srcTime, dictionary<string, __StoredEventWindow> windows) returns __LatestEvent {
		sequence<SensorEvent> seq;
		if(sew.seq_of_evts = "") then {
			seq := new sequence<SensorEvent>;
		} else {
			seq := maintainWindow_parse_com$softwareag$saep$SensorEvent(sew.seq_of_evts);
		}

		float srcTimeUsed := float.NAN;
		float now := getCurrentTime(maxTime, true);

		float prevDefinitiveTime := float.min(definitiveTime, calculateInputDefinitiveTime_com$softwareag$saep$SensorEvent(sew, now, length.waitTime));

		if(addLatest) then {
			seq.append(latest_com$softwareag$saep$SensorEvent);
			sew.timestamps.append(now);
			srcTimeUsed := now;		definitiveTime := float.min(definitiveTime, calculateInputDefinitiveTime_com$softwareag$saep$SensorEvent(sew, now, length.waitTime));

		} else {
			definitiveTime := prevDefinitiveTime;
		}


		// At least one, possibly both, of length.retainDuration and
		// withinDuration are non-negative (i.e. set).  We ignore those
		// that are not set, and if both are set, then we take the union
		// - which is the minimum of the 'oversize' count.
		integer oversize := seq.size();

		// apply retain restriction if set
		if (length.retainDuration >= 0) then {
			oversize := seq.size() - length.retainDuration;	}

		// apply within restriction if set:
		if( length.withinDuration >= 0.0 ) then {
			integer binSearchIndex := -1;
			float windowEnd := (definitiveTime / __TS.GRANULARITY).floor().toFloat() * __TS.GRANULARITY;		windowEnd := windowEnd - length.withinDuration;
			// And exclude things that are right on the edge, even if they've been bumped over by __TS.TIEBREAKER
			windowEnd := windowEnd + (__TS.GRANULARITY - __TS.TIEBREAKER);
			sequence<float> evtTimestamps := sew.timestamps;
			{
				integer oldest := 0;
				integer youngest := evtTimestamps.size();

				while oldest < youngest {
							
					integer midpoint := oldest + ((youngest - oldest) / 2);
					if evtTimestamps[midpoint] <= windowEnd then {
						oldest := midpoint + 1;
					} else {
						youngest := midpoint;	
					}	
				}
				if oldest = youngest and (oldest >= evtTimestamps.size() or  evtTimestamps[oldest] > windowEnd) then {
					binSearchIndex := oldest;
				}
			}
			if binSearchIndex < oversize then {
				oversize := binSearchIndex;
			}
		}

		// this can be negative, but the while loop will only remove
		// anything if it is > 0:
		while(oversize > 0) {
			seq.remove(0);
			sew.timestamps.remove(0);
			oversize := oversize - 1;
		}

		sew.seq_of_evts := seq.toString();
		return __LatestEvent(now, srcTimeUsed);
	}

	/*
	 * Populate the entry in definitiveTimes with the definitive time for this input.
	 * Only count events with (correlator-realm) timestamps up to uptoCorrelatorTime.
	 */
	action populateInputDefinitiveTime_com$softwareag$saep$SensorEvent(__StoredSnapshot ss, dictionary<string, float> definitiveTimes, boolean isPrevEval, dictionary<string, __DelayedOutOfOrderTime> delayedOutOfOrders) {
		try {
			float uptoCorrelatorTime := ss.previousEvalTimestamp;
			float correlatorEvalTime := ss.previousEvalTimestamp;
			if not isPrevEval then {
				uptoCorrelatorTime := float.INFINITY;
				correlatorEvalTime := getCurrentTime(ss.latestEvent.processedTimestamp, false);
			}

			__StoredEventWindow sew := ss.allEvts[sharedId_com$softwareag$saep$SensorEvent];
			sequence<float> timestamps := [];
			sequence<float> correlatorTimestamps := [];
			integer i:=0;

			timestamps := sew.timestamps;
			correlatorTimestamps := sew.timestamps;

			// Calculate input definitive time based non-discarded events in window
			float heartbeat;
			if isPrevEval then {
				heartbeat := sew.previousHeartbeatTime;
			} else {
				heartbeat := sew.heartbeatTime;
			}
			definitiveTimes["com$softwareag$saep$SensorEvent"] := calculateInputDefinitiveTime(timestamps, correlatorTimestamps, correlatorEvalTime, 
	0.0, heartbeat, delayedOutOfOrders,
					"com$softwareag$saep$SensorEvent", false);
		} catch(com.apama.exceptions.Exception exc) {
			// Probably due to the entry not being there - treat as empty:
			return;
		}
	}

	/** Returns window relevant to this query instance, taking into considerations any retain clauses */
	action getWindow_com$softwareag$saep$SensorEvent(__StoredSnapshot ss) returns sequence<SensorEvent> {
		try {
			__StoredEventWindow sew := ss.allEvts[sharedId_com$softwareag$saep$SensorEvent];
			sequence<float> evtTimestamps := sew.timestamps;
			sequence<SensorEvent> contents;
			if sew.seq_of_evts = "" then {
				contents := new sequence<SensorEvent>;
			} else {
				contents := sequence<SensorEvent>.parse(sew.seq_of_evts);
			}

			integer i:=0;
			SensorEvent elem;
			while i < contents.size() {
				elem := contents[i];
				elem.setTimeDeep(evtTimestamps[i]);
				i := i+1;		}

			return contents;
		} catch(com.apama.exceptions.Exception exc) {
			// Probably due to the entry not being there - treat as empty:
			return new sequence<SensorEvent>;
		}
	}

	/** 
	 * Trims the window (sequence of events) so those later than the definitive time are not considered yet 
	 * and take into considerations retain/within clauses.
	 * This MUST be called after getWindow_com$softwareag$saep$SensorEvent and calculateQueryDefinitiveTime.
	 */
	action scopeWindowToDefinitiveTime_com$softwareag$saep$SensorEvent(sequence<SensorEvent> contents, float definitiveTime, __StoredSnapshot ss, boolean isSpeculating, float maxDefinitiveTime) {
		if contents.size() = 0 then {
			return;
		}

		// Determines the index BELOW which the window is accurate up to the definitive time (hence numEvtsBeforeDefinitiveTime
		// corresponds to the total number of events that can be used).
		integer numEvtsBeforeDefinitiveTime := binSearch_com$softwareag$saep$SensorEvent(definitiveTime, contents);
		if numEvtsBeforeDefinitiveTime = 0 then {
			contents.clear();
		} else if numEvtsBeforeDefinitiveTime > 0 then {
			contents.setSize(numEvtsBeforeDefinitiveTime); // truncate any events that are too recent (> dt)
		}

		// if we are speculating, we need to reach as far back as within the current max definitive time (DT will be infinity)
		if isSpeculating then {
			definitiveTime := maxDefinitiveTime;
		}
		// Trim window based on within expression
		// The end of the window has to be aligned across actual timestamps (__TS.GRANULARITY), ignoring __TS.TIEBREAKER
		definitiveTime := (definitiveTime / __TS.GRANULARITY).floor().toFloat() * __TS.GRANULARITY;
		float within_windowEnd := definitiveTime - (within_com$softwareag$saep$SensorEvent);
		// And exclude things that are right on the edge, even if they've been bumped over by __TS.TIEBREAKER
		within_windowEnd := within_windowEnd + (__TS.GRANULARITY - __TS.TIEBREAKER);
		integer oldestInWindow := binSearch_com$softwareag$saep$SensorEvent(within_windowEnd, contents);
		if oldestInWindow < 0 then {
			contents.clear();
		} else if oldestInWindow > 0 then {
			integer oversize := oldestInWindow; 
			//TODO Story 30128 - Think about how best to optimize this. 
			while(oversize > 0)  {
				contents.remove(0);
				oversize := oversize - 1;
			}
		}

		if contents.size() > 0 then {
			// Updates statistics
			if ss.sharedId = sharedId_com$softwareag$saep$SensorEvent then {
				queryScenarioService.reportWindowUpdate("com.softwareag.saep.SensorEvent", contents.size(), ss.key);
			}
		}
	}

	/* Calculate, validate and save 'within' duration */
	action calculateWithin_com$softwareag$saep$SensorEvent() {
		 
		within_com$softwareag$saep$SensorEvent := __user.__getWithin_com$softwareag$saep$SensorEvent();  

	}
	/* 
	 * Get index of oldest element whose timestamp is more recent than windowEnd, or -1 if contents is 
	 * empty or all elements are older than or equal to windowEnd. Assumes contents is sorted by timestamp from oldest 
	 * to most recent. 
	 */
	action binSearch_com$softwareag$saep$SensorEvent(float windowEnd, sequence<SensorEvent> contents) returns integer {
		if contents.size() <=0 or contents[contents.size() - 1].getTime() < windowEnd then {
			return -1; 
		}

		integer binSearchIndex := -1;
		{
			integer oldest := 0;
			integer youngest := contents.size();

			while oldest < youngest {
						
				integer midpoint := oldest + ((youngest - oldest) / 2);
				if contents[midpoint].getTime() <= windowEnd then {
					oldest := midpoint + 1;
				} else {
					youngest := midpoint;	
				}	
			}
			if oldest = youngest and (oldest >= contents.size() or  contents[oldest].getTime() > windowEnd) then {
				binSearchIndex := oldest;
			}
		}

		return binSearchIndex;
	}

	/**
	 * This is the form that an element within the window of com.softwareag.saep.SensorEvent takes in the memory store. It contains the event and its
	 * timestamp, as stringifying and parsing events ignores the event's getTime(), so it has to be kept in a separate field alongside.
	 */
	event __Stored_com$softwareag$saep$SensorEvent {
		SensorEvent value;
		float timestamp;
	}

	/**
	 * An indexable used to identify uniqueness of input as per with-unique clause
	 */


	 

	/* All pattern definition and evaluation code */
	/* ========================================== */


	/** An index into each of the types.
	 * 
	 * Iterates the window contents across all types on demand.
	 */
	event __WindowsIterator {

		// current iteration state:
		string currentType;	
		integer currentIndex;
		float currentTimestamp;
		/** Contents of each window */
		wildcard sequence<SensorEvent> window_com$softwareag$saep$SensorEvent;
		/** Index into window contents where this iterator is currently pointing */
		wildcard integer idx_com$softwareag$saep$SensorEvent; 

		sequence<string> types;
		
		/* Determine if we are evaluating against time or event. If true then return the 
		   current event type as empty but time of event will be available*/
		boolean timeMode;
		
		/* Source timestamp (which is known to be unique) of the latest event received by correlator*/
		float timestampOfLatestReceived;

		/* Window index into at which the current event is located. Only valid if isDone() returns 
			false. Use getType() to determine the type of the element to which the index applies.  */ 
		action getIndex() returns integer {
			return currentIndex;
		}

		action getType() returns string {
			if timeMode then {
				return "";
			}
			return currentType;
		}

		/* Get the stringified form of the event at the current index for the current type */
		action getStringified() returns string {
			 
			/* Switch based on type of input */
			return window_com$softwareag$saep$SensorEvent[idx_com$softwareag$saep$SensorEvent].toString();
		}

		action getCurrentTimestamp() returns float {
			return currentTimestamp;
		}

		/* Initialize the iterator. On completion the most recent event in the combined window
			can be retrieved using getIndex() and getType().
			@param endTime - an optional (ignored if NaN) timestamp to append to the end of the windows
		 */
		action init(float endTime) {
			types := ["com$softwareag$saep$SensorEvent"];
			types.reverse();
			idx_com$softwareag$saep$SensorEvent := window_com$softwareag$saep$SensorEvent.size() - 1;
			currentType := types[0];
			currentTimestamp := float.INFINITY;
			idx_com$softwareag$saep$SensorEvent := idx_com$softwareag$saep$SensorEvent + 1;
			if(not endTime.isNaN()) then {
				currentTimestamp := endTime;
				currentType := "";
				currentIndex := getIndexForType(types[0]);
			} else {
				next();
			}
		}

		/* Increment the iterator to point to the next event in the combined window. If there are no
			more events then isDone() will return true. Otherwise, use getIndex() and getType() to
			access the event. */
		action next() {
			if(currentType = "") then {
				currentType := types[0];
			}
			 
			/* Switch based on type of input */
			idx_com$softwareag$saep$SensorEvent := idx_com$softwareag$saep$SensorEvent - 1;
			string nextPrevType:="";
			float nextPrevTime:=-float.INFINITY;
			integer nextIndex:= -1;

			string type;
			for type in types {
				float evtTime:=getTimestamp(type);

				// assert (t >= currentTimestamp);
				if evtTime > nextPrevTime then {
					nextPrevTime := evtTime;
					nextPrevType := type;
					nextIndex:=getIndexForType(type);
				}
			}
			currentTimestamp := nextPrevTime;
			currentType := nextPrevType;
			currentIndex := nextIndex;
		}

		action isLatestReceived() returns boolean {
			return timestampOfLatestReceived = currentTimestamp;
		}

		action isDone() returns boolean {
			return currentIndex = -1;
		}

		action getTimestamp(string type) returns float {
			 
			/* Switch based on type of input */
			if idx_com$softwareag$saep$SensorEvent < 0 then {
				return -float.INFINITY;
			} else {
				return window_com$softwareag$saep$SensorEvent[idx_com$softwareag$saep$SensorEvent].getTime();
			}
		}

		action getIndexForType(string type) returns integer {
			 
			/* Switch based on type of input */
			return idx_com$softwareag$saep$SensorEvent;
		}
		
		action setTimeMode(boolean isTimeMode) {
			timeMode := isTimeMode;
		}
	}


	/** Internal event for holding evaluation state for a single find block */
	event __EvaluationState {

		// the user object (contains all user defined expressions/actions)
		__ElasticQueryUserCode __user;

		// Query scenario service event
		__QueryScenarioService queryScenarioService;

		// current index into the merged ordered window:
		__WindowsIterator inputs;

		// the current potential matchsets:
		dictionary<integer, __MatchSet> matchSets;
		
		// Matchsets spawned from the current matchset:
		sequence<integer> addedMatchsets;

		// whether we are matching the 'current' or latest event:
		boolean matchingCurrentEvent;
		
		// how many times we have consumed (coassigned) any events:
		integer haveConsumed;
		
		// the most recent matchset id
		integer mostRecentMatchSet;

		// whether to trigger even if the latest event is not in a matchset
		boolean findAllMatches;


		// duration for within filters (if any)

		//wait durations (if any)

		// The maximum time we really have (not just this evaluation)
		float maxDefinitiveTime;	

		// The timestamp of previously evaluated event
		float previousEventTimestamp;
		/* Effective timestamp of current event. Currently used by within filter. Initially 
		 * equal to the time of current event. Later it is set to the startTime of wait 
		 * interval when wait gets consumed. This ensures that within node evaluates 
		 * properly for event outside of wait interval as wait pattern causes whole 
		 * pattern to be evaluated for event outside wait interval.
		 * */
		float effectiveEventTimestamp;
		// value of the partition key for which evaluation is being done
		string key;
		// denote that pattern is being evaluated on expiry of some future wait
		boolean evalOnWaitExpiry;
		// If a wait evaluate while evalFutureTimer is true then wait is future wait
		boolean evalFutureTimer;
		// start time of the expired future wait
		float expiredWaitStartTime;
		// action to re-evaluate pattern on expirey of future wait
		action<__RestartQueryTimer> reEvaluateInputsAction;

		/** Evaluate a find pattern, calling __ElasticQueryUserCode.__findAction on a match
		  *
		  * Walks the window contents, evaluating the pattern using
		  * each of a set of MatchSets.
		  * Calls the __ElasticQueryUserCode.__findAction if a top level MatchSet exists
		  * which meets all of the where clauses and constraints
		  */
		action patternTrigger(float timeAtEndOfWindow, dictionary<string, float> inputDefinitiveTimes, dictionary<string, float> inputWaitTimes, boolean isSpeculating, dictionary<string, __DelayedOutOfOrderTime> delayedOutOfOrders) {
			///// Initialise state
			inputs.init(timeAtEndOfWindow);
			addInitialMatchSet();

			previousEventTimestamp := float.INFINITY;
			// ids of MatchSets that are final
			dictionary<integer, integer> finalMatchSetIds := new dictionary<integer, integer>;
			// in case of evalOnWaitExpiry, matchingCurrentEvent will get set to true
			// once future wait gets consumed.
			// when speculating matchingCurrentEvent only gets set to true if processing
			// the most recently received event.
			if not evalOnWaitExpiry then {
				matchingCurrentEvent := true;
			}
				
			boolean inputsDone := false;
			// first time pattern will be evaluated against no event to find future waits
			evalFutureTimer := true; 
			///// walk the window
			// for each event (until we have a final matchset, or no matchsets left)
			// we also evaluate pattern for window with no event and time -float.INFINITY
			while (not inputsDone) and (matchSets.size() > 0) {
				if isSpeculating then {
					matchingCurrentEvent := inputs.isLatestReceived();
				}
				__MatchSet matchSet;
				// for each matchset (present at the beginning
				// of processing this event - doesn't evaluate
				// matchsets added during this loop):
				for matchSet in matchSets.values() {
					///// evaluate the pattern twice:
					// once against time only then against event
					processPattern(matchSet, finalMatchSetIds, true);
					processPattern(matchSet, finalMatchSetIds, false);
				}

				evalFutureTimer := false;
				if (inputs.isDone()) then {
					inputsDone := true;
				}

				previousEventTimestamp := inputs.getCurrentTimestamp();
				inputs.next();
				// for the current/ latest event only: if it
				// is not coassigned, we abort the pattern
				// evaluation:
				if matchingCurrentEvent and haveConsumed = 0 and not findAllMatches then {
					return;
				}
				matchingCurrentEvent := false;
			}

			if finalMatchSetIds.size() > 0 then {
				if isSpeculating then {
					// determine when any matches triggered by the event most recently received by the correlator
					// will be less-than or equal to definitive time then re-evaluate at this time if it is currently
					// greater-than definitive time i.e. determine how long to wait for if necessary
					// (although explained using definitive time the actual calculation is in terms of real time)
					__MatchSet ms;
					integer fmsId;
					// The time at which this match occurred/will occur
					float ct := currentTime;
					for fmsId in finalMatchSetIds.keys() {
						ms := matchSets[fmsId];
						if ms.containsCurrent <= 0 then {
							continue;
						}

						float maxTS := ms.mostRecentTime();
						float speculativeWaitExpiryTime := ct;
						string eType;
						for eType in inputDefinitiveTimes.keys() {
							if inputDefinitiveTimes[eType] < maxTS then {
								__DelayedOutOfOrderTime delayed := delayedOutOfOrders.getOrDefault(eType);
								if delayed.maxInputEventTimestamp >= maxTS then {
									speculativeWaitExpiryTime := float.max(speculativeWaitExpiryTime, float.min(maxTS + inputWaitTimes.getOr(eType, 0.0), delayed.correlatorTimeBecomesDefinitive));
								} else {
									speculativeWaitExpiryTime := float.max(speculativeWaitExpiryTime, maxTS + inputWaitTimes.getOr(eType, 0.0));
								}
							}
						}

						if speculativeWaitExpiryTime > ct then {
							// wait for time+epsilon to avoid floating-point rounding errors, specifically the wait being slightly less than it should be
							speculativeWaitExpiryTime := speculativeWaitExpiryTime.nextafter(float.INFINITY);
							reEvaluateInputsAction(__RestartQueryTimer(queryScenarioService.name, queryScenarioService.instancePxyId, key, ct, speculativeWaitExpiryTime, false));
						}
					}

					return;
				}

				integer id:= mostRecentMatchSet;
				sequence<__MatchSet> allMatches := new sequence<__MatchSet>;
				boolean anyHaveCurrent := false;
				boolean anyFireNow := false;
				while(id != -1) {
					__MatchSet matchSet := matchSets[id];
					// check that there are no pending timers
					if finalMatchSetIds.hasKey(id) then {
						if matchSet.containsCurrent > 0 then {
							anyFireNow := processPendingWaitTimers(matchSet, inputWaitTimes) or anyFireNow;
							anyHaveCurrent := true;
						}

						allMatches.append(matchSet);
					}
					id := matchSet.next;
				}

				// if no new matchsets (i.e. with the current event), then suppress generating output:
				if not findAllMatches and ((not anyHaveCurrent) or (not anyFireNow)) then {
					return;
				}

				allMatches.reverse();
				__user.__processAggregates(allMatches);
				return; 

			}
		}

		/** Process pattern against time only or against event*/
		action processPattern(__MatchSet matchSet, dictionary<integer, integer> finalMatchSetIds, boolean withTime) {
			inputs.setTimeMode(withTime);
			
			effectiveEventTimestamp := inputs.getCurrentTimestamp();
			if matchSets.hasKey(matchSet.id) and not finalMatchSetIds.hasKey(matchSet.id) and evaluatePattern(matchSet) then {
				// we have a complete potential matchset.  If it matches the where clause, ...
				if pattern_node0_where(matchSet) then {
					// .. then we have a final matchset
					finalMatchSetIds.add(matchSet.id, matchSet.id);
				} else {
					discard(matchSet);
				}
			}
		}
		
		/** Process pending wait timers. If there are atleast one pending timer
		* which need to be evaluated in future then it returns false. */
		action processPendingWaitTimers(__MatchSet matchSet, dictionary<string,float> inputWaitTimes) returns boolean {
			// there will not be any pending timers when evaluating against
			// wait expiry because we are evaluating after all required waits are expired
			if evalOnWaitExpiry then {
				return true;
			}
			boolean noPendingTimer := true;
			float waitExpiryTime := -float.INFINITY;
			float waitStartTime := -float.INFINITY;
			string actionName := "";
			if not noPendingTimer then {
				// the waitStartTime is supplied so that wait
				// expression will evaluate to true when
				// evaluation reaches to that event
				reEvaluateInputsAction(__RestartQueryTimer(queryScenarioService.name, queryScenarioService.instancePxyId, key, waitStartTime, waitExpiryTime, true));
			}

			return noPendingTimer;
		}

		/** read current window content and corresponding event timestamps */
		action currentWindowContents(boolean forLogging) returns sequence<string> {
			inputs.init(float.NAN);
			sequence<string> contentsAndTimestamps := new sequence<string>;
			sequence<string> windowDump:=new sequence<string>;
			sequence<string> timestamps:=new sequence<string>;
			while(not inputs.isDone()) {
				windowDump.insert(inputs.getStringified(),0);
				decimal actualTimestamp := (inputs.getCurrentTimestamp().toDecimal() / __TS.GRANULARITY.toDecimal()).round().toDecimal() * __TS.GRANULARITY.toDecimal();
				timestamps.insert(actualTimestamp.toFloat().toString(), 0);
				inputs.next();
			}
			if forLogging then {
				contentsAndTimestamps.append("Sensors window contents: ["+(",".join(windowDump))+"]");
				contentsAndTimestamps.append("Sensors window timestamps: ["+(",".join(timestamps))+"]");
			} else {
				contentsAndTimestamps.append("["+(",".join(windowDump))+"]");
				contentsAndTimestamps.append("["+(",".join(timestamps))+"]");
			}

			return contentsAndTimestamps;
		}

		constant integer EVAL_MATCHEVENTS := 1;
		constant integer EVAL_EVAL := 2;
		constant integer EVAL_CONDITIONS := 3;

		/** Evaluate the entire pattern (including withouts, withins, etc) */
		action evaluatePattern(__MatchSet matchSet) returns boolean {
			addedMatchsets:= new sequence<integer>;
			boolean prev_has_s1 := matchSet.has_s1;
			boolean p := pattern_node_0(matchSet, EVAL_MATCHEVENTS);
			p := pattern_node_0(matchSet, EVAL_EVAL);
			boolean p2 := pattern_node_0(matchSet, EVAL_CONDITIONS);
			p := p and p2;
			integer msId;
			while addedMatchsets.size() > 0 {
				sequence<integer> prevAdded := addedMatchsets;
				addedMatchsets := new sequence<integer>;
				for msId in prevAdded {
					if matchSets.hasKey(msId) then {
						matchSet := matchSets[msId];
						boolean q := pattern_node_0(matchSet, EVAL_EVAL);
						boolean q2 := pattern_node_0(matchSet, EVAL_CONDITIONS);
						if q or q2 then {
							__user.__qLogger.instanceLog("Unexpectedly evaluated a spawned matchset to true", "ERROR", false);
						}
					}
				}
			}
			return p;
		}

		/* Start of evaluation actions for each node in the pattern */
		action pattern_node0_where(__MatchSet matchSet) returns boolean {

			// what positive where clauses can we now evaluate?
			// what without where clauses can we now evaluate?

			// do any withouts invalidate this matchset?

			return true;
		}

		// utility methods for managing MatchSets:
		/** Add the initial matchset. */
		action addInitialMatchSet() {
			__MatchSet initial := new __MatchSet;
			initial.init();
			initial.next := -1;
			initial.prev := -1;
			mostRecentMatchSet := initial.id;
			matchSets.add(initial.id, initial);
		}

		/** Find the most recent matchset that is in the supplied set */
		action findMostRecentIn(dictionary<integer, integer> set) returns integer {
			integer id:= mostRecentMatchSet;
			while (id != -1 and not set.hasKey(id)) {
				id := matchSets[id].next;
			}
			return id;
		}

		/** Add a match set */
		action addMatchSetAfter(__MatchSet prior) returns __MatchSet {
			if(not matchSets.hasKey(prior.id)) then {
				return prior;
			}
			__MatchSet newms := prior.clone();
			newms.init();
			newms.prev := prior.id;
			newms.next := prior.next;
			prior.next := newms.id;
			if(newms.next != -1) then {
				matchSets[newms.next].prev := newms.id;
			}
			matchSets.add(newms.id, newms);
			addedMatchsets.append(newms.id);
			return newms;
		}

		/** discard a match set */
		action discard(__MatchSet matchSet) {
			if matchSets.hasKey(matchSet.id) then {
				// maintain linked list:
				if(matchSet.prev != -1) then {
					if matchSets.hasKey(matchSet.prev) then {
						matchSets[matchSet.prev].next :=  matchSet.next;
					} else {
						__user.__qLogger.instanceLog("Unexpected matchset (prev) " + matchSet.prev.toString() + " in " + self.toString(), "ERROR", false);
					}
				}
				if(matchSet.next != -1) then {
					if matchSets.hasKey(matchSet.next) then {
						matchSets[matchSet.next].prev :=  matchSet.prev;
					} else {
						__user.__qLogger.instanceLog("Unexpected matchset (next) " + matchSet.next.toString() + " in " + self.toString(), "ERROR", false);
					}
				}
				if mostRecentMatchSet = matchSet.id then {
					mostRecentMatchSet := matchSet.next;
				}
				matchSets.remove(matchSet.id);
			} // else may have already been discarded - ignore
		}


		action evalConditions_node_0(__MatchSet matchSet) returns boolean {

			// what positive where clauses can we now evaluate?
			// what without where clauses can we now evaluate?

			// do any withouts invalidate this matchset?

			return true;
		}

		/* Pattern node for a coassignment from com$softwareag$saep$SensorEvent to s1 */
		action pattern_node_0(__MatchSet matchSet, integer evalState) returns boolean {
			// if we already have this coassignmnet, we evaluate to true, and don't copy or do anything:
			if matchSet.triggered_s1 > 0 then {
				if (evalState = EVAL_CONDITIONS) and (matchSet.triggered_s1  = EVAL_EVAL) then {
					matchSet.triggered_s1 := EVAL_CONDITIONS;
					boolean matchedWhere := evalConditions_node_0(matchSet);
					if not matchedWhere then {
						discard(matchSet);
					}
					return matchedWhere;
				}
				return true;
			}

			if "com$softwareag$saep$SensorEvent" = inputs.getType() then {
				if evalState = EVAL_MATCHEVENTS then {
					// coassign the event
					matchSet.csnmt_s1 := inputs.window_com$softwareag$saep$SensorEvent[inputs.getIndex()];
					matchSet.has_s1 := true;
					matchSet.timestamp_s1 := inputs.getCurrentTimestamp();

					haveConsumed := haveConsumed + 1;
					if matchingCurrentEvent then {
						matchSet.containsCurrent := matchSet.containsCurrent + 1;
					}

					return true;
				}
			}

			if evalState = EVAL_EVAL and matchSet.has_s1 then {
				boolean doCopy := true;
					__MatchSet copy := addMatchSetAfter(matchSet);
					copy.has_s1 := false;
					copy.triggered_s1 := 0;
					if matchingCurrentEvent then {
						copy.containsCurrent := copy.containsCurrent - 1;
					}
				matchSet.triggered_s1 := EVAL_EVAL;
				return true;
			} else {
				return false;
			}
		}

	}

	/* End of evaluation actions for each node in the pattern */

	action initWithinFilters() {
	}

	//wait duration
	action initWaits() {
	}
	
	/* Common code */
	/* =========== */
	
	/** Gets the next context for round-robin distribution of input events. */
	action nextContext() returns context {
		if workers.ctxs.size() <= 1 then {
			qLogger.instanceLog("Invalid state: No worker contexts.", "ERROR", false);
			shouldRespawn := false;
			die;
		}
		
		index := (index + 1) % workers.ctxs.size();
		if workers.ctxs[index].getId() = workers.gc_ctx.getId() then  {
			index := (index + 1) % workers.ctxs.size();
		}
		return workers.ctxs[index];
	}
	
	/** 
	* Called if the system is reconfigured.
	* Updates the set of contexts over which to distribute events.
	*/
	action onNewContexts( __WorkerContextSet workers_ ) {
		workers := workers_;
		context ctx;
		for ctx in workers.ctxs {
			spawn newWorker() to ctx;
		}

		queryScenarioService.updateWorkerContexts(workers);
	}
	
	/** Terminates a worker instance */
	action terminateWorker() {
		// Check if we've got any waits outstanding before shutting down.
		shouldRespawn := false;
		die;
	}
	
	/** Re-evaluate patterns
	* timer - details of the time we should re-evaluate at.
	*/
	action reEvaluateInputs(__RestartQueryTimer timer) {
		if not timerMgr.hasTimer(timer) then {
			timerMgr.add(timer);
			if(timer.waitExpiryTime > currentTime) then {
				on wait(timer.waitExpiryTime - currentTime) {
					fireTimer(timer, 10);
				}
			} else {
				fireTimer(timer, 10);
			}
		}
	}

	/** Find new definitive times since our last evaluation.
	* populates definitiveTimes with any source-realm definitive timestamps which were not definitive as of the last evaluation.
	*/
	action findValidNewDefinitiveTimes(sequence<float> definitiveTimes, float previousDefinitiveTime, float definitiveTime, float waitTime, sequence<float> sourceTimes, sequence<float> times) {
		integer i:=0;
		while(i < times.size() and i < sourceTimes.size()) {
			// must be (previous, current] definitive time, and not invalid (discarded due to delay > waitTime)
			if sourceTimes[i] > previousDefinitiveTime and sourceTimes[i] <= definitiveTime and times[i] - sourceTimes[i] <= waitTime then {
				definitiveTimes.append(sourceTimes[i]);
			}
			i := i + 1;
		}
	}


	/** 
	 * Process a stored snapshot for one of the inputs of this query
	 */
	action gotSnapshot(__StoredSnapshot ss) {
		boolean isEvalOnWaitExpiry:= ss.isEvalOnWaitExpiry;
		float expiredWaitStartTime:= ss.expiredWaitStartTime;
		float expiredWaitEndTime := ss.expiredWaitEndTime;

		// Set up input __EvaluationState variables
		__EvaluationState evalState := newEvaluationState(ss);
		dictionary<string, float> inputWaitTimes := new dictionary<string, float>;
		dictionary<string, float> dict := new dictionary<string, float>;

		// no source timestamps => single evaluation always
		if not anyHaveSourceTimestamps then {
			evalWindowOnce(evalState, ss, ss.latestEvent.processedTimestamp, currentTime, isEvalOnWaitExpiry, expiredWaitStartTime, expiredWaitEndTime, false, dict, dict, new dictionary<string, __DelayedOutOfOrderTime>);
		} else {
			inputWaitTimes := {};
			// Calculate previous definitive time, based on previousEvalTimestamp
			dictionary<string, float> previousDefinitiveTimes := new dictionary<string, float>;
			dictionary<string, __DelayedOutOfOrderTime> delayedOutOfOrders := {};
			populateInputDefinitiveTime_com$softwareag$saep$SensorEvent(ss, previousDefinitiveTimes, true, delayedOutOfOrders);

			// Calculate current defintive time:
			dictionary<string, float> definitiveTimesDict := new dictionary<string, float>;
			populateInputDefinitiveTime_com$softwareag$saep$SensorEvent(ss, definitiveTimesDict, false, delayedOutOfOrders);
			float previousDefinitiveTime := calculateQueryDefinitiveTime(previousDefinitiveTimes, "previous");
			float definitiveTime := calculateQueryDefinitiveTime(definitiveTimesDict, "current");

			float beginDefinitiveSearchRange := previousDefinitiveTime;
			float endDefinitiveSearchRange := definitiveTime;
			// determine what new definitive times we have:
			sequence<float> definitiveTimes := []; // populated by calls to findValidNewDefinitiveTimes
			{
				sequence<float> sourceTimes := ss.allEvts[sharedId_com$softwareag$saep$SensorEvent].timestamps;
				float waitTime:=0.0;
				findValidNewDefinitiveTimes(definitiveTimes, beginDefinitiveSearchRange, endDefinitiveSearchRange, waitTime, sourceTimes, ss.allEvts[sharedId_com$softwareag$saep$SensorEvent].timestamps);
			}
			definitiveTimes.sort();

			float evalDefinitiveTime;
			for evalDefinitiveTime in definitiveTimes {
				evalWindowOnce(evalState.clone(), ss.clone(), evalDefinitiveTime, definitiveTime, false, float.NAN, float.NAN, false, dict, inputWaitTimes, delayedOutOfOrders);
			}

			if anyHaveSourceTimestamps and not isEvalOnWaitExpiry then {
				// now perform speculative search through window to determine if any timers should be set up
				evalWindowOnce(evalState, ss, float.INFINITY, definitiveTime, false, float.NAN, float.NAN, true, definitiveTimesDict, inputWaitTimes, delayedOutOfOrders);
			}
		}
	}

	/** 
	 * Evaluate the window, up to the point indicated in source time by definitive time
	 */
	action evalWindowOnce(__EvaluationState evalState, __StoredSnapshot ss, float definitiveTime, float maxDefinitiveTime, boolean isEvalOnWaitExpiry, float expiredWaitStartTime, float expiredWaitEndTime, boolean isSpeculating, dictionary<string, float> definitiveTimes, dictionary<string, float> inputWaitTimes, dictionary<string, __DelayedOutOfOrderTime> delayedOutOfOrders) {
		// Set up the rest of input __EvaluationState variables
		evalState.maxDefinitiveTime := maxDefinitiveTime;
		evalState.evalOnWaitExpiry := isEvalOnWaitExpiry;
		evalState.expiredWaitStartTime := expiredWaitStartTime;
		evalState.findAllMatches := ss.findAllMatches;

		// Trim relevant windows based on the queries definitive time
		scopeWindowToDefinitiveTime_com$softwareag$saep$SensorEvent(evalState.inputs.window_com$softwareag$saep$SensorEvent, definitiveTime, ss, isSpeculating, maxDefinitiveTime);
		// set evalState.inputs.timestampOfLatestReceived to the timestamp available to
		// __WindowsIterator which is sew.sourceTimestamp if available, otherwise sew.timestamp
		evalState.inputs.timestampOfLatestReceived := ss.latestEvent.sourceTimestamp;

		// Execute patternTrigger
		// If isSpeculating = true we scan through once to determine any future matchSets and get the max wait value
		evalState.patternTrigger(expiredWaitEndTime, definitiveTimes, inputWaitTimes, isSpeculating, delayedOutOfOrders);
	}


	/**
	 * Actually re-evaluate an expired timer
	 */
	action fireTimer(__RestartQueryTimer timer, integer retryCount) {
		string key := timer.windowKey;
		__StoredSnapshot ss;
		try {
			ss := windowManager_com$softwareag$saep$SensorEvent.getSnapshot(key, false);
			// correlator timestamp of events can go
			// slightly ahead of correlator time, so
			// processedTimestamp is the max of
			// ss.latestEvent and the timer expiry time:
			ss.latestEvent.processedTimestamp := float.max(ss.latestEvent.processedTimestamp, timer.waitExpiryTime);
			ss.isEvalOnWaitExpiry := true;
			ss.expiredWaitStartTime := timer.waitStartTime;
			ss.expiredWaitEndTime := timer.waitExpiryTime;
		} catch (com.apama.exceptions.Exception __e) {
			if (retryCount > 0) then {
				qLogger.instanceLog("Caught exception (retries="+retryCount.toString()+") "+__e.getType()+" - "+__e.getMessage()+" - "+__e.toString()+" - "+__e.getStackTrace().toString(), "ERROR", false);
				terminationMgr.incrOutstandingRetries();
				on wait(1.0) {
					fireTimer(timer, retryCount - 1);
					terminationMgr.decrOutstandingRetries();
				}
				return;
			} else {
				qLogger.instanceLog("Terminating query instance. Exception "+__e.getType()+" - "+__e.getMessage()+" - "+__e.toString(), "FATAL", false);
				shouldTerminateWorkers := true;
				die;
			}
		}
		// We have timers per query instance; just eval locally.
		gotSnapshot(ss);
		timerMgr.remove(timer);
	}

	// Set up variables required when instantiating __EvalutationState
	action newEvaluationState(__StoredSnapshot ss) returns __EvaluationState {
		__EvaluationState evalState := new __EvaluationState;
		evalState.key := ss.key;
		evalState.reEvaluateInputsAction := reEvaluateInputs;
	
		evalState.queryScenarioService := queryScenarioService;
		__user.__qLogger := qLogger;
		evalState.__user := __user.clone();
		
		// set the key values:
		sequence<string> keyValues := sequence<string>.parse(ss.key);
		integer i:=0;

		evalState.inputs.window_com$softwareag$saep$SensorEvent := getWindow_com$softwareag$saep$SensorEvent(ss);

		shouldRespawn := true;
		return evalState;
	}

	action getCurrentTime(float maxTimestamp, boolean breakTie) returns float {
		 if(currentTime > maxTimestamp) then { 	 
			return currentTime;
		} else if breakTie then {
			return maxTimestamp + __TS.TIEBREAKER;
		} else {
			return maxTimestamp;
		}
	}

	/* 
	 * Calculates the definitive time of the input window corresponding to the 
	 * sourceTimestamps passed in. Calculated as the maximum of:
	 * 	Most recent timestamp or source timestamp
	 * 	Correlator's current time - input wait time
	 */
	action calculateInputDefinitiveTime(sequence<float> definitiveTimestamps, 
			sequence<float> correlatorTimestamps, 
			float evalCurrentTime, float inputWait, 
			float heartbeatTime, 
			dictionary<string, __DelayedOutOfOrderTime> delayedOutOfOrders, 
			string thisInput, 
			boolean outOfOrder) returns float {

		if outOfOrder then {
			return float.max(evalCurrentTime - inputWait, heartbeatTime);
		}

		float dt := -float.INFINITY;
		float maxTimeOutOfOrder := -float.INFINITY;
		float timeWillBecomeDefinitive := -float.INFINITY;
		integer i:=0;
		while(i < definitiveTimestamps.size()) {
			float evtDelayTime := correlatorTimestamps[i] - definitiveTimestamps[i];
			float evtAge := evalCurrentTime - correlatorTimestamps[i];
			if( evtDelayTime <= queryScenarioService.delayLeeway.delayLeeway or 
			     evtAge >= queryScenarioService.delayLeeway.reorderBuffer) then {
				if maxTimeOutOfOrder = -float.INFINITY then {
					dt := float.max(dt, definitiveTimestamps[i]);
				}
			} else {
				maxTimeOutOfOrder := float.max(maxTimeOutOfOrder, definitiveTimestamps[i]);
				timeWillBecomeDefinitive := float.max(timeWillBecomeDefinitive, correlatorTimestamps[i] + queryScenarioService.delayLeeway.reorderBuffer);
			}
			i := i + 1;
		}
		if(maxTimeOutOfOrder != -float.INFINITY and thisInput != "") then {
			delayedOutOfOrders[thisInput] := __DelayedOutOfOrderTime(maxTimeOutOfOrder, timeWillBecomeDefinitive);
		}

		return float.max(float.max(dt, evalCurrentTime - inputWait), heartbeatTime);
	}

	/* 
	 * Calculates the definitive time of the query. Calculated as the minimum of
	 * all the input definitive times.
	 * Definitive time defines the time the query is accurate up to, across all
	 * inputs, taking into account any source times the inputs may have. It is the point
	 * in time for which the query runtime knows it has received all the events it is 
	 * going to receive. Only from this time onwards will patterns match.
	 * This is definied for queries with and without any getSourceTime actions 
	 * implemented but only has special method when at least one is present;
	 */
	action calculateQueryDefinitiveTime(dictionary<string, float> dts, string type) returns float {
		float dt := float.INFINITY;
		string dt_key;
		for dt_key in dts.keys() {
			dt := float.min(dt, dts[dt_key]);
		}

		return dt;
	}
	
	action getMetadataMap() returns dictionary<string, string> {
		return {
"Author":"Software AG"
				};
	}
}

// QUERY SOURCE:
// This is a base64-encoded copy of the query source (generated by rel/9.10.0.x@275046) that generated this .mon file
// Ly8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
// KioqKioqKioqKioqKioqKioqKioqKg0KLy8gVGl0bGU6ICAgICAgICAgU2Vuc29ycw0KLy8gRGVz
// Y3JpcHRpb246ICAgQ291bnRzIHRoZSBzZW5zb3IgZXZlbnRzIGluIGEgdGltZSB3aW5kb3cNCi8v
// IERlcGVuZGVuY2llczogIEV2ZW50IHR5cGUgZGVmaW5pdGlvbg0KLy8gQXV0aG9yOiAgICAgICAg
// U29mdHdhcmUgQUcNCi8vDQovLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
// KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQoNCnBhY2thZ2UgY29tLnNv
// ZnR3YXJlYWcuc2FlcDsNCg0KcXVlcnkgU2Vuc29ycyB7CQ0KCW1ldGFkYXRhIHsNCgkJIkF1dGhv
// ciI6IlNvZnR3YXJlIEFHIg0KCX0NCgkNCglpbnB1dHMgIHsNCgkJU2Vuc29yRXZlbnQoKSB3aXRo
// aW4gNSBzZWM7DQoJfQ0KDQoJZmluZCBldmVyeSBTZW5zb3JFdmVudCA6IHMxDQoJc2VsZWN0IGNv
// bS5hcGFtYS5hZ2dyZWdhdGVzLmNvdW50KCkgOiBlMSAgew0KCQklY3VzdG9tKCJ0aXRsZSI6IkN1
// c3RvbSBFUEwgQWN0aW9uIDEiKSB7DQoJCQlzZW5kIENvdW50ZXIoZTEpIHRvICIiOw0KCQl9DQoJ
// fQ0KfQ0K

TIME 0000000c 1484234970,1
TIME 0000000c 1484234970,2
TIME 0000000d 1484234970,30
TIME 0000000c 1484234970,3
TIME 0000000c 1484234970,5
TIME 0000000c 1484234970,6
TIME 0000000c 1484234970,7
TIME 0000000c 1484234970,8
TIME 0000000c 1484234970,9
TIME 0000000d 1484234970,10
TIME 0000000d 1484234970,11
TIME 0000000d 1484234970,12
TIME 0000000d 1484234970,13
TIME 0000000d 1484234970,14
TIME 0000000d 1484234970,15
TIME 0000000d 1484234970,16
TIME 0000000d 1484234970,17
TIME 0000000d 1484234970,18
TIME 0000000d 1484234970,19
TIME 0000000d 1484234970,20
TIME 0000000d 1484234970,21
TIME 0000000d 1484234970,22
TIME 0000000d 1484234970,23
TIME 0000000d 1484234970,24
TIME 0000000d 1484234970,25
TIME 0000000d 1484234970,26
TIME 0000000d 1484234970,27
TIME 0000000d 1484234970,28
TIME 0000000d 1484234970,29
EVNT 0000008a 10612171611911497990 "",com.softwareag.saep.RawEvent(4,10753295594424116,27187,-405,451,5053947,341072227,-1830,9748,1268,-4018,9154,198);
TIME 0000000e 1484234970.1,1
TIME 0000000e 1484234970.2,1
TIME 0000000e 1484234970.2,3
TIME 0000000e 1484234970.3,1
TIME 0000000e 1484234970.4,1
TIME 0000000e 1484234970.5,1
TIME 0000000e 1484234970.5,3
TIME 0000000e 1484234970.6,1
TIME 0000000e 1484234970.7,1
TIME 0000000e 1484234970.8,1
TIME 0000000e 1484234970.9,1
TIME 0000000c 1484234971,1
TIME 0000000d 1484234971,31
TIME 0000000e 1484234971.1,1
TIME 0000000e 1484234971.2,1
TIME 0000000e 1484234971.3,1
TIME 0000000e 1484234971.4,1
TIME 0000000e 1484234971.5,1
TIME 0000000e 1484234971.6,1
TIME 0000000e 1484234971.6,3
TIME 0000000e 1484234971.7,1
TIME 0000000e 1484234971.8,1
TIME 0000000e 1484234971.9,1
TIME 0000000c 1484234972,1
TIME 0000000c 1484234972,2
TIME 0000000e 1484234972.1,1
TIME 0000000e 1484234972.2,1
TIME 0000000f 1484234972.2,31
TIME 0000000e 1484234972.3,1
TIME 0000000e 1484234972.4,1
TIME 0000000e 1484234972.5,1
TIME 0000000e 1484234972.6,1
TIME 0000000e 1484234972.7,1
TIME 0000000e 1484234972.8,1
TIME 0000000e 1484234972.9,1
TIME 0000000c 1484234973,1
TIME 0000000e 1484234973.1,1
TIME 0000000e 1484234973.2,1
TIME 0000000e 1484234973.3,1
TIME 0000000e 1484234973.3,3
TIME 0000000e 1484234973.4,1
TIME 0000000e 1484234973.5,1
TIME 0000000e 1484234973.5,2
TIME 0000000f 1484234973.5,31
TIME 0000000e 1484234973.6,1
TIME 0000000e 1484234973.7,1
TIME 0000000e 1484234973.8,1
TIME 0000000e 1484234973.8,2
TIME 0000000e 1484234973.9,1
TIME 0000000e 1484234973.9,3
TIME 0000000c 1484234974,1
TIME 0000000e 1484234974.1,1
TIME 0000000e 1484234974.2,1
TIME 0000000e 1484234974.3,1
TIME 0000000e 1484234974.4,1
TIME 0000000e 1484234974.5,1
TIME 0000000e 1484234974.6,1
TIME 0000000e 1484234974.6,3
TIME 0000000e 1484234974.6,2
TIME 0000000e 1484234974.7,1
TIME 0000000e 1484234974.8,1
TIME 0000000e 1484234974.9,1
TIME 0000000c 1484234975,1
TIME 0000000e 1484234975.1,1
TIME 0000000e 1484234975.2,1
TIME 0000000e 1484234975.3,1
TIME 0000000f 1484234975.3,31
TIME 0000000e 1484234975.4,1
TIME 0000000e 1484234975.4,2
TIME 0000000e 1484234975.5,1
TIME 0000000e 1484234975.6,1
TIME 0000000e 1484234975.7,1
TIME 0000000e 1484234975.7,3
TIME 0000000e 1484234975.8,1
TIME 0000000e 1484234975.9,1
TIME 0000000c 1484234976,1
TIME 0000000e 1484234976.1,1
TIME 0000000e 1484234976.2,1
TIME 0000000e 1484234976.2,2
TIME 0000000e 1484234976.3,1
TIME 0000000e 1484234976.4,1
TIME 0000000e 1484234976.5,1
TIME 0000000e 1484234976.5,2
TIME 0000000e 1484234976.6,1
TIME 0000000e 1484234976.7,1
TIME 0000000e 1484234976.8,1
TIME 0000000e 1484234976.9,1
TIME 0000000c 1484234977,1
TIME 0000000e 1484234977.1,1
TIME 0000000e 1484234977.2,1
TIME 0000000e 1484234977.3,1
TIME 0000000e 1484234977.4,1
TIME 0000000e 1484234977.5,1
TIME 0000000e 1484234977.6,1
TIME 0000000e 1484234977.7,1
TIME 0000000e 1484234977.8,1
TIME 0000000e 1484234977.9,1
TIME 0000000c 1484234978,1
TIME 0000000e 1484234978.1,1
TIME 0000000e 1484234978.2,1
TIME 0000000e 1484234978.3,1
TIME 0000000e 1484234978.4,1
TIME 0000000e 1484234978.5,1
TIME 0000000e 1484234978.6,1
TIME 0000000e 1484234978.7,1
TIME 0000000e 1484234978.7,3
TIME 0000000e 1484234978.7,2
TIME 0000000e 1484234978.8,1
TIME 0000000e 1484234978.9,1
TIME 0000000c 1484234979,1
TIME 0000000e 1484234979.1,1
TIME 0000000e 1484234979.2,1
TIME 0000000e 1484234979.3,1
TIME 0000000e 1484234979.4,1
TIME 0000000e 1484234979.5,1
TIME 0000000e 1484234979.5,3
TIME 0000000e 1484234979.6,1
TIME 0000000e 1484234979.7,1
TIME 0000000e 1484234979.8,1
TIME 0000000e 1484234979.9,1
TIME 0000000c 1484234980,1
TIME 0000000e 1484234980.1,1
TIME 0000000e 1484234980.2,1
TIME 0000000e 1484234980.3,1
TIME 0000000e 1484234980.4,1
TIME 0000000e 1484234980.5,1
TIME 0000000e 1484234980.6,1
TIME 0000000e 1484234980.6,3
TIME 0000000e 1484234980.7,1
TIME 0000000e 1484234980.8,1
TIME 0000000e 1484234980.9,1
TIME 0000000c 1484234981,1
TIME 0000000e 1484234981.1,1
TIME 0000000e 1484234981.2,1
TIME 0000000e 1484234981.3,1
TIME 0000000e 1484234981.4,1
TIME 0000000e 1484234981.5,1
TIME 0000000e 1484234981.6,1
TIME 0000000e 1484234981.6,3
TIME 0000000e 1484234981.7,1
TIME 0000000e 1484234981.8,1
TIME 0000000e 1484234981.9,1
TIME 0000000c 1484234982,1
TIME 0000000e 1484234982.1,1
TIME 0000000e 1484234982.2,1
TIME 0000000e 1484234982.3,1
TIME 0000000e 1484234982.3,2
TIME 0000000e 1484234982.4,1
TIME 0000000e 1484234982.5,1
TIME 0000000e 1484234982.6,1
TIME 0000000e 1484234982.7,1
TIME 0000000e 1484234982.8,1
TIME 0000000e 1484234982.9,1
TIME 0000000e 1484234982.9,3
TIME 0000000c 1484234983,1
TIME 0000000e 1484234983.1,1
TIME 0000000e 1484234983.2,1
TIME 0000000e 1484234983.3,1
TIME 0000000e 1484234983.3,2
TIME 0000000e 1484234983.4,1
TIME 0000000e 1484234983.5,1
TIME 0000000e 1484234983.5,3
TIME 0000000e 1484234983.6,1
TIME 0000000e 1484234983.7,1
TIME 0000000e 1484234983.8,1
TIME 0000000e 1484234983.9,1
TIME 0000000c 1484234984,1
TIME 0000000e 1484234984.1,1
TIME 0000000e 1484234984.2,1
TIME 0000000e 1484234984.3,1
TIME 0000000e 1484234984.3,2
TIME 0000000e 1484234984.4,1
TIME 0000000e 1484234984.4,3
TIME 0000000e 1484234984.5,1
TIME 0000000e 1484234984.6,1
TIME 0000000e 1484234984.7,1
TIME 0000000e 1484234984.8,1
TIME 0000000e 1484234984.9,1
TIME 0000000c 1484234985,1
TIME 0000000e 1484234985.1,1
TIME 0000000e 1484234985.2,1
TIME 0000000e 1484234985.3,1
TIME 0000000e 1484234985.3,3
TIME 0000000e 1484234985.4,1
TIME 0000000e 1484234985.5,1
TIME 0000000e 1484234985.6,1
TIME 0000000e 1484234985.7,1
TIME 0000000e 1484234985.7,2
TIME 0000000e 1484234985.8,1
TIME 0000000e 1484234985.9,1
TIME 0000000e 1484234985.9,3
TIME 0000000c 1484234986,1
TIME 0000000e 1484234986.1,1
TIME 0000000e 1484234986.2,1
TIME 0000000e 1484234986.3,1
TIME 0000000e 1484234986.3,2
TIME 0000000e 1484234986.4,1
TIME 0000000e 1484234986.5,1
TIME 0000000e 1484234986.6,1
TIME 0000000e 1484234986.7,1
TIME 0000000e 1484234986.8,1
TIME 0000000e 1484234986.9,1
TIME 0000000e 1484234986.9,3
TIME 0000000c 1484234987,1
TIME 0000000e 1484234987.1,1
TIME 0000000e 1484234987.2,1
TIME 0000000e 1484234987.3,1
TIME 0000000e 1484234987.4,1
TIME 0000000e 1484234987.5,1
TIME 0000000e 1484234987.5,3
TIME 0000000e 1484234987.6,1
TIME 0000000e 1484234987.7,1
TIME 0000000e 1484234987.7,2
TIME 0000000e 1484234987.8,1
TIME 0000000e 1484234987.9,1
TIME 0000000c 1484234988,1
TIME 0000000c 1484234988,2
TIME 0000000e 1484234988.1,1
TIME 0000000e 1484234988.2,1
TIME 0000000e 1484234988.3,1
TIME 0000000e 1484234988.3,2
TIME 0000000e 1484234988.4,1
TIME 0000000e 1484234988.5,1
TIME 0000000e 1484234988.6,1
TIME 0000000e 1484234988.6,3
TIME 0000000e 1484234988.7,1
TIME 0000000e 1484234988.8,1
TIME 0000000e 1484234988.9,1
TIME 0000000e 1484234988.9,2
TIME 0000000c 1484234989,1
TIME 0000000e 1484234989.1,1
TIME 0000000e 1484234989.2,1
TIME 0000000e 1484234989.3,1
TIME 0000000e 1484234989.4,1
TIME 0000000e 1484234989.4,3
TIME 0000000e 1484234989.5,1
TIME 0000000e 1484234989.6,1
TIME 0000000e 1484234989.7,1
TIME 0000000e 1484234989.8,1
TIME 0000000e 1484234989.9,1
TIME 0000000c 1484234990,1
TIME 0000000e 1484234990.1,1
TIME 0000000e 1484234990.2,1
TIME 0000000e 1484234990.3,1
TIME 0000000e 1484234990.4,1
TIME 0000000e 1484234990.5,1
TIME 0000000e 1484234990.6,1
TIME 0000000e 1484234990.7,1
TIME 0000000e 1484234990.8,1
TIME 0000000e 1484234990.9,1
TIME 0000000e 1484234990.9,3
TIME 0000000c 1484234991,1
TIME 0000000e 1484234991.1,1
TIME 0000000e 1484234991.1,2
TIME 0000000e 1484234991.2,1
TIME 0000000e 1484234991.3,1
TIME 0000000e 1484234991.4,1
TIME 0000000e 1484234991.5,1
TIME 0000000e 1484234991.5,3
TIME 0000000e 1484234991.6,1
TIME 0000000e 1484234991.7,1
TIME 0000000e 1484234991.8,1
TIME 0000000e 1484234991.9,1
TIME 0000000c 1484234992,1
TIME 0000000c 1484234992,2
TIME 0000000e 1484234992.1,1
TIME 0000000e 1484234992.2,1
TIME 0000000e 1484234992.3,1
TIME 0000000e 1484234992.3,2
TIME 0000000e 1484234992.4,1
TIME 0000000e 1484234992.5,1
TIME 0000000e 1484234992.6,1
TIME 0000000e 1484234992.6,3
TIME 0000000e 1484234992.7,1
TIME 0000000e 1484234992.8,1
TIME 0000000e 1484234992.9,1
TIME 0000000e 1484234992.9,2
TIME 0000000c 1484234993,1
TIME 0000000e 1484234993.1,1
TIME 0000000e 1484234993.2,1
TIME 0000000e 1484234993.3,1
TIME 0000000e 1484234993.4,1
TIME 0000000e 1484234993.5,1
TIME 0000000e 1484234993.6,1
TIME 0000000e 1484234993.6,2
TIME 0000000e 1484234993.7,1
TIME 0000000e 1484234993.7,3
TIME 0000000e 1484234993.8,1
TIME 0000000e 1484234993.9,1
TIME 0000000e 1484234993.9,2
TIME 0000000c 1484234994,1
TIME 0000000e 1484234994.1,1
TIME 0000000e 1484234994.2,1
TIME 0000000e 1484234994.2,2
TIME 0000000e 1484234994.3,1
TIME 0000000e 1484234994.4,1
TIME 0000000e 1484234994.5,1
TIME 0000000e 1484234994.5,2
TIME 0000000e 1484234994.6,1
TIME 0000000e 1484234994.7,1
TIME 0000000e 1484234994.8,1
TIME 0000000e 1484234994.8,2
TIME 0000000e 1484234994.9,1
TIME 0000000c 1484234995,1
TIME 0000000e 1484234995.1,1
TIME 0000000e 1484234995.2,1
TIME 0000000e 1484234995.3,1
TIME 0000000e 1484234995.4,1
TIME 0000000e 1484234995.5,1
TIME 0000000e 1484234995.6,1
TIME 0000000e 1484234995.7,1
TIME 0000000e 1484234995.7,3
TIME 0000000e 1484234995.7,2
TIME 0000000e 1484234995.8,1
TIME 0000000e 1484234995.9,1
TIME 0000000c 1484234996,1
TIME 0000000c 1484234996,2
TIME 0000000e 1484234996.1,1
TIME 0000000e 1484234996.2,1
TIME 0000000e 1484234996.3,1
TIME 0000000e 1484234996.3,3
TIME 0000000e 1484234996.4,1
TIME 0000000e 1484234996.5,1
TIME 0000000e 1484234996.6,1
TIME 0000000e 1484234996.7,1
TIME 0000000e 1484234996.7,2
TIME 0000000e 1484234996.8,1
TIME 0000000e 1484234996.9,1
TIME 0000000e 1484234996.9,3
TIME 0000000c 1484234997,1
TIME 0000000e 1484234997.1,1
TIME 0000000e 1484234997.2,1
TIME 0000000e 1484234997.3,1
TIME 0000000e 1484234997.4,1
TIME 0000000e 1484234997.5,1
TIME 0000000e 1484234997.6,1
TIME 0000000e 1484234997.6,2
TIME 0000000e 1484234997.7,1
TIME 0000000e 1484234997.8,1
TIME 0000000e 1484234997.9,1
TIME 0000000c 1484234998,1
TIME 0000000e 1484234998.1,1
TIME 0000000e 1484234998.2,1
TIME 0000000e 1484234998.3,1
TIME 0000000e 1484234998.4,1
TIME 0000000e 1484234998.5,1
TIME 0000000e 1484234998.6,1
TIME 0000000e 1484234998.6,2
TIME 0000000e 1484234998.7,1
TIME 0000000e 1484234998.8,1
TIME 0000000e 1484234998.9,1
TIME 0000000e 1484234998.9,2
TIME 0000000c 1484234999,1
TIME 0000000e 1484234999.1,1
TIME 0000000e 1484234999.2,1
TIME 0000000e 1484234999.3,1
TIME 0000000e 1484234999.4,1
TIME 0000000e 1484234999.4,3
TIME 0000000e 1484234999.5,1
TIME 0000000e 1484234999.6,1
TIME 0000000e 1484234999.7,1
TIME 0000000e 1484234999.8,1
TIME 0000000e 1484234999.9,1
TIME 0000000c 1484235000,1
TIME 0000000c 1484235000,2
TIME 0000000e 1484235000.1,1
TIME 0000000e 1484235000.2,1
TIME 0000000e 1484235000.3,1
TIME 0000000e 1484235000.4,1
TIME 0000000e 1484235000.4,2
TIME 0000000e 1484235000.5,1
TIME 0000000e 1484235000.6,1
TIME 0000000e 1484235000.7,1
TIME 0000000e 1484235000.8,1
TIME 0000000e 1484235000.8,3
TIME 0000000e 1484235000.9,1
TIME 0000000c 1484235001,1
TIME 0000000e 1484235001.1,1
TIME 0000000e 1484235001.2,1
TIME 0000000e 1484235001.3,1
TIME 0000000e 1484235001.4,1
TIME 0000000e 1484235001.4,2
TIME 0000000e 1484235001.5,1
TIME 0000000e 1484235001.6,1
TIME 0000000e 1484235001.7,1
TIME 0000000e 1484235001.8,1
TIME 0000000e 1484235001.9,1
TIME 0000000c 1484235002,1
TIME 0000000e 1484235002.1,1
TIME 0000000e 1484235002.1,2
TIME 0000000e 1484235002.2,1
TIME 0000000e 1484235002.3,1
TIME 0000000e 1484235002.4,1
TIME 0000000e 1484235002.5,1
TIME 0000000e 1484235002.5,3
TIME 0000000e 1484235002.6,1
TIME 0000000e 1484235002.6,2
TIME 0000000e 1484235002.7,1
TIME 0000000e 1484235002.8,1
TIME 0000000f 1484235002.8,29
TIME 0000000f 1484235002.8,30
TIME 0000000f 1484235002.8,32
TIME 0000000f 1484235002.8,31
TIME 0000000e 1484235002.8,4
EVNT 0000008b 10612171611911497990 "",com.softwareag.saep.RawEvent(52,10753295627242564,23353,-15050,-108,1001114,6741407,4661,2298,8543,4779,4892,7294);
EVNT 0000008b 10612171611911497990 "",com.softwareag.saep.RawEvent(10,10753295659083187,-5264,15968,1267,134344,5976079,-5795,4595,6729,-9160,1132,3846);
